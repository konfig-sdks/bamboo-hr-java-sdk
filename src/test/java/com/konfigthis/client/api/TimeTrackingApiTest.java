/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequest;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequest1;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequest1ClockOutsInner;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner;
import com.konfigthis.client.model.TimeTrackingClockInEmployeeRequest;
import com.konfigthis.client.model.TimeTrackingClockInEmployeeRequestClockInLocation;
import com.konfigthis.client.model.TimeTrackingClockOutEmployeeAtSpecificTimeRequest;
import com.konfigthis.client.model.TimeTrackingClockOutEmployeeRequest;
import com.konfigthis.client.model.TimeTrackingClockOutEmployeeRequestClockOutLocation;
import com.konfigthis.client.model.TimeTrackingDeleteClockEntriesRequest;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequest;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequestClockInLocation;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequestClockOutLocation;
import com.konfigthis.client.model.TimeTrackingGetTimesheetsByIdsRequest;
import com.konfigthis.client.model.TimeTrackingStoreClockEntriesRequest;
import com.konfigthis.client.model.TimeTrackingStoreClockEntriesRequestEntriesInner;
import com.konfigthis.client.model.TimeTrackingStoreDailyEntriesRequest;
import com.konfigthis.client.model.TimeTrackingStoreDailyEntriesRequestEntriesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeTrackingApi
 */
@Disabled
public class TimeTrackingApiTest {

    private static TimeTrackingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeTrackingApi(apiClient);
    }

    /**
     * Approve employee timesheets
     *
     * Approve employee timesheets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveEmployeeTimesheetsTest() throws ApiException {
        Integer lastChanged = null;
        List<TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner> timesheets = null;
        String companyDomain = null;
        api.approveEmployeeTimesheets(lastChanged, timesheets, companyDomain)
                .execute();
        // TODO: test validations
    }

    /**
     * Approve timesheets for employees that are currently clocked in
     *
     * Approve timesheets for employees that are currently clocked in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveEmployeeTimesheets_0Test() throws ApiException {
        String companyDomain = null;
        List<TimeTrackingApproveEmployeeTimesheetsRequest1ClockOutsInner> clockOuts = null;
        api.approveEmployeeTimesheets_0(companyDomain)
                .clockOuts(clockOuts)
                .execute();
        // TODO: test validations
    }

    /**
     * Clock in (employee id optional)
     *
     * Clock in (employee id optional)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clockInEmployeeTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String start = null;
        String timezone = null;
        String note = null;
        Integer projectId = null;
        Integer taskId = null;
        TimeTrackingClockInEmployeeRequestClockInLocation clockInLocation = null;
        api.clockInEmployee(companyDomain, employeeId)
                .start(start)
                .timezone(timezone)
                .note(note)
                .projectId(projectId)
                .taskId(taskId)
                .clockInLocation(clockInLocation)
                .execute();
        // TODO: test validations
    }

    /**
     * Clock out (employee id optional)
     *
     * Clock out (employee id optional)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clockOutEmployeeTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        TimeTrackingClockOutEmployeeRequestClockOutLocation clockOutLocation = null;
        api.clockOutEmployee(companyDomain, employeeId)
                .clockOutLocation(clockOutLocation)
                .execute();
        // TODO: test validations
    }

    /**
     * Clock out an employee at a specific time
     *
     * Clock out an employee at a specific time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clockOutEmployeeAtSpecificTimeTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String datetime = null;
        String timezone = null;
        Integer employeeId = null;
        api.clockOutEmployeeAtSpecificTime(companyDomain, employeeId)
                .datetime(datetime)
                .timezone(timezone)
                .employeeId(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete clock entries
     *
     * Delete clock entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClockEntriesTest() throws ApiException {
        String companyDomain = null;
        List<Integer> clockEntryIds = null;
        api.deleteClockEntries(companyDomain)
                .clockEntryIds(clockEntryIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit information on the currently clocked in entry
     *
     * Edit information on the currently clocked in entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editClockedInEntryDataTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String start = null;
        String timezone = null;
        String note = null;
        Integer projectId = null;
        Integer taskId = null;
        TimeTrackingEditClockedInEntryDataRequestClockInLocation clockInLocation = null;
        TimeTrackingEditClockedInEntryDataRequestClockOutLocation clockOutLocation = null;
        api.editClockedInEntryData(companyDomain, employeeId)
                .start(start)
                .timezone(timezone)
                .note(note)
                .projectId(projectId)
                .taskId(taskId)
                .clockInLocation(clockInLocation)
                .clockOutLocation(clockOutLocation)
                .execute();
        // TODO: test validations
    }

    /**
     * Is employee clocked in?
     *
     * Is employee clocked in?
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeeClockedInTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        api.employeeClockedIn(companyDomain, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a timesheet for an employee
     *
     * Get a timesheet for an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeeTimesheetGetTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String timesheetId = null;
        api.employeeTimesheetGet(companyDomain, employeeId, timesheetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a clock entry
     *
     * Get a clock entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClockEntryTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String id = null;
        api.getClockEntry(companyDomain, employeeId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a daily entry
     *
     * Get a daily entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDailyEntryTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String id = null;
        api.getDailyEntry(companyDomain, employeeId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tasks for a project
     *
     * Get tasks for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTasksTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String projectId = null;
        api.getProjectTasks(companyDomain, employeeId, projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get timesheets by ids
     *
     * Get timesheets by ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetsByIdsTest() throws ApiException {
        String timesheets = null;
        String companyDomain = null;
        api.getTimesheetsByIds(timesheets, companyDomain)
                .execute();
        // TODO: test validations
    }

    /**
     * Get projects an employee can log time to
     *
     * Get projects an employee can log time to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeeProjectsTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        api.listEmployeeProjects(companyDomain, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Store clock entries
     *
     * Store clock entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeClockEntriesTest() throws ApiException {
        String companyDomain = null;
        List<TimeTrackingStoreClockEntriesRequestEntriesInner> entries = null;
        api.storeClockEntries(companyDomain)
                .entries(entries)
                .execute();
        // TODO: test validations
    }

    /**
     * Store daily entries
     *
     * Store daily entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeDailyEntriesTest() throws ApiException {
        String companyDomain = null;
        List<TimeTrackingStoreDailyEntriesRequestEntriesInner> entries = null;
        api.storeDailyEntries(companyDomain)
                .entries(entries)
                .execute();
        // TODO: test validations
    }

}
