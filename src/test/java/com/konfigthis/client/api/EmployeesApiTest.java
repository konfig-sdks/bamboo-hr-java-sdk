/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeesGetDirectory200Response;
import com.konfigthis.client.model.EmployeesGetDirectoryResponse;
import com.konfigthis.client.model.EmployeesGetEmployeeData200Response;
import com.konfigthis.client.model.EmployeesGetEmployeeDataResponse;
import com.konfigthis.client.model.PostNewEmployee;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
@Disabled
public class EmployeesApiTest {

    private static EmployeesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeesApi(apiClient);
    }

    /**
     * Add Employee
     *
     * Add a new employee. New employees must have at least a first name and a last name. The ID of the newly created employee is included in the Location header of the response. Other fields can be included. Please see the [fields](ref:metadata-get-a-list-of-fields) endpoint. New Employees added to a pay schedule synced with Trax Payroll must have the following required fields (listed by API field name): employeeNumber, firstName, lastName, dateOfBirth, ssn, gender, maritalStatus, hireDate, address1, city, state, country, employmentHistoryStatus, exempt, payType, payRate, payPer, location, department, and division.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewEmployeeTest() throws ApiException {
        String companyDomain = null;
        String firstName = null;
        String lastName = null;
        api.createNewEmployee(companyDomain)
                .firstName(firstName)
                .lastName(lastName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Employee Directory
     *
     * Gets employee directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectoryTest() throws ApiException {
        String companyDomain = null;
        EmployeesGetDirectoryResponse response = api.getDirectory(companyDomain)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Employee
     *
     * Get employee data by specifying a set of fields. This is suitable for getting basic employee information, including current values for fields that are part of a historical table, like job title, or compensation information. See the [fields](ref:metadata-get-a-list-of-fields) endpoint for a list of possible fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeDataTest() throws ApiException {
        String companyDomain = null;
        String fields = null;
        String id = null;
        Boolean onlyCurrent = null;
        EmployeesGetEmployeeDataResponse response = api.getEmployeeData(companyDomain, fields, id)
                .onlyCurrent(onlyCurrent)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee
     *
     * Update an employee, based on employee ID. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the API user will need to update the employee with all of the following required fields for the update to be successful (listed by API field name): employeeNumber, firstName, lastName, dateOfBirth, ssn, gender, maritalStatus, hireDate, address1, city, state, country, employmentHistoryStatus, exempt, payType, payRate, payPer, location, department, and division.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        String companyDomain = null;
        String id = null;
        String firstName = null;
        String lastName = null;
        api.updateEmployee(companyDomain, id)
                .firstName(firstName)
                .lastName(lastName)
                .execute();
        // TODO: test validations
    }

}
