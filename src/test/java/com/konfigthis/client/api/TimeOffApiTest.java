/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdjustTimeOffBalance;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Request;
import com.konfigthis.client.model.TimeOffHistory;
import com.konfigthis.client.model.TimeOffPoliciesInner;
import com.konfigthis.client.model.TimeOffRequest;
import com.konfigthis.client.model.TimeOffRequestDatesInner;
import com.konfigthis.client.model.TimeOffRequestNotesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeOffApi
 */
@Disabled
public class TimeOffApiTest {

    private static TimeOffApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeOffApi(apiClient);
    }

    /**
     * Add a Time Off History Item For Time Off Request
     *
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \&quot;Location\&quot; header of the response will contain a URL that identifies the new history item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTimeOffHistoryItemTest() throws ApiException {
        String date = null;
        Integer timeOffRequestId = null;
        String companyDomain = null;
        Integer employeeId = null;
        String note = null;
        api.addTimeOffHistoryItem(date, timeOffRequestId, companyDomain, employeeId)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign Time Off Policies for an Employee
     *
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignEmployeePoliciesTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        api.assignEmployeePolicies(companyDomain, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignEmployeePoliciesV11Test() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        api.assignEmployeePoliciesV11(companyDomain, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Adjust Time Off Balance
     *
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \&quot;Location\&quot; header of the response will contain a URL that identifies the new history item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void balanceAdjustmentPutTest() throws ApiException {
        String date = null;
        Integer timeOffTypeId = null;
        Float amount = null;
        String companyDomain = null;
        Integer employeeId = null;
        String note = null;
        api.balanceAdjustmentPut(date, timeOffTypeId, amount, companyDomain, employeeId)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Change a Request Status
     *
     * This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeRequestStatusTest() throws ApiException {
        String companyDomain = null;
        String requestId = null;
        String status = null;
        String note = null;
        api.changeRequestStatus(companyDomain, requestId)
                .status(status)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Estimate Future Time Off Balances
     *
     * This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void estimateFutureTimeOffBalancesTest() throws ApiException {
        String companyDomain = null;
        OffsetDateTime end = null;
        String employeeId = null;
        api.estimateFutureTimeOffBalances(companyDomain, end, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Time Off Policies
     *
     * This endpoint gets a list of time off policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPoliciesTest() throws ApiException {
        String companyDomain = null;
        api.getPolicies(companyDomain)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Time Off Requests
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffRequestsTest() throws ApiException {
        String companyDomain = null;
        String start = null;
        String end = null;
        Integer id = null;
        String action = null;
        String employeeId = null;
        String type = null;
        String status = null;
        api.getTimeOffRequests(companyDomain, start, end)
                .id(id)
                .action(action)
                .employeeId(employeeId)
                .type(type)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Time Off Types
     *
     * This endpoint gets a list of time off types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffTypesTest() throws ApiException {
        String companyDomain = null;
        String mode = null;
        api.getTimeOffTypes(companyDomain)
                .mode(mode)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of Who&#39;s Out
     *
     * This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWhosOutListTest() throws ApiException {
        String companyDomain = null;
        String start = null;
        String end = null;
        api.getWhosOutList(companyDomain)
                .start(start)
                .end(end)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Off Policies for Employee, Version 1.1
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeePoliciesTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        api.listEmployeePolicies(companyDomain, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Off Policies for Employee
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeeTimeOffPoliciesTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        api.listEmployeeTimeOffPolicies(companyDomain, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a Time Off Request
     *
     * A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestCreationTest() throws ApiException {
        String companyDomain = null;
        String employeeId = null;
        String status = null;
        String start = null;
        String end = null;
        Integer timeOffTypeId = null;
        Integer amount = null;
        List<TimeOffRequestNotesInner> notes = null;
        List<TimeOffRequestDatesInner> dates = null;
        Integer previousRequest = null;
        api.requestCreation(companyDomain, employeeId)
                .status(status)
                .start(start)
                .end(end)
                .timeOffTypeId(timeOffTypeId)
                .amount(amount)
                .notes(notes)
                .dates(dates)
                .previousRequest(previousRequest)
                .execute();
        // TODO: test validations
    }

}
