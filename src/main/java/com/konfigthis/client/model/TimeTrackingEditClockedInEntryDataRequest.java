/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequestClockInLocation;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequestClockOutLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeTrackingEditClockedInEntryDataRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeTrackingEditClockedInEntryDataRequest {
  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private Integer taskId;

  public static final String SERIALIZED_NAME_CLOCK_IN_LOCATION = "clockInLocation";
  @SerializedName(SERIALIZED_NAME_CLOCK_IN_LOCATION)
  private TimeTrackingEditClockedInEntryDataRequestClockInLocation clockInLocation;

  public static final String SERIALIZED_NAME_CLOCK_OUT_LOCATION = "clockOutLocation";
  @SerializedName(SERIALIZED_NAME_CLOCK_OUT_LOCATION)
  private TimeTrackingEditClockedInEntryDataRequestClockOutLocation clockOutLocation;

  public TimeTrackingEditClockedInEntryDataRequest() {
  }

  public TimeTrackingEditClockedInEntryDataRequest start(String start) {
    
    
    
    
    this.start = start;
    return this;
  }

   /**
   * The start time for the clock in. In 24 hour format HH:MM
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "780", value = "The start time for the clock in. In 24 hour format HH:MM")

  public String getStart() {
    return start;
  }


  public void setStart(String start) {
    
    
    
    this.start = start;
  }


  public TimeTrackingEditClockedInEntryDataRequest timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone associated with the clock in.
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/Denver", value = "The timezone associated with the clock in.")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public TimeTrackingEditClockedInEntryDataRequest note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * The note associated with the clock in
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Back from lunch.", value = "The note associated with the clock in")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public TimeTrackingEditClockedInEntryDataRequest projectId(Integer projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * The id of the project associated with the clock in
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "The id of the project associated with the clock in")

  public Integer getProjectId() {
    return projectId;
  }


  public void setProjectId(Integer projectId) {
    
    
    
    this.projectId = projectId;
  }


  public TimeTrackingEditClockedInEntryDataRequest taskId(Integer taskId) {
    
    
    
    
    this.taskId = taskId;
    return this;
  }

   /**
   * The id of the task associated with the clock in
   * @return taskId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The id of the task associated with the clock in")

  public Integer getTaskId() {
    return taskId;
  }


  public void setTaskId(Integer taskId) {
    
    
    
    this.taskId = taskId;
  }


  public TimeTrackingEditClockedInEntryDataRequest clockInLocation(TimeTrackingEditClockedInEntryDataRequestClockInLocation clockInLocation) {
    
    
    
    
    this.clockInLocation = clockInLocation;
    return this;
  }

   /**
   * Get clockInLocation
   * @return clockInLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeTrackingEditClockedInEntryDataRequestClockInLocation getClockInLocation() {
    return clockInLocation;
  }


  public void setClockInLocation(TimeTrackingEditClockedInEntryDataRequestClockInLocation clockInLocation) {
    
    
    
    this.clockInLocation = clockInLocation;
  }


  public TimeTrackingEditClockedInEntryDataRequest clockOutLocation(TimeTrackingEditClockedInEntryDataRequestClockOutLocation clockOutLocation) {
    
    
    
    
    this.clockOutLocation = clockOutLocation;
    return this;
  }

   /**
   * Get clockOutLocation
   * @return clockOutLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeTrackingEditClockedInEntryDataRequestClockOutLocation getClockOutLocation() {
    return clockOutLocation;
  }


  public void setClockOutLocation(TimeTrackingEditClockedInEntryDataRequestClockOutLocation clockOutLocation) {
    
    
    
    this.clockOutLocation = clockOutLocation;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeTrackingEditClockedInEntryDataRequest instance itself
   */
  public TimeTrackingEditClockedInEntryDataRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest = (TimeTrackingEditClockedInEntryDataRequest) o;
    return Objects.equals(this.start, timeTrackingEditClockedInEntryDataRequest.start) &&
        Objects.equals(this.timezone, timeTrackingEditClockedInEntryDataRequest.timezone) &&
        Objects.equals(this.note, timeTrackingEditClockedInEntryDataRequest.note) &&
        Objects.equals(this.projectId, timeTrackingEditClockedInEntryDataRequest.projectId) &&
        Objects.equals(this.taskId, timeTrackingEditClockedInEntryDataRequest.taskId) &&
        Objects.equals(this.clockInLocation, timeTrackingEditClockedInEntryDataRequest.clockInLocation) &&
        Objects.equals(this.clockOutLocation, timeTrackingEditClockedInEntryDataRequest.clockOutLocation)&&
        Objects.equals(this.additionalProperties, timeTrackingEditClockedInEntryDataRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, timezone, note, projectId, taskId, clockInLocation, clockOutLocation, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeTrackingEditClockedInEntryDataRequest {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    clockInLocation: ").append(toIndentedString(clockInLocation)).append("\n");
    sb.append("    clockOutLocation: ").append(toIndentedString(clockOutLocation)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start");
    openapiFields.add("timezone");
    openapiFields.add("note");
    openapiFields.add("projectId");
    openapiFields.add("taskId");
    openapiFields.add("clockInLocation");
    openapiFields.add("clockOutLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeTrackingEditClockedInEntryDataRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeTrackingEditClockedInEntryDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeTrackingEditClockedInEntryDataRequest is not found in the empty JSON string", TimeTrackingEditClockedInEntryDataRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `clockInLocation`
      if (jsonObj.get("clockInLocation") != null && !jsonObj.get("clockInLocation").isJsonNull()) {
        TimeTrackingEditClockedInEntryDataRequestClockInLocation.validateJsonObject(jsonObj.getAsJsonObject("clockInLocation"));
      }
      // validate the optional field `clockOutLocation`
      if (jsonObj.get("clockOutLocation") != null && !jsonObj.get("clockOutLocation").isJsonNull()) {
        TimeTrackingEditClockedInEntryDataRequestClockOutLocation.validateJsonObject(jsonObj.getAsJsonObject("clockOutLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeTrackingEditClockedInEntryDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeTrackingEditClockedInEntryDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeTrackingEditClockedInEntryDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeTrackingEditClockedInEntryDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeTrackingEditClockedInEntryDataRequest>() {
           @Override
           public void write(JsonWriter out, TimeTrackingEditClockedInEntryDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeTrackingEditClockedInEntryDataRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeTrackingEditClockedInEntryDataRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeTrackingEditClockedInEntryDataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeTrackingEditClockedInEntryDataRequest
  * @throws IOException if the JSON string is invalid with respect to TimeTrackingEditClockedInEntryDataRequest
  */
  public static TimeTrackingEditClockedInEntryDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeTrackingEditClockedInEntryDataRequest.class);
  }

 /**
  * Convert an instance of TimeTrackingEditClockedInEntryDataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

