/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeTrackingRecord
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeTrackingRecord {
  public static final String SERIALIZED_NAME_TIME_TRACKING_ID = "timeTrackingId";
  @SerializedName(SERIALIZED_NAME_TIME_TRACKING_ID)
  private String timeTrackingId;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Integer employeeId;

  public static final String SERIALIZED_NAME_DIVISION_ID = "divisionId";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private Integer divisionId;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_JOB_TITLE_ID = "jobTitleId";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE_ID)
  private Integer jobTitleId;

  public static final String SERIALIZED_NAME_PAY_CODE = "payCode";
  @SerializedName(SERIALIZED_NAME_PAY_CODE)
  private String payCode;

  public static final String SERIALIZED_NAME_DATE_HOURS_WORKED = "dateHoursWorked";
  @SerializedName(SERIALIZED_NAME_DATE_HOURS_WORKED)
  private String dateHoursWorked;

  public static final String SERIALIZED_NAME_PAY_RATE = "payRate";
  @SerializedName(SERIALIZED_NAME_PAY_RATE)
  private Float payRate;

  public static final String SERIALIZED_NAME_RATE_TYPE = "rateType";
  @SerializedName(SERIALIZED_NAME_RATE_TYPE)
  private String rateType;

  public static final String SERIALIZED_NAME_HOURS_WORKED = "hoursWorked";
  @SerializedName(SERIALIZED_NAME_HOURS_WORKED)
  private Float hoursWorked;

  public static final String SERIALIZED_NAME_JOB_CODE = "jobCode";
  @SerializedName(SERIALIZED_NAME_JOB_CODE)
  private Integer jobCode;

  public static final String SERIALIZED_NAME_JOB_DATA = "jobData";
  @SerializedName(SERIALIZED_NAME_JOB_DATA)
  private String jobData;

  public TimeTrackingRecord() {
  }

  public TimeTrackingRecord timeTrackingId(String timeTrackingId) {
    
    
    
    
    this.timeTrackingId = timeTrackingId;
    return this;
  }

   /**
   * A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).
   * @return timeTrackingId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).")

  public String getTimeTrackingId() {
    return timeTrackingId;
  }


  public void setTimeTrackingId(String timeTrackingId) {
    
    
    
    this.timeTrackingId = timeTrackingId;
  }


  public TimeTrackingRecord employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * The ID of the employee.
   * @return employeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the employee.")

  public Integer getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Integer employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public TimeTrackingRecord divisionId(Integer divisionId) {
    
    
    
    
    this.divisionId = divisionId;
    return this;
  }

   /**
   * [Optional] The ID of the division for the employee.
   * @return divisionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] The ID of the division for the employee.")

  public Integer getDivisionId() {
    return divisionId;
  }


  public void setDivisionId(Integer divisionId) {
    
    
    
    this.divisionId = divisionId;
  }


  public TimeTrackingRecord departmentId(Integer departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * [Optional] The ID of the department for the employee.
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] The ID of the department for the employee.")

  public Integer getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Integer departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public TimeTrackingRecord jobTitleId(Integer jobTitleId) {
    
    
    
    
    this.jobTitleId = jobTitleId;
    return this;
  }

   /**
   * [Optional] The ID of the job title for the employee.
   * @return jobTitleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] The ID of the job title for the employee.")

  public Integer getJobTitleId() {
    return jobTitleId;
  }


  public void setJobTitleId(Integer jobTitleId) {
    
    
    
    this.jobTitleId = jobTitleId;
  }


  public TimeTrackingRecord payCode(String payCode) {
    
    
    
    
    this.payCode = payCode;
    return this;
  }

   /**
   * [Optional] Only necessary if the payroll provider requires a pay code
   * @return payCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] Only necessary if the payroll provider requires a pay code")

  public String getPayCode() {
    return payCode;
  }


  public void setPayCode(String payCode) {
    
    
    
    this.payCode = payCode;
  }


  public TimeTrackingRecord dateHoursWorked(String dateHoursWorked) {
    
    
    
    
    this.dateHoursWorked = dateHoursWorked;
    return this;
  }

   /**
   * The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.
   * @return dateHoursWorked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.")

  public String getDateHoursWorked() {
    return dateHoursWorked;
  }


  public void setDateHoursWorked(String dateHoursWorked) {
    
    
    
    this.dateHoursWorked = dateHoursWorked;
  }


  public TimeTrackingRecord payRate(Float payRate) {
    
    
    
    
    this.payRate = payRate;
    return this;
  }

   /**
   * [Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.
   * @return payRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.")

  public Float getPayRate() {
    return payRate;
  }


  public void setPayRate(Float payRate) {
    
    
    
    this.payRate = payRate;
  }


  public TimeTrackingRecord rateType(String rateType) {
    
    
    
    
    this.rateType = rateType;
    return this;
  }

   /**
   * The type of hours - regular or overtime. Please use either \&quot;REG\&quot; or \&quot;OT\&quot; here.
   * @return rateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.")

  public String getRateType() {
    return rateType;
  }


  public void setRateType(String rateType) {
    
    
    
    this.rateType = rateType;
  }


  public TimeTrackingRecord hoursWorked(Float hoursWorked) {
    
    
    
    
    this.hoursWorked = hoursWorked;
    return this;
  }

   /**
   * The number of hours worked.
   * @return hoursWorked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of hours worked.")

  public Float getHoursWorked() {
    return hoursWorked;
  }


  public void setHoursWorked(Float hoursWorked) {
    
    
    
    this.hoursWorked = hoursWorked;
  }


  public TimeTrackingRecord jobCode(Integer jobCode) {
    
    
    
    
    this.jobCode = jobCode;
    return this;
  }

   /**
   * [Optional] A job code.
   * @return jobCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] A job code.")

  public Integer getJobCode() {
    return jobCode;
  }


  public void setJobCode(Integer jobCode) {
    
    
    
    this.jobCode = jobCode;
  }


  public TimeTrackingRecord jobData(String jobData) {
    
    
    
    
    this.jobData = jobData;
    return this;
  }

   /**
   * [Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.
   * @return jobData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.")

  public String getJobData() {
    return jobData;
  }


  public void setJobData(String jobData) {
    
    
    
    this.jobData = jobData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeTrackingRecord instance itself
   */
  public TimeTrackingRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeTrackingRecord timeTrackingRecord = (TimeTrackingRecord) o;
    return Objects.equals(this.timeTrackingId, timeTrackingRecord.timeTrackingId) &&
        Objects.equals(this.employeeId, timeTrackingRecord.employeeId) &&
        Objects.equals(this.divisionId, timeTrackingRecord.divisionId) &&
        Objects.equals(this.departmentId, timeTrackingRecord.departmentId) &&
        Objects.equals(this.jobTitleId, timeTrackingRecord.jobTitleId) &&
        Objects.equals(this.payCode, timeTrackingRecord.payCode) &&
        Objects.equals(this.dateHoursWorked, timeTrackingRecord.dateHoursWorked) &&
        Objects.equals(this.payRate, timeTrackingRecord.payRate) &&
        Objects.equals(this.rateType, timeTrackingRecord.rateType) &&
        Objects.equals(this.hoursWorked, timeTrackingRecord.hoursWorked) &&
        Objects.equals(this.jobCode, timeTrackingRecord.jobCode) &&
        Objects.equals(this.jobData, timeTrackingRecord.jobData)&&
        Objects.equals(this.additionalProperties, timeTrackingRecord.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeTrackingId, employeeId, divisionId, departmentId, jobTitleId, payCode, dateHoursWorked, payRate, rateType, hoursWorked, jobCode, jobData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeTrackingRecord {\n");
    sb.append("    timeTrackingId: ").append(toIndentedString(timeTrackingId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    jobTitleId: ").append(toIndentedString(jobTitleId)).append("\n");
    sb.append("    payCode: ").append(toIndentedString(payCode)).append("\n");
    sb.append("    dateHoursWorked: ").append(toIndentedString(dateHoursWorked)).append("\n");
    sb.append("    payRate: ").append(toIndentedString(payRate)).append("\n");
    sb.append("    rateType: ").append(toIndentedString(rateType)).append("\n");
    sb.append("    hoursWorked: ").append(toIndentedString(hoursWorked)).append("\n");
    sb.append("    jobCode: ").append(toIndentedString(jobCode)).append("\n");
    sb.append("    jobData: ").append(toIndentedString(jobData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timeTrackingId");
    openapiFields.add("employeeId");
    openapiFields.add("divisionId");
    openapiFields.add("departmentId");
    openapiFields.add("jobTitleId");
    openapiFields.add("payCode");
    openapiFields.add("dateHoursWorked");
    openapiFields.add("payRate");
    openapiFields.add("rateType");
    openapiFields.add("hoursWorked");
    openapiFields.add("jobCode");
    openapiFields.add("jobData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeTrackingId");
    openapiRequiredFields.add("employeeId");
    openapiRequiredFields.add("dateHoursWorked");
    openapiRequiredFields.add("rateType");
    openapiRequiredFields.add("hoursWorked");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeTrackingRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeTrackingRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeTrackingRecord is not found in the empty JSON string", TimeTrackingRecord.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeTrackingRecord.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("timeTrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeTrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeTrackingId").toString()));
      }
      if ((jsonObj.get("payCode") != null && !jsonObj.get("payCode").isJsonNull()) && !jsonObj.get("payCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payCode").toString()));
      }
      if (!jsonObj.get("dateHoursWorked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateHoursWorked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateHoursWorked").toString()));
      }
      if (!jsonObj.get("rateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateType").toString()));
      }
      if ((jsonObj.get("jobData") != null && !jsonObj.get("jobData").isJsonNull()) && !jsonObj.get("jobData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeTrackingRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeTrackingRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeTrackingRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeTrackingRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeTrackingRecord>() {
           @Override
           public void write(JsonWriter out, TimeTrackingRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeTrackingRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeTrackingRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeTrackingRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeTrackingRecord
  * @throws IOException if the JSON string is invalid with respect to TimeTrackingRecord
  */
  public static TimeTrackingRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeTrackingRecord.class);
  }

 /**
  * Convert an instance of TimeTrackingRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

