/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeWithholding
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeWithholding {
  public static final String SERIALIZED_NAME_FED_WITHHOLDING = "fedWithholding";
  @SerializedName(SERIALIZED_NAME_FED_WITHHOLDING)
  private String fedWithholding;

  public static final String SERIALIZED_NAME_STATE_WITHHOLDING = "stateWithholding";
  @SerializedName(SERIALIZED_NAME_STATE_WITHHOLDING)
  private String stateWithholding;

  public static final String SERIALIZED_NAME_LOCAL_WITHHOLDING = "localWithholding";
  @SerializedName(SERIALIZED_NAME_LOCAL_WITHHOLDING)
  private String localWithholding;

  public static final String SERIALIZED_NAME_ADDITIONAL_FED = "additionalFed";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FED)
  private String additionalFed;

  public static final String SERIALIZED_NAME_ADDITIONAL_STATE = "additionalState";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_STATE)
  private String additionalState;

  public static final String SERIALIZED_NAME_ADDITIONAL_LOCAL = "additionalLocal";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LOCAL)
  private String additionalLocal;

  public static final String SERIALIZED_NAME_TAX_STATE = "taxState";
  @SerializedName(SERIALIZED_NAME_TAX_STATE)
  private String taxState;

  public static final String SERIALIZED_NAME_TAX_LOCAL = "taxLocal";
  @SerializedName(SERIALIZED_NAME_TAX_LOCAL)
  private String taxLocal;

  public EmployeeWithholding() {
  }

  public EmployeeWithholding fedWithholding(String fedWithholding) {
    
    
    
    
    this.fedWithholding = fedWithholding;
    return this;
  }

   /**
   * 
   * @return fedWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFedWithholding() {
    return fedWithholding;
  }


  public void setFedWithholding(String fedWithholding) {
    
    
    
    this.fedWithholding = fedWithholding;
  }


  public EmployeeWithholding stateWithholding(String stateWithholding) {
    
    
    
    
    this.stateWithholding = stateWithholding;
    return this;
  }

   /**
   * 
   * @return stateWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStateWithholding() {
    return stateWithholding;
  }


  public void setStateWithholding(String stateWithholding) {
    
    
    
    this.stateWithholding = stateWithholding;
  }


  public EmployeeWithholding localWithholding(String localWithholding) {
    
    
    
    
    this.localWithholding = localWithholding;
    return this;
  }

   /**
   * 
   * @return localWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocalWithholding() {
    return localWithholding;
  }


  public void setLocalWithholding(String localWithholding) {
    
    
    
    this.localWithholding = localWithholding;
  }


  public EmployeeWithholding additionalFed(String additionalFed) {
    
    
    
    
    this.additionalFed = additionalFed;
    return this;
  }

   /**
   * 
   * @return additionalFed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalFed() {
    return additionalFed;
  }


  public void setAdditionalFed(String additionalFed) {
    
    
    
    this.additionalFed = additionalFed;
  }


  public EmployeeWithholding additionalState(String additionalState) {
    
    
    
    
    this.additionalState = additionalState;
    return this;
  }

   /**
   * 
   * @return additionalState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalState() {
    return additionalState;
  }


  public void setAdditionalState(String additionalState) {
    
    
    
    this.additionalState = additionalState;
  }


  public EmployeeWithholding additionalLocal(String additionalLocal) {
    
    
    
    
    this.additionalLocal = additionalLocal;
    return this;
  }

   /**
   * 
   * @return additionalLocal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalLocal() {
    return additionalLocal;
  }


  public void setAdditionalLocal(String additionalLocal) {
    
    
    
    this.additionalLocal = additionalLocal;
  }


  public EmployeeWithholding taxState(String taxState) {
    
    
    
    
    this.taxState = taxState;
    return this;
  }

   /**
   * 
   * @return taxState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxState() {
    return taxState;
  }


  public void setTaxState(String taxState) {
    
    
    
    this.taxState = taxState;
  }


  public EmployeeWithholding taxLocal(String taxLocal) {
    
    
    
    
    this.taxLocal = taxLocal;
    return this;
  }

   /**
   * 
   * @return taxLocal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxLocal() {
    return taxLocal;
  }


  public void setTaxLocal(String taxLocal) {
    
    
    
    this.taxLocal = taxLocal;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeWithholding instance itself
   */
  public EmployeeWithholding putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeWithholding employeeWithholding = (EmployeeWithholding) o;
    return Objects.equals(this.fedWithholding, employeeWithholding.fedWithholding) &&
        Objects.equals(this.stateWithholding, employeeWithholding.stateWithholding) &&
        Objects.equals(this.localWithholding, employeeWithholding.localWithholding) &&
        Objects.equals(this.additionalFed, employeeWithholding.additionalFed) &&
        Objects.equals(this.additionalState, employeeWithholding.additionalState) &&
        Objects.equals(this.additionalLocal, employeeWithholding.additionalLocal) &&
        Objects.equals(this.taxState, employeeWithholding.taxState) &&
        Objects.equals(this.taxLocal, employeeWithholding.taxLocal)&&
        Objects.equals(this.additionalProperties, employeeWithholding.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fedWithholding, stateWithholding, localWithholding, additionalFed, additionalState, additionalLocal, taxState, taxLocal, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeWithholding {\n");
    sb.append("    fedWithholding: ").append(toIndentedString(fedWithholding)).append("\n");
    sb.append("    stateWithholding: ").append(toIndentedString(stateWithholding)).append("\n");
    sb.append("    localWithholding: ").append(toIndentedString(localWithholding)).append("\n");
    sb.append("    additionalFed: ").append(toIndentedString(additionalFed)).append("\n");
    sb.append("    additionalState: ").append(toIndentedString(additionalState)).append("\n");
    sb.append("    additionalLocal: ").append(toIndentedString(additionalLocal)).append("\n");
    sb.append("    taxState: ").append(toIndentedString(taxState)).append("\n");
    sb.append("    taxLocal: ").append(toIndentedString(taxLocal)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fedWithholding");
    openapiFields.add("stateWithholding");
    openapiFields.add("localWithholding");
    openapiFields.add("additionalFed");
    openapiFields.add("additionalState");
    openapiFields.add("additionalLocal");
    openapiFields.add("taxState");
    openapiFields.add("taxLocal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeWithholding
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeWithholding.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeWithholding is not found in the empty JSON string", EmployeeWithholding.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("fedWithholding") != null && !jsonObj.get("fedWithholding").isJsonNull()) && !jsonObj.get("fedWithholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fedWithholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fedWithholding").toString()));
      }
      if ((jsonObj.get("stateWithholding") != null && !jsonObj.get("stateWithholding").isJsonNull()) && !jsonObj.get("stateWithholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateWithholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateWithholding").toString()));
      }
      if ((jsonObj.get("localWithholding") != null && !jsonObj.get("localWithholding").isJsonNull()) && !jsonObj.get("localWithholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localWithholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localWithholding").toString()));
      }
      if ((jsonObj.get("additionalFed") != null && !jsonObj.get("additionalFed").isJsonNull()) && !jsonObj.get("additionalFed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalFed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalFed").toString()));
      }
      if ((jsonObj.get("additionalState") != null && !jsonObj.get("additionalState").isJsonNull()) && !jsonObj.get("additionalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalState").toString()));
      }
      if ((jsonObj.get("additionalLocal") != null && !jsonObj.get("additionalLocal").isJsonNull()) && !jsonObj.get("additionalLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalLocal").toString()));
      }
      if ((jsonObj.get("taxState") != null && !jsonObj.get("taxState").isJsonNull()) && !jsonObj.get("taxState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxState").toString()));
      }
      if ((jsonObj.get("taxLocal") != null && !jsonObj.get("taxLocal").isJsonNull()) && !jsonObj.get("taxLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxLocal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeWithholding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeWithholding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeWithholding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeWithholding.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeWithholding>() {
           @Override
           public void write(JsonWriter out, EmployeeWithholding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeWithholding read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeWithholding instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeWithholding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeWithholding
  * @throws IOException if the JSON string is invalid with respect to EmployeeWithholding
  */
  public static EmployeeWithholding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeWithholding.class);
  }

 /**
  * Convert an instance of EmployeeWithholding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

