/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeTrackingProjectInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimesheetEntry
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimesheetEntry {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Integer employeeId;

  /**
   * type of the entry.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    HOUR("hour"),
    
    CLOCK("clock");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Double hours;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PROJECT_INFO = "projectInfo";
  @SerializedName(SERIALIZED_NAME_PROJECT_INFO)
  private TimeTrackingProjectInfo projectInfo;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_APPROVED_AT = "approvedAt";
  @SerializedName(SERIALIZED_NAME_APPROVED_AT)
  private String approvedAt;

  public TimesheetEntry() {
  }

  public TimesheetEntry id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * ID of the entry.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the entry.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public TimesheetEntry employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * ID of the employee associated with the entry.
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the employee associated with the entry.")

  public Integer getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Integer employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public TimesheetEntry type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of the entry.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "type of the entry.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public TimesheetEntry start(String start) {
    
    
    
    
    this.start = start;
    return this;
  }

   /**
   * Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.")

  public String getStart() {
    return start;
  }


  public void setStart(String start) {
    
    
    
    this.start = start;
  }


  public TimesheetEntry end(String end) {
    
    
    
    
    this.end = end;
    return this;
  }

   /**
   * Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.
   * @return end
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.")

  public String getEnd() {
    return end;
  }


  public void setEnd(String end) {
    
    
    
    this.end = end;
  }


  public TimesheetEntry timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone the clock entry was recorded in. Property can be null.
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timezone the clock entry was recorded in. Property can be null.")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public TimesheetEntry hours(Double hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

  public TimesheetEntry hours(Integer hours) {
    
    
    
    
    this.hours = hours.doubleValue();
    return this;
  }

   /**
   * The number of hours for the entry. This value has a maximum scale of 4. Property can be null.
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.")

  public Double getHours() {
    return hours;
  }


  public void setHours(Double hours) {
    
    
    
    this.hours = hours;
  }


  public TimesheetEntry note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * The note associated with the entry. Property can be null.
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The note associated with the entry. Property can be null.")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public TimesheetEntry projectInfo(TimeTrackingProjectInfo projectInfo) {
    
    
    
    
    this.projectInfo = projectInfo;
    return this;
  }

   /**
   * Get projectInfo
   * @return projectInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeTrackingProjectInfo getProjectInfo() {
    return projectInfo;
  }


  public void setProjectInfo(TimeTrackingProjectInfo projectInfo) {
    
    
    
    this.projectInfo = projectInfo;
  }


  public TimesheetEntry approved(Boolean approved) {
    
    
    
    
    this.approved = approved;
    return this;
  }

   /**
   * Approval status of the timesheet for the entry.
   * @return approved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Approval status of the timesheet for the entry.")

  public Boolean getApproved() {
    return approved;
  }


  public void setApproved(Boolean approved) {
    
    
    
    this.approved = approved;
  }


  public TimesheetEntry approvedAt(String approvedAt) {
    
    
    
    
    this.approvedAt = approvedAt;
    return this;
  }

   /**
   * Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.
   * @return approvedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.")

  public String getApprovedAt() {
    return approvedAt;
  }


  public void setApprovedAt(String approvedAt) {
    
    
    
    this.approvedAt = approvedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimesheetEntry instance itself
   */
  public TimesheetEntry putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimesheetEntry timesheetEntry = (TimesheetEntry) o;
    return Objects.equals(this.id, timesheetEntry.id) &&
        Objects.equals(this.employeeId, timesheetEntry.employeeId) &&
        Objects.equals(this.type, timesheetEntry.type) &&
        Objects.equals(this.start, timesheetEntry.start) &&
        Objects.equals(this.end, timesheetEntry.end) &&
        Objects.equals(this.timezone, timesheetEntry.timezone) &&
        Objects.equals(this.hours, timesheetEntry.hours) &&
        Objects.equals(this.note, timesheetEntry.note) &&
        Objects.equals(this.projectInfo, timesheetEntry.projectInfo) &&
        Objects.equals(this.approved, timesheetEntry.approved) &&
        Objects.equals(this.approvedAt, timesheetEntry.approvedAt)&&
        Objects.equals(this.additionalProperties, timesheetEntry.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, employeeId, type, start, end, timezone, hours, note, projectInfo, approved, approvedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimesheetEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    projectInfo: ").append(toIndentedString(projectInfo)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("employeeId");
    openapiFields.add("type");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("timezone");
    openapiFields.add("hours");
    openapiFields.add("note");
    openapiFields.add("projectInfo");
    openapiFields.add("approved");
    openapiFields.add("approvedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimesheetEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimesheetEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimesheetEntry is not found in the empty JSON string", TimesheetEntry.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `projectInfo`
      if (jsonObj.get("projectInfo") != null && !jsonObj.get("projectInfo").isJsonNull()) {
        TimeTrackingProjectInfo.validateJsonObject(jsonObj.getAsJsonObject("projectInfo"));
      }
      if ((jsonObj.get("approvedAt") != null && !jsonObj.get("approvedAt").isJsonNull()) && !jsonObj.get("approvedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimesheetEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimesheetEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimesheetEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimesheetEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<TimesheetEntry>() {
           @Override
           public void write(JsonWriter out, TimesheetEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimesheetEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimesheetEntry instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimesheetEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimesheetEntry
  * @throws IOException if the JSON string is invalid with respect to TimesheetEntry
  */
  public static TimesheetEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimesheetEntry.class);
  }

 /**
  * Convert an instance of TimesheetEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

