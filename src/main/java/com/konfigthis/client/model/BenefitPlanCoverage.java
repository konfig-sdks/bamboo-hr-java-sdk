/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BenefitPlanCoverage
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BenefitPlanCoverage {
  public static final String SERIALIZED_NAME_BENEFIT_PLAN_ID = "benefitPlanId";
  @SerializedName(SERIALIZED_NAME_BENEFIT_PLAN_ID)
  private String benefitPlanId;

  public static final String SERIALIZED_NAME_BENEFIT_COVERAGE_ID = "benefitCoverageId";
  @SerializedName(SERIALIZED_NAME_BENEFIT_COVERAGE_ID)
  private String benefitCoverageId;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private String totalCost;

  public static final String SERIALIZED_NAME_CURRENCY_TYPE = "currencyType";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TYPE)
  private String currencyType;

  public static final String SERIALIZED_NAME_START_YMD = "startYmd";
  @SerializedName(SERIALIZED_NAME_START_YMD)
  private String startYmd;

  public static final String SERIALIZED_NAME_END_YMD = "endYmd";
  @SerializedName(SERIALIZED_NAME_END_YMD)
  private String endYmd;

  public BenefitPlanCoverage() {
  }

  public BenefitPlanCoverage benefitPlanId(String benefitPlanId) {
    
    
    
    
    this.benefitPlanId = benefitPlanId;
    return this;
  }

   /**
   * 
   * @return benefitPlanId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBenefitPlanId() {
    return benefitPlanId;
  }


  public void setBenefitPlanId(String benefitPlanId) {
    
    
    
    this.benefitPlanId = benefitPlanId;
  }


  public BenefitPlanCoverage benefitCoverageId(String benefitCoverageId) {
    
    
    
    
    this.benefitCoverageId = benefitCoverageId;
    return this;
  }

   /**
   * 
   * @return benefitCoverageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBenefitCoverageId() {
    return benefitCoverageId;
  }


  public void setBenefitCoverageId(String benefitCoverageId) {
    
    
    
    this.benefitCoverageId = benefitCoverageId;
  }


  public BenefitPlanCoverage totalCost(String totalCost) {
    
    
    
    
    this.totalCost = totalCost;
    return this;
  }

   /**
   * 
   * @return totalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalCost() {
    return totalCost;
  }


  public void setTotalCost(String totalCost) {
    
    
    
    this.totalCost = totalCost;
  }


  public BenefitPlanCoverage currencyType(String currencyType) {
    
    
    
    
    this.currencyType = currencyType;
    return this;
  }

   /**
   * 
   * @return currencyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyType() {
    return currencyType;
  }


  public void setCurrencyType(String currencyType) {
    
    
    
    this.currencyType = currencyType;
  }


  public BenefitPlanCoverage startYmd(String startYmd) {
    
    
    
    
    this.startYmd = startYmd;
    return this;
  }

   /**
   * 
   * @return startYmd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartYmd() {
    return startYmd;
  }


  public void setStartYmd(String startYmd) {
    
    
    
    this.startYmd = startYmd;
  }


  public BenefitPlanCoverage endYmd(String endYmd) {
    
    
    
    
    this.endYmd = endYmd;
    return this;
  }

   /**
   * 
   * @return endYmd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEndYmd() {
    return endYmd;
  }


  public void setEndYmd(String endYmd) {
    
    
    
    this.endYmd = endYmd;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BenefitPlanCoverage instance itself
   */
  public BenefitPlanCoverage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BenefitPlanCoverage benefitPlanCoverage = (BenefitPlanCoverage) o;
    return Objects.equals(this.benefitPlanId, benefitPlanCoverage.benefitPlanId) &&
        Objects.equals(this.benefitCoverageId, benefitPlanCoverage.benefitCoverageId) &&
        Objects.equals(this.totalCost, benefitPlanCoverage.totalCost) &&
        Objects.equals(this.currencyType, benefitPlanCoverage.currencyType) &&
        Objects.equals(this.startYmd, benefitPlanCoverage.startYmd) &&
        Objects.equals(this.endYmd, benefitPlanCoverage.endYmd)&&
        Objects.equals(this.additionalProperties, benefitPlanCoverage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefitPlanId, benefitCoverageId, totalCost, currencyType, startYmd, endYmd, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BenefitPlanCoverage {\n");
    sb.append("    benefitPlanId: ").append(toIndentedString(benefitPlanId)).append("\n");
    sb.append("    benefitCoverageId: ").append(toIndentedString(benefitCoverageId)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    currencyType: ").append(toIndentedString(currencyType)).append("\n");
    sb.append("    startYmd: ").append(toIndentedString(startYmd)).append("\n");
    sb.append("    endYmd: ").append(toIndentedString(endYmd)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefitPlanId");
    openapiFields.add("benefitCoverageId");
    openapiFields.add("totalCost");
    openapiFields.add("currencyType");
    openapiFields.add("startYmd");
    openapiFields.add("endYmd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BenefitPlanCoverage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BenefitPlanCoverage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BenefitPlanCoverage is not found in the empty JSON string", BenefitPlanCoverage.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("benefitPlanId") != null && !jsonObj.get("benefitPlanId").isJsonNull()) && !jsonObj.get("benefitPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitPlanId").toString()));
      }
      if ((jsonObj.get("benefitCoverageId") != null && !jsonObj.get("benefitCoverageId").isJsonNull()) && !jsonObj.get("benefitCoverageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitCoverageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitCoverageId").toString()));
      }
      if ((jsonObj.get("totalCost") != null && !jsonObj.get("totalCost").isJsonNull()) && !jsonObj.get("totalCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCost").toString()));
      }
      if ((jsonObj.get("currencyType") != null && !jsonObj.get("currencyType").isJsonNull()) && !jsonObj.get("currencyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyType").toString()));
      }
      if ((jsonObj.get("startYmd") != null && !jsonObj.get("startYmd").isJsonNull()) && !jsonObj.get("startYmd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startYmd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startYmd").toString()));
      }
      if ((jsonObj.get("endYmd") != null && !jsonObj.get("endYmd").isJsonNull()) && !jsonObj.get("endYmd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endYmd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endYmd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BenefitPlanCoverage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BenefitPlanCoverage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BenefitPlanCoverage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BenefitPlanCoverage.class));

       return (TypeAdapter<T>) new TypeAdapter<BenefitPlanCoverage>() {
           @Override
           public void write(JsonWriter out, BenefitPlanCoverage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BenefitPlanCoverage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BenefitPlanCoverage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BenefitPlanCoverage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BenefitPlanCoverage
  * @throws IOException if the JSON string is invalid with respect to BenefitPlanCoverage
  */
  public static BenefitPlanCoverage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BenefitPlanCoverage.class);
  }

 /**
  * Convert an instance of BenefitPlanCoverage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

