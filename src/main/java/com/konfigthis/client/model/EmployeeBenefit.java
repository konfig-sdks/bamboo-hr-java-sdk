/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeBenefit
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeBenefit {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Integer employeeId;

  public static final String SERIALIZED_NAME_COMPANY_BENEFIT_ID = "companyBenefitId";
  @SerializedName(SERIALIZED_NAME_COMPANY_BENEFIT_ID)
  private Integer companyBenefitId;

  public static final String SERIALIZED_NAME_COMPANY_BENEFIT_NAME = "companyBenefitName";
  @SerializedName(SERIALIZED_NAME_COMPANY_BENEFIT_NAME)
  private String companyBenefitName;

  public static final String SERIALIZED_NAME_COVERAGE_LEVEL = "coverageLevel";
  @SerializedName(SERIALIZED_NAME_COVERAGE_LEVEL)
  private String coverageLevel;

  public static final String SERIALIZED_NAME_DEDUCTION_END_DATE = "deductionEndDate";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_END_DATE)
  private LocalDate deductionEndDate;

  public static final String SERIALIZED_NAME_DEDUCTION_START_DATE = "deductionStartDate";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_START_DATE)
  private LocalDate deductionStartDate;

  /**
   * Enrollment status
   */
  @JsonAdapter(EnrollmentStatusEnum.Adapter.class)
 public enum EnrollmentStatusEnum {
    ELIGIBLE("Eligible"),
    
    ENROLLED("Enrolled"),
    
    WAIVED("Waived"),
    
    WITHDRAWN("Withdrawn"),
    
    TERMINATED("Terminated"),
    
    INELIGIBLE("Ineligible");

    private String value;

    EnrollmentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnrollmentStatusEnum fromValue(String value) {
      for (EnrollmentStatusEnum b : EnrollmentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnrollmentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnrollmentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnrollmentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnrollmentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENROLLMENT_STATUS = "enrollmentStatus";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_STATUS)
  private EnrollmentStatusEnum enrollmentStatus;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_EMPLOYEE_AMOUNT = "employeeAmount";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_AMOUNT)
  private Double employeeAmount;

  public static final String SERIALIZED_NAME_EMPLOYEE_AMOUNT_TYPE = "employeeAmountType";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_AMOUNT_TYPE)
  private String employeeAmountType;

  public static final String SERIALIZED_NAME_EMPLOYEE_PERCENT_BASED_ON = "employeePercentBasedOn";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_PERCENT_BASED_ON)
  private String employeePercentBasedOn;

  public static final String SERIALIZED_NAME_EMPLOYEE_CAP_AMOUNT = "employeeCapAmount";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_CAP_AMOUNT)
  private Double employeeCapAmount;

  public static final String SERIALIZED_NAME_EMPLOYEE_CAP_AMOUNT_TYPE = "employeeCapAmountType";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_CAP_AMOUNT_TYPE)
  private String employeeCapAmountType;

  public static final String SERIALIZED_NAME_EMPLOYEE_ANNUAL_MAX = "employeeAnnualMax";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ANNUAL_MAX)
  private Double employeeAnnualMax;

  public static final String SERIALIZED_NAME_COMPANY_AMOUNT = "companyAmount";
  @SerializedName(SERIALIZED_NAME_COMPANY_AMOUNT)
  private Double companyAmount;

  public static final String SERIALIZED_NAME_COMPANY_AMOUNT_TYPE = "companyAmountType";
  @SerializedName(SERIALIZED_NAME_COMPANY_AMOUNT_TYPE)
  private String companyAmountType;

  public static final String SERIALIZED_NAME_COMPANY_PERCENT_BASED_ON = "companyPercentBasedOn";
  @SerializedName(SERIALIZED_NAME_COMPANY_PERCENT_BASED_ON)
  private String companyPercentBasedOn;

  public static final String SERIALIZED_NAME_COMPANY_CAP_AMOUNT = "companyCapAmount";
  @SerializedName(SERIALIZED_NAME_COMPANY_CAP_AMOUNT)
  private Double companyCapAmount;

  public static final String SERIALIZED_NAME_COMPANY_CAP_AMOUNT_TYPE = "companyCapAmountType";
  @SerializedName(SERIALIZED_NAME_COMPANY_CAP_AMOUNT_TYPE)
  private String companyCapAmountType;

  public static final String SERIALIZED_NAME_COMPANY_ANNUAL_MAX = "companyAnnualMax";
  @SerializedName(SERIALIZED_NAME_COMPANY_ANNUAL_MAX)
  private Double companyAnnualMax;

  public static final String SERIALIZED_NAME_BENEFIT_PLAN_COVERAGE_ID = "benefitPlanCoverageId";
  @SerializedName(SERIALIZED_NAME_BENEFIT_PLAN_COVERAGE_ID)
  private Double benefitPlanCoverageId;

  public EmployeeBenefit() {
  }

  public EmployeeBenefit employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Employee ID
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee ID")

  public Integer getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Integer employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public EmployeeBenefit companyBenefitId(Integer companyBenefitId) {
    
    
    
    
    this.companyBenefitId = companyBenefitId;
    return this;
  }

   /**
   * Company benefit ID
   * @return companyBenefitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company benefit ID")

  public Integer getCompanyBenefitId() {
    return companyBenefitId;
  }


  public void setCompanyBenefitId(Integer companyBenefitId) {
    
    
    
    this.companyBenefitId = companyBenefitId;
  }


  public EmployeeBenefit companyBenefitName(String companyBenefitName) {
    
    
    
    
    this.companyBenefitName = companyBenefitName;
    return this;
  }

   /**
   * Company benefit name
   * @return companyBenefitName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company benefit name")

  public String getCompanyBenefitName() {
    return companyBenefitName;
  }


  public void setCompanyBenefitName(String companyBenefitName) {
    
    
    
    this.companyBenefitName = companyBenefitName;
  }


  public EmployeeBenefit coverageLevel(String coverageLevel) {
    
    
    
    
    this.coverageLevel = coverageLevel;
    return this;
  }

   /**
   * Coverage level
   * @return coverageLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coverage level")

  public String getCoverageLevel() {
    return coverageLevel;
  }


  public void setCoverageLevel(String coverageLevel) {
    
    
    
    this.coverageLevel = coverageLevel;
  }


  public EmployeeBenefit deductionEndDate(LocalDate deductionEndDate) {
    
    
    
    
    this.deductionEndDate = deductionEndDate;
    return this;
  }

   /**
   * Deduction end date
   * @return deductionEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deduction end date")

  public LocalDate getDeductionEndDate() {
    return deductionEndDate;
  }


  public void setDeductionEndDate(LocalDate deductionEndDate) {
    
    
    
    this.deductionEndDate = deductionEndDate;
  }


  public EmployeeBenefit deductionStartDate(LocalDate deductionStartDate) {
    
    
    
    
    this.deductionStartDate = deductionStartDate;
    return this;
  }

   /**
   * Deduction start date
   * @return deductionStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deduction start date")

  public LocalDate getDeductionStartDate() {
    return deductionStartDate;
  }


  public void setDeductionStartDate(LocalDate deductionStartDate) {
    
    
    
    this.deductionStartDate = deductionStartDate;
  }


  public EmployeeBenefit enrollmentStatus(EnrollmentStatusEnum enrollmentStatus) {
    
    
    
    
    this.enrollmentStatus = enrollmentStatus;
    return this;
  }

   /**
   * Enrollment status
   * @return enrollmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enrollment status")

  public EnrollmentStatusEnum getEnrollmentStatus() {
    return enrollmentStatus;
  }


  public void setEnrollmentStatus(EnrollmentStatusEnum enrollmentStatus) {
    
    
    
    this.enrollmentStatus = enrollmentStatus;
  }


  public EmployeeBenefit effectiveDate(LocalDate effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Enrollment status effective date
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enrollment status effective date")

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(LocalDate effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public EmployeeBenefit currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Currency code
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency code")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public EmployeeBenefit employeeAmount(Double employeeAmount) {
    
    
    
    
    this.employeeAmount = employeeAmount;
    return this;
  }

  public EmployeeBenefit employeeAmount(Integer employeeAmount) {
    
    
    
    
    this.employeeAmount = employeeAmount.doubleValue();
    return this;
  }

   /**
   * Employee amount
   * @return employeeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee amount")

  public Double getEmployeeAmount() {
    return employeeAmount;
  }


  public void setEmployeeAmount(Double employeeAmount) {
    
    
    
    this.employeeAmount = employeeAmount;
  }


  public EmployeeBenefit employeeAmountType(String employeeAmountType) {
    
    
    
    
    this.employeeAmountType = employeeAmountType;
    return this;
  }

   /**
   * Employee amount type
   * @return employeeAmountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee amount type")

  public String getEmployeeAmountType() {
    return employeeAmountType;
  }


  public void setEmployeeAmountType(String employeeAmountType) {
    
    
    
    this.employeeAmountType = employeeAmountType;
  }


  public EmployeeBenefit employeePercentBasedOn(String employeePercentBasedOn) {
    
    
    
    
    this.employeePercentBasedOn = employeePercentBasedOn;
    return this;
  }

   /**
   * Employee percent based on
   * @return employeePercentBasedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee percent based on")

  public String getEmployeePercentBasedOn() {
    return employeePercentBasedOn;
  }


  public void setEmployeePercentBasedOn(String employeePercentBasedOn) {
    
    
    
    this.employeePercentBasedOn = employeePercentBasedOn;
  }


  public EmployeeBenefit employeeCapAmount(Double employeeCapAmount) {
    
    
    
    
    this.employeeCapAmount = employeeCapAmount;
    return this;
  }

  public EmployeeBenefit employeeCapAmount(Integer employeeCapAmount) {
    
    
    
    
    this.employeeCapAmount = employeeCapAmount.doubleValue();
    return this;
  }

   /**
   * Employee cap amount
   * @return employeeCapAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee cap amount")

  public Double getEmployeeCapAmount() {
    return employeeCapAmount;
  }


  public void setEmployeeCapAmount(Double employeeCapAmount) {
    
    
    
    this.employeeCapAmount = employeeCapAmount;
  }


  public EmployeeBenefit employeeCapAmountType(String employeeCapAmountType) {
    
    
    
    
    this.employeeCapAmountType = employeeCapAmountType;
    return this;
  }

   /**
   * Employee cap amount type
   * @return employeeCapAmountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee cap amount type")

  public String getEmployeeCapAmountType() {
    return employeeCapAmountType;
  }


  public void setEmployeeCapAmountType(String employeeCapAmountType) {
    
    
    
    this.employeeCapAmountType = employeeCapAmountType;
  }


  public EmployeeBenefit employeeAnnualMax(Double employeeAnnualMax) {
    
    
    
    
    this.employeeAnnualMax = employeeAnnualMax;
    return this;
  }

  public EmployeeBenefit employeeAnnualMax(Integer employeeAnnualMax) {
    
    
    
    
    this.employeeAnnualMax = employeeAnnualMax.doubleValue();
    return this;
  }

   /**
   * Employee annual max
   * @return employeeAnnualMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee annual max")

  public Double getEmployeeAnnualMax() {
    return employeeAnnualMax;
  }


  public void setEmployeeAnnualMax(Double employeeAnnualMax) {
    
    
    
    this.employeeAnnualMax = employeeAnnualMax;
  }


  public EmployeeBenefit companyAmount(Double companyAmount) {
    
    
    
    
    this.companyAmount = companyAmount;
    return this;
  }

  public EmployeeBenefit companyAmount(Integer companyAmount) {
    
    
    
    
    this.companyAmount = companyAmount.doubleValue();
    return this;
  }

   /**
   * Company amount
   * @return companyAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company amount")

  public Double getCompanyAmount() {
    return companyAmount;
  }


  public void setCompanyAmount(Double companyAmount) {
    
    
    
    this.companyAmount = companyAmount;
  }


  public EmployeeBenefit companyAmountType(String companyAmountType) {
    
    
    
    
    this.companyAmountType = companyAmountType;
    return this;
  }

   /**
   * Company amount type
   * @return companyAmountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company amount type")

  public String getCompanyAmountType() {
    return companyAmountType;
  }


  public void setCompanyAmountType(String companyAmountType) {
    
    
    
    this.companyAmountType = companyAmountType;
  }


  public EmployeeBenefit companyPercentBasedOn(String companyPercentBasedOn) {
    
    
    
    
    this.companyPercentBasedOn = companyPercentBasedOn;
    return this;
  }

   /**
   * Company percent based on
   * @return companyPercentBasedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company percent based on")

  public String getCompanyPercentBasedOn() {
    return companyPercentBasedOn;
  }


  public void setCompanyPercentBasedOn(String companyPercentBasedOn) {
    
    
    
    this.companyPercentBasedOn = companyPercentBasedOn;
  }


  public EmployeeBenefit companyCapAmount(Double companyCapAmount) {
    
    
    
    
    this.companyCapAmount = companyCapAmount;
    return this;
  }

  public EmployeeBenefit companyCapAmount(Integer companyCapAmount) {
    
    
    
    
    this.companyCapAmount = companyCapAmount.doubleValue();
    return this;
  }

   /**
   * Company cap amount
   * @return companyCapAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company cap amount")

  public Double getCompanyCapAmount() {
    return companyCapAmount;
  }


  public void setCompanyCapAmount(Double companyCapAmount) {
    
    
    
    this.companyCapAmount = companyCapAmount;
  }


  public EmployeeBenefit companyCapAmountType(String companyCapAmountType) {
    
    
    
    
    this.companyCapAmountType = companyCapAmountType;
    return this;
  }

   /**
   * Company cap amount type
   * @return companyCapAmountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company cap amount type")

  public String getCompanyCapAmountType() {
    return companyCapAmountType;
  }


  public void setCompanyCapAmountType(String companyCapAmountType) {
    
    
    
    this.companyCapAmountType = companyCapAmountType;
  }


  public EmployeeBenefit companyAnnualMax(Double companyAnnualMax) {
    
    
    
    
    this.companyAnnualMax = companyAnnualMax;
    return this;
  }

  public EmployeeBenefit companyAnnualMax(Integer companyAnnualMax) {
    
    
    
    
    this.companyAnnualMax = companyAnnualMax.doubleValue();
    return this;
  }

   /**
   * Company annual max
   * @return companyAnnualMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company annual max")

  public Double getCompanyAnnualMax() {
    return companyAnnualMax;
  }


  public void setCompanyAnnualMax(Double companyAnnualMax) {
    
    
    
    this.companyAnnualMax = companyAnnualMax;
  }


  public EmployeeBenefit benefitPlanCoverageId(Double benefitPlanCoverageId) {
    
    
    
    
    this.benefitPlanCoverageId = benefitPlanCoverageId;
    return this;
  }

  public EmployeeBenefit benefitPlanCoverageId(Integer benefitPlanCoverageId) {
    
    
    
    
    this.benefitPlanCoverageId = benefitPlanCoverageId.doubleValue();
    return this;
  }

   /**
   * Benefit Plan Coverage ID
   * @return benefitPlanCoverageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Benefit Plan Coverage ID")

  public Double getBenefitPlanCoverageId() {
    return benefitPlanCoverageId;
  }


  public void setBenefitPlanCoverageId(Double benefitPlanCoverageId) {
    
    
    
    this.benefitPlanCoverageId = benefitPlanCoverageId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeBenefit instance itself
   */
  public EmployeeBenefit putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeBenefit employeeBenefit = (EmployeeBenefit) o;
    return Objects.equals(this.employeeId, employeeBenefit.employeeId) &&
        Objects.equals(this.companyBenefitId, employeeBenefit.companyBenefitId) &&
        Objects.equals(this.companyBenefitName, employeeBenefit.companyBenefitName) &&
        Objects.equals(this.coverageLevel, employeeBenefit.coverageLevel) &&
        Objects.equals(this.deductionEndDate, employeeBenefit.deductionEndDate) &&
        Objects.equals(this.deductionStartDate, employeeBenefit.deductionStartDate) &&
        Objects.equals(this.enrollmentStatus, employeeBenefit.enrollmentStatus) &&
        Objects.equals(this.effectiveDate, employeeBenefit.effectiveDate) &&
        Objects.equals(this.currencyCode, employeeBenefit.currencyCode) &&
        Objects.equals(this.employeeAmount, employeeBenefit.employeeAmount) &&
        Objects.equals(this.employeeAmountType, employeeBenefit.employeeAmountType) &&
        Objects.equals(this.employeePercentBasedOn, employeeBenefit.employeePercentBasedOn) &&
        Objects.equals(this.employeeCapAmount, employeeBenefit.employeeCapAmount) &&
        Objects.equals(this.employeeCapAmountType, employeeBenefit.employeeCapAmountType) &&
        Objects.equals(this.employeeAnnualMax, employeeBenefit.employeeAnnualMax) &&
        Objects.equals(this.companyAmount, employeeBenefit.companyAmount) &&
        Objects.equals(this.companyAmountType, employeeBenefit.companyAmountType) &&
        Objects.equals(this.companyPercentBasedOn, employeeBenefit.companyPercentBasedOn) &&
        Objects.equals(this.companyCapAmount, employeeBenefit.companyCapAmount) &&
        Objects.equals(this.companyCapAmountType, employeeBenefit.companyCapAmountType) &&
        Objects.equals(this.companyAnnualMax, employeeBenefit.companyAnnualMax) &&
        Objects.equals(this.benefitPlanCoverageId, employeeBenefit.benefitPlanCoverageId)&&
        Objects.equals(this.additionalProperties, employeeBenefit.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, companyBenefitId, companyBenefitName, coverageLevel, deductionEndDate, deductionStartDate, enrollmentStatus, effectiveDate, currencyCode, employeeAmount, employeeAmountType, employeePercentBasedOn, employeeCapAmount, employeeCapAmountType, employeeAnnualMax, companyAmount, companyAmountType, companyPercentBasedOn, companyCapAmount, companyCapAmountType, companyAnnualMax, benefitPlanCoverageId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeBenefit {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    companyBenefitId: ").append(toIndentedString(companyBenefitId)).append("\n");
    sb.append("    companyBenefitName: ").append(toIndentedString(companyBenefitName)).append("\n");
    sb.append("    coverageLevel: ").append(toIndentedString(coverageLevel)).append("\n");
    sb.append("    deductionEndDate: ").append(toIndentedString(deductionEndDate)).append("\n");
    sb.append("    deductionStartDate: ").append(toIndentedString(deductionStartDate)).append("\n");
    sb.append("    enrollmentStatus: ").append(toIndentedString(enrollmentStatus)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    employeeAmount: ").append(toIndentedString(employeeAmount)).append("\n");
    sb.append("    employeeAmountType: ").append(toIndentedString(employeeAmountType)).append("\n");
    sb.append("    employeePercentBasedOn: ").append(toIndentedString(employeePercentBasedOn)).append("\n");
    sb.append("    employeeCapAmount: ").append(toIndentedString(employeeCapAmount)).append("\n");
    sb.append("    employeeCapAmountType: ").append(toIndentedString(employeeCapAmountType)).append("\n");
    sb.append("    employeeAnnualMax: ").append(toIndentedString(employeeAnnualMax)).append("\n");
    sb.append("    companyAmount: ").append(toIndentedString(companyAmount)).append("\n");
    sb.append("    companyAmountType: ").append(toIndentedString(companyAmountType)).append("\n");
    sb.append("    companyPercentBasedOn: ").append(toIndentedString(companyPercentBasedOn)).append("\n");
    sb.append("    companyCapAmount: ").append(toIndentedString(companyCapAmount)).append("\n");
    sb.append("    companyCapAmountType: ").append(toIndentedString(companyCapAmountType)).append("\n");
    sb.append("    companyAnnualMax: ").append(toIndentedString(companyAnnualMax)).append("\n");
    sb.append("    benefitPlanCoverageId: ").append(toIndentedString(benefitPlanCoverageId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("companyBenefitId");
    openapiFields.add("companyBenefitName");
    openapiFields.add("coverageLevel");
    openapiFields.add("deductionEndDate");
    openapiFields.add("deductionStartDate");
    openapiFields.add("enrollmentStatus");
    openapiFields.add("effectiveDate");
    openapiFields.add("currencyCode");
    openapiFields.add("employeeAmount");
    openapiFields.add("employeeAmountType");
    openapiFields.add("employeePercentBasedOn");
    openapiFields.add("employeeCapAmount");
    openapiFields.add("employeeCapAmountType");
    openapiFields.add("employeeAnnualMax");
    openapiFields.add("companyAmount");
    openapiFields.add("companyAmountType");
    openapiFields.add("companyPercentBasedOn");
    openapiFields.add("companyCapAmount");
    openapiFields.add("companyCapAmountType");
    openapiFields.add("companyAnnualMax");
    openapiFields.add("benefitPlanCoverageId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeBenefit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeBenefit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeBenefit is not found in the empty JSON string", EmployeeBenefit.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("companyBenefitName") != null && !jsonObj.get("companyBenefitName").isJsonNull()) && !jsonObj.get("companyBenefitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyBenefitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyBenefitName").toString()));
      }
      if ((jsonObj.get("coverageLevel") != null && !jsonObj.get("coverageLevel").isJsonNull()) && !jsonObj.get("coverageLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverageLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverageLevel").toString()));
      }
      if ((jsonObj.get("enrollmentStatus") != null && !jsonObj.get("enrollmentStatus").isJsonNull()) && !jsonObj.get("enrollmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentStatus").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("employeeAmountType") != null && !jsonObj.get("employeeAmountType").isJsonNull()) && !jsonObj.get("employeeAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeAmountType").toString()));
      }
      if ((jsonObj.get("employeePercentBasedOn") != null && !jsonObj.get("employeePercentBasedOn").isJsonNull()) && !jsonObj.get("employeePercentBasedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeePercentBasedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeePercentBasedOn").toString()));
      }
      if ((jsonObj.get("employeeCapAmountType") != null && !jsonObj.get("employeeCapAmountType").isJsonNull()) && !jsonObj.get("employeeCapAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeCapAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeCapAmountType").toString()));
      }
      if ((jsonObj.get("companyAmountType") != null && !jsonObj.get("companyAmountType").isJsonNull()) && !jsonObj.get("companyAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyAmountType").toString()));
      }
      if ((jsonObj.get("companyPercentBasedOn") != null && !jsonObj.get("companyPercentBasedOn").isJsonNull()) && !jsonObj.get("companyPercentBasedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyPercentBasedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyPercentBasedOn").toString()));
      }
      if ((jsonObj.get("companyCapAmountType") != null && !jsonObj.get("companyCapAmountType").isJsonNull()) && !jsonObj.get("companyCapAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyCapAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyCapAmountType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeBenefit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeBenefit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeBenefit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeBenefit.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeBenefit>() {
           @Override
           public void write(JsonWriter out, EmployeeBenefit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeBenefit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeBenefit instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeBenefit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeBenefit
  * @throws IOException if the JSON string is invalid with respect to EmployeeBenefit
  */
  public static EmployeeBenefit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeBenefit.class);
  }

 /**
  * Convert an instance of EmployeeBenefit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

