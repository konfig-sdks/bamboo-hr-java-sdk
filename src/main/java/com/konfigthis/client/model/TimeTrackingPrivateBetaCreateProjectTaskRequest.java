/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeTrackingPrivateBetaCreateProjectTaskRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeTrackingPrivateBetaCreateProjectTaskRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BILLABLE = "billable";
  @SerializedName(SERIALIZED_NAME_BILLABLE)
  private Boolean billable;

  public static final String SERIALIZED_NAME_ALLOW_ALL_EMPLOYEES = "allowAllEmployees";
  @SerializedName(SERIALIZED_NAME_ALLOW_ALL_EMPLOYEES)
  private Boolean allowAllEmployees;

  public static final String SERIALIZED_NAME_EMPLOYEE_IDS = "employeeIds";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDS)
  private List<Integer> employeeIds = null;

  public static final String SERIALIZED_NAME_HAS_TASKS = "hasTasks";
  @SerializedName(SERIALIZED_NAME_HAS_TASKS)
  private Boolean hasTasks;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner> tasks = null;

  public TimeTrackingPrivateBetaCreateProjectTaskRequest() {
  }

  public TimeTrackingPrivateBetaCreateProjectTaskRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the project.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Project A", required = true, value = "Name of the project.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TimeTrackingPrivateBetaCreateProjectTaskRequest billable(Boolean billable) {
    
    
    
    
    this.billable = billable;
    return this;
  }

   /**
   * Indicates if the project is billable. Defaults to true if not provided.
   * @return billable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the project is billable. Defaults to true if not provided.")

  public Boolean getBillable() {
    return billable;
  }


  public void setBillable(Boolean billable) {
    
    
    
    this.billable = billable;
  }


  public TimeTrackingPrivateBetaCreateProjectTaskRequest allowAllEmployees(Boolean allowAllEmployees) {
    
    
    
    
    this.allowAllEmployees = allowAllEmployees;
    return this;
  }

   /**
   * Indicates if all employees can log time for this project. Defaults to true if not provided.
   * @return allowAllEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if all employees can log time for this project. Defaults to true if not provided.")

  public Boolean getAllowAllEmployees() {
    return allowAllEmployees;
  }


  public void setAllowAllEmployees(Boolean allowAllEmployees) {
    
    
    
    this.allowAllEmployees = allowAllEmployees;
  }


  public TimeTrackingPrivateBetaCreateProjectTaskRequest employeeIds(List<Integer> employeeIds) {
    
    
    
    
    this.employeeIds = employeeIds;
    return this;
  }

  public TimeTrackingPrivateBetaCreateProjectTaskRequest addEmployeeIdsItem(Integer employeeIdsItem) {
    if (this.employeeIds == null) {
      this.employeeIds = new ArrayList<>();
    }
    this.employeeIds.add(employeeIdsItem);
    return this;
  }

   /**
   * A list of employee IDs that can log time for this project.
   * @return employeeIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of employee IDs that can log time for this project.")

  public List<Integer> getEmployeeIds() {
    return employeeIds;
  }


  public void setEmployeeIds(List<Integer> employeeIds) {
    
    
    
    this.employeeIds = employeeIds;
  }


  public TimeTrackingPrivateBetaCreateProjectTaskRequest hasTasks(Boolean hasTasks) {
    
    
    
    
    this.hasTasks = hasTasks;
    return this;
  }

   /**
   * Indicates if the project has tasks. Defaults to false if not provided.
   * @return hasTasks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the project has tasks. Defaults to false if not provided.")

  public Boolean getHasTasks() {
    return hasTasks;
  }


  public void setHasTasks(Boolean hasTasks) {
    
    
    
    this.hasTasks = hasTasks;
  }


  public TimeTrackingPrivateBetaCreateProjectTaskRequest tasks(List<TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner> tasks) {
    
    
    
    
    this.tasks = tasks;
    return this;
  }

  public TimeTrackingPrivateBetaCreateProjectTaskRequest addTasksItem(TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * List of tasks to create and associate with the project.
   * @return tasks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tasks to create and associate with the project.")

  public List<TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner> getTasks() {
    return tasks;
  }


  public void setTasks(List<TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner> tasks) {
    
    
    
    this.tasks = tasks;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeTrackingPrivateBetaCreateProjectTaskRequest instance itself
   */
  public TimeTrackingPrivateBetaCreateProjectTaskRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest = (TimeTrackingPrivateBetaCreateProjectTaskRequest) o;
    return Objects.equals(this.name, timeTrackingPrivateBetaCreateProjectTaskRequest.name) &&
        Objects.equals(this.billable, timeTrackingPrivateBetaCreateProjectTaskRequest.billable) &&
        Objects.equals(this.allowAllEmployees, timeTrackingPrivateBetaCreateProjectTaskRequest.allowAllEmployees) &&
        Objects.equals(this.employeeIds, timeTrackingPrivateBetaCreateProjectTaskRequest.employeeIds) &&
        Objects.equals(this.hasTasks, timeTrackingPrivateBetaCreateProjectTaskRequest.hasTasks) &&
        Objects.equals(this.tasks, timeTrackingPrivateBetaCreateProjectTaskRequest.tasks)&&
        Objects.equals(this.additionalProperties, timeTrackingPrivateBetaCreateProjectTaskRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, billable, allowAllEmployees, employeeIds, hasTasks, tasks, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeTrackingPrivateBetaCreateProjectTaskRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    billable: ").append(toIndentedString(billable)).append("\n");
    sb.append("    allowAllEmployees: ").append(toIndentedString(allowAllEmployees)).append("\n");
    sb.append("    employeeIds: ").append(toIndentedString(employeeIds)).append("\n");
    sb.append("    hasTasks: ").append(toIndentedString(hasTasks)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("billable");
    openapiFields.add("allowAllEmployees");
    openapiFields.add("employeeIds");
    openapiFields.add("hasTasks");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeTrackingPrivateBetaCreateProjectTaskRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeTrackingPrivateBetaCreateProjectTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeTrackingPrivateBetaCreateProjectTaskRequest is not found in the empty JSON string", TimeTrackingPrivateBetaCreateProjectTaskRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeTrackingPrivateBetaCreateProjectTaskRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("employeeIds") != null && !jsonObj.get("employeeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeIds` to be an array in the JSON string but got `%s`", jsonObj.get("employeeIds").toString()));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner.validateJsonObject(jsonArraytasks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeTrackingPrivateBetaCreateProjectTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeTrackingPrivateBetaCreateProjectTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeTrackingPrivateBetaCreateProjectTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeTrackingPrivateBetaCreateProjectTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeTrackingPrivateBetaCreateProjectTaskRequest>() {
           @Override
           public void write(JsonWriter out, TimeTrackingPrivateBetaCreateProjectTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeTrackingPrivateBetaCreateProjectTaskRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeTrackingPrivateBetaCreateProjectTaskRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeTrackingPrivateBetaCreateProjectTaskRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeTrackingPrivateBetaCreateProjectTaskRequest
  * @throws IOException if the JSON string is invalid with respect to TimeTrackingPrivateBetaCreateProjectTaskRequest
  */
  public static TimeTrackingPrivateBetaCreateProjectTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeTrackingPrivateBetaCreateProjectTaskRequest.class);
  }

 /**
  * Convert an instance of TimeTrackingPrivateBetaCreateProjectTaskRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

