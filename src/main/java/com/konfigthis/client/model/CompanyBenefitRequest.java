/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompanyBenefitRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompanyBenefitRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_COMPANY_BENEFIT_NAME = "companyBenefitName";
  @SerializedName(SERIALIZED_NAME_COMPANY_BENEFIT_NAME)
  private String companyBenefitName;

  public static final String SERIALIZED_NAME_BENEFIT_VENDOR_ID = "benefitVendorId";
  @SerializedName(SERIALIZED_NAME_BENEFIT_VENDOR_ID)
  private String benefitVendorId;

  /**
   * Benefit type
   */
  @JsonAdapter(BenefitTypeEnum.Adapter.class)
 public enum BenefitTypeEnum {
    HEALTH("health"),
    
    DENTAL("dental"),
    
    VISION("vision"),
    
    RETIREMENT("retirement"),
    
    HSA("hsa"),
    
    FLEX("flex"),
    
    LIFE("life"),
    
    DISABILITY("disability"),
    
    REIMBURSEMENT("reimbursement"),
    
    SUPPLEMENTAL("supplemental"),
    
    OTHER("other");

    private String value;

    BenefitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BenefitTypeEnum fromValue(String value) {
      for (BenefitTypeEnum b : BenefitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BenefitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BenefitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BenefitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BenefitTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BENEFIT_TYPE = "benefitType";
  @SerializedName(SERIALIZED_NAME_BENEFIT_TYPE)
  private BenefitTypeEnum benefitType;

  public static final String SERIALIZED_NAME_DEDUCTION_TYPE_ID = "deductionTypeId";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_TYPE_ID)
  private String deductionTypeId;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_PLAN_URL = "planUrl";
  @SerializedName(SERIALIZED_NAME_PLAN_URL)
  private String planUrl;

  public static final String SERIALIZED_NAME_SSO_LOGIN_URL = "ssoLoginUrl";
  @SerializedName(SERIALIZED_NAME_SSO_LOGIN_URL)
  private String ssoLoginUrl;

  public static final String SERIALIZED_NAME_SSO_LOGIN_URL_LINK_TEXT = "ssoLoginUrlLinkText";
  @SerializedName(SERIALIZED_NAME_SSO_LOGIN_URL_LINK_TEXT)
  private String ssoLoginUrlLinkText;

  public static final String SERIALIZED_NAME_SAFE_HARBOR = "safeHarbor";
  @SerializedName(SERIALIZED_NAME_SAFE_HARBOR)
  private Boolean safeHarbor;

  public static final String SERIALIZED_NAME_MEET_ACA_MIN = "meetAcaMin";
  @SerializedName(SERIALIZED_NAME_MEET_ACA_MIN)
  private Boolean meetAcaMin;

  public static final String SERIALIZED_NAME_REIMBURSEMENT_AMOUNT = "reimbursementAmount";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_AMOUNT)
  private Double reimbursementAmount;

  /**
   * Reimbursement frequency
   */
  @JsonAdapter(ReimbursementFrequencyEnum.Adapter.class)
 public enum ReimbursementFrequencyEnum {
    PAY_PERIOD("pay period"),
    
    MONTH("month"),
    
    QUARTER("quarter"),
    
    YEAR("year"),
    
    ONE_TIME("one time"),
    
    NULL("null");

    private String value;

    ReimbursementFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReimbursementFrequencyEnum fromValue(String value) {
      for (ReimbursementFrequencyEnum b : ReimbursementFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReimbursementFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReimbursementFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReimbursementFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReimbursementFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REIMBURSEMENT_FREQUENCY = "reimbursementFrequency";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_FREQUENCY)
  private ReimbursementFrequencyEnum reimbursementFrequency;

  public static final String SERIALIZED_NAME_REIMBURSEMENT_CURRENCY_CODE = "reimbursementCurrencyCode";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_CURRENCY_CODE)
  private String reimbursementCurrencyCode;

  public static final String SERIALIZED_NAME_MIN_ESSENTIAL_COVERAGE = "minEssentialCoverage";
  @SerializedName(SERIALIZED_NAME_MIN_ESSENTIAL_COVERAGE)
  private Boolean minEssentialCoverage;

  public CompanyBenefitRequest() {
  }

  public CompanyBenefitRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CompanyBenefitRequest companyBenefitName(String companyBenefitName) {
    
    
    
    
    this.companyBenefitName = companyBenefitName;
    return this;
  }

   /**
   * Name
   * @return companyBenefitName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name")

  public String getCompanyBenefitName() {
    return companyBenefitName;
  }


  public void setCompanyBenefitName(String companyBenefitName) {
    
    
    
    this.companyBenefitName = companyBenefitName;
  }


  public CompanyBenefitRequest benefitVendorId(String benefitVendorId) {
    
    
    
    
    this.benefitVendorId = benefitVendorId;
    return this;
  }

   /**
   * Benefit vendor ID
   * @return benefitVendorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Benefit vendor ID")

  public String getBenefitVendorId() {
    return benefitVendorId;
  }


  public void setBenefitVendorId(String benefitVendorId) {
    
    
    
    this.benefitVendorId = benefitVendorId;
  }


  public CompanyBenefitRequest benefitType(BenefitTypeEnum benefitType) {
    
    
    
    
    this.benefitType = benefitType;
    return this;
  }

   /**
   * Benefit type
   * @return benefitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Benefit type")

  public BenefitTypeEnum getBenefitType() {
    return benefitType;
  }


  public void setBenefitType(BenefitTypeEnum benefitType) {
    
    
    
    this.benefitType = benefitType;
  }


  public CompanyBenefitRequest deductionTypeId(String deductionTypeId) {
    
    
    
    
    this.deductionTypeId = deductionTypeId;
    return this;
  }

   /**
   * Deduction type ID
   * @return deductionTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deduction type ID")

  public String getDeductionTypeId() {
    return deductionTypeId;
  }


  public void setDeductionTypeId(String deductionTypeId) {
    
    
    
    this.deductionTypeId = deductionTypeId;
  }


  public CompanyBenefitRequest startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Benefit start date
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Benefit start date")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public CompanyBenefitRequest endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Benefit end date
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Benefit end date")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public CompanyBenefitRequest planUrl(String planUrl) {
    
    
    
    
    this.planUrl = planUrl;
    return this;
  }

   /**
   * Plan url
   * @return planUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Plan url")

  public String getPlanUrl() {
    return planUrl;
  }


  public void setPlanUrl(String planUrl) {
    
    
    
    this.planUrl = planUrl;
  }


  public CompanyBenefitRequest ssoLoginUrl(String ssoLoginUrl) {
    
    
    
    
    this.ssoLoginUrl = ssoLoginUrl;
    return this;
  }

   /**
   * SSO login url
   * @return ssoLoginUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SSO login url")

  public String getSsoLoginUrl() {
    return ssoLoginUrl;
  }


  public void setSsoLoginUrl(String ssoLoginUrl) {
    
    
    
    this.ssoLoginUrl = ssoLoginUrl;
  }


  public CompanyBenefitRequest ssoLoginUrlLinkText(String ssoLoginUrlLinkText) {
    
    
    
    
    this.ssoLoginUrlLinkText = ssoLoginUrlLinkText;
    return this;
  }

   /**
   * SSO login link text
   * @return ssoLoginUrlLinkText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SSO login link text")

  public String getSsoLoginUrlLinkText() {
    return ssoLoginUrlLinkText;
  }


  public void setSsoLoginUrlLinkText(String ssoLoginUrlLinkText) {
    
    
    
    this.ssoLoginUrlLinkText = ssoLoginUrlLinkText;
  }


  public CompanyBenefitRequest safeHarbor(Boolean safeHarbor) {
    
    
    
    
    this.safeHarbor = safeHarbor;
    return this;
  }

   /**
   * Is a safe harbor
   * @return safeHarbor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is a safe harbor")

  public Boolean getSafeHarbor() {
    return safeHarbor;
  }


  public void setSafeHarbor(Boolean safeHarbor) {
    
    
    
    this.safeHarbor = safeHarbor;
  }


  public CompanyBenefitRequest meetAcaMin(Boolean meetAcaMin) {
    
    
    
    
    this.meetAcaMin = meetAcaMin;
    return this;
  }

   /**
   * Meets ACA minimum requirements
   * @return meetAcaMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Meets ACA minimum requirements")

  public Boolean getMeetAcaMin() {
    return meetAcaMin;
  }


  public void setMeetAcaMin(Boolean meetAcaMin) {
    
    
    
    this.meetAcaMin = meetAcaMin;
  }


  public CompanyBenefitRequest reimbursementAmount(Double reimbursementAmount) {
    
    
    
    
    this.reimbursementAmount = reimbursementAmount;
    return this;
  }

  public CompanyBenefitRequest reimbursementAmount(Integer reimbursementAmount) {
    
    
    
    
    this.reimbursementAmount = reimbursementAmount.doubleValue();
    return this;
  }

   /**
   * Reimbursement amount
   * @return reimbursementAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reimbursement amount")

  public Double getReimbursementAmount() {
    return reimbursementAmount;
  }


  public void setReimbursementAmount(Double reimbursementAmount) {
    
    
    
    this.reimbursementAmount = reimbursementAmount;
  }


  public CompanyBenefitRequest reimbursementFrequency(ReimbursementFrequencyEnum reimbursementFrequency) {
    
    
    
    
    this.reimbursementFrequency = reimbursementFrequency;
    return this;
  }

   /**
   * Reimbursement frequency
   * @return reimbursementFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reimbursement frequency")

  public ReimbursementFrequencyEnum getReimbursementFrequency() {
    return reimbursementFrequency;
  }


  public void setReimbursementFrequency(ReimbursementFrequencyEnum reimbursementFrequency) {
    
    
    
    this.reimbursementFrequency = reimbursementFrequency;
  }


  public CompanyBenefitRequest reimbursementCurrencyCode(String reimbursementCurrencyCode) {
    
    
    
    
    this.reimbursementCurrencyCode = reimbursementCurrencyCode;
    return this;
  }

   /**
   * Reimbursement currency code
   * @return reimbursementCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reimbursement currency code")

  public String getReimbursementCurrencyCode() {
    return reimbursementCurrencyCode;
  }


  public void setReimbursementCurrencyCode(String reimbursementCurrencyCode) {
    
    
    
    this.reimbursementCurrencyCode = reimbursementCurrencyCode;
  }


  public CompanyBenefitRequest minEssentialCoverage(Boolean minEssentialCoverage) {
    
    
    
    
    this.minEssentialCoverage = minEssentialCoverage;
    return this;
  }

   /**
   * Provides minimum essential coverage
   * @return minEssentialCoverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides minimum essential coverage")

  public Boolean getMinEssentialCoverage() {
    return minEssentialCoverage;
  }


  public void setMinEssentialCoverage(Boolean minEssentialCoverage) {
    
    
    
    this.minEssentialCoverage = minEssentialCoverage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompanyBenefitRequest instance itself
   */
  public CompanyBenefitRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyBenefitRequest companyBenefitRequest = (CompanyBenefitRequest) o;
    return Objects.equals(this.description, companyBenefitRequest.description) &&
        Objects.equals(this.companyBenefitName, companyBenefitRequest.companyBenefitName) &&
        Objects.equals(this.benefitVendorId, companyBenefitRequest.benefitVendorId) &&
        Objects.equals(this.benefitType, companyBenefitRequest.benefitType) &&
        Objects.equals(this.deductionTypeId, companyBenefitRequest.deductionTypeId) &&
        Objects.equals(this.startDate, companyBenefitRequest.startDate) &&
        Objects.equals(this.endDate, companyBenefitRequest.endDate) &&
        Objects.equals(this.planUrl, companyBenefitRequest.planUrl) &&
        Objects.equals(this.ssoLoginUrl, companyBenefitRequest.ssoLoginUrl) &&
        Objects.equals(this.ssoLoginUrlLinkText, companyBenefitRequest.ssoLoginUrlLinkText) &&
        Objects.equals(this.safeHarbor, companyBenefitRequest.safeHarbor) &&
        Objects.equals(this.meetAcaMin, companyBenefitRequest.meetAcaMin) &&
        Objects.equals(this.reimbursementAmount, companyBenefitRequest.reimbursementAmount) &&
        Objects.equals(this.reimbursementFrequency, companyBenefitRequest.reimbursementFrequency) &&
        Objects.equals(this.reimbursementCurrencyCode, companyBenefitRequest.reimbursementCurrencyCode) &&
        Objects.equals(this.minEssentialCoverage, companyBenefitRequest.minEssentialCoverage)&&
        Objects.equals(this.additionalProperties, companyBenefitRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyBenefitRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    companyBenefitName: ").append(toIndentedString(companyBenefitName)).append("\n");
    sb.append("    benefitVendorId: ").append(toIndentedString(benefitVendorId)).append("\n");
    sb.append("    benefitType: ").append(toIndentedString(benefitType)).append("\n");
    sb.append("    deductionTypeId: ").append(toIndentedString(deductionTypeId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    planUrl: ").append(toIndentedString(planUrl)).append("\n");
    sb.append("    ssoLoginUrl: ").append(toIndentedString(ssoLoginUrl)).append("\n");
    sb.append("    ssoLoginUrlLinkText: ").append(toIndentedString(ssoLoginUrlLinkText)).append("\n");
    sb.append("    safeHarbor: ").append(toIndentedString(safeHarbor)).append("\n");
    sb.append("    meetAcaMin: ").append(toIndentedString(meetAcaMin)).append("\n");
    sb.append("    reimbursementAmount: ").append(toIndentedString(reimbursementAmount)).append("\n");
    sb.append("    reimbursementFrequency: ").append(toIndentedString(reimbursementFrequency)).append("\n");
    sb.append("    reimbursementCurrencyCode: ").append(toIndentedString(reimbursementCurrencyCode)).append("\n");
    sb.append("    minEssentialCoverage: ").append(toIndentedString(minEssentialCoverage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("companyBenefitName");
    openapiFields.add("benefitVendorId");
    openapiFields.add("benefitType");
    openapiFields.add("deductionTypeId");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("planUrl");
    openapiFields.add("ssoLoginUrl");
    openapiFields.add("ssoLoginUrlLinkText");
    openapiFields.add("safeHarbor");
    openapiFields.add("meetAcaMin");
    openapiFields.add("reimbursementAmount");
    openapiFields.add("reimbursementFrequency");
    openapiFields.add("reimbursementCurrencyCode");
    openapiFields.add("minEssentialCoverage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompanyBenefitRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompanyBenefitRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyBenefitRequest is not found in the empty JSON string", CompanyBenefitRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("companyBenefitName") != null && !jsonObj.get("companyBenefitName").isJsonNull()) && !jsonObj.get("companyBenefitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyBenefitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyBenefitName").toString()));
      }
      if ((jsonObj.get("benefitVendorId") != null && !jsonObj.get("benefitVendorId").isJsonNull()) && !jsonObj.get("benefitVendorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitVendorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitVendorId").toString()));
      }
      if ((jsonObj.get("benefitType") != null && !jsonObj.get("benefitType").isJsonNull()) && !jsonObj.get("benefitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitType").toString()));
      }
      if ((jsonObj.get("deductionTypeId") != null && !jsonObj.get("deductionTypeId").isJsonNull()) && !jsonObj.get("deductionTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductionTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductionTypeId").toString()));
      }
      if ((jsonObj.get("planUrl") != null && !jsonObj.get("planUrl").isJsonNull()) && !jsonObj.get("planUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planUrl").toString()));
      }
      if ((jsonObj.get("ssoLoginUrl") != null && !jsonObj.get("ssoLoginUrl").isJsonNull()) && !jsonObj.get("ssoLoginUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssoLoginUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssoLoginUrl").toString()));
      }
      if ((jsonObj.get("ssoLoginUrlLinkText") != null && !jsonObj.get("ssoLoginUrlLinkText").isJsonNull()) && !jsonObj.get("ssoLoginUrlLinkText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssoLoginUrlLinkText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssoLoginUrlLinkText").toString()));
      }
      if ((jsonObj.get("reimbursementFrequency") != null && !jsonObj.get("reimbursementFrequency").isJsonNull()) && !jsonObj.get("reimbursementFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reimbursementFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reimbursementFrequency").toString()));
      }
      if ((jsonObj.get("reimbursementCurrencyCode") != null && !jsonObj.get("reimbursementCurrencyCode").isJsonNull()) && !jsonObj.get("reimbursementCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reimbursementCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reimbursementCurrencyCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyBenefitRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyBenefitRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyBenefitRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyBenefitRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyBenefitRequest>() {
           @Override
           public void write(JsonWriter out, CompanyBenefitRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyBenefitRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompanyBenefitRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompanyBenefitRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompanyBenefitRequest
  * @throws IOException if the JSON string is invalid with respect to CompanyBenefitRequest
  */
  public static CompanyBenefitRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyBenefitRequest.class);
  }

 /**
  * Convert an instance of CompanyBenefitRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

