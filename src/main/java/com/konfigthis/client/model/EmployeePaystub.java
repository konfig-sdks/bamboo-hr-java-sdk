/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeePaystubDeductionsInner;
import com.konfigthis.client.model.EmployeePaystubDepositsInner;
import com.konfigthis.client.model.EmployeePaystubTaxesInner;
import com.konfigthis.client.model.EmployeePaystubWagesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeePaystub
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeePaystub {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_EXTERNAL_RECORD_ID = "externalRecordId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_RECORD_ID)
  private String externalRecordId;

  public static final String SERIALIZED_NAME_PAY_PERIOD_FROM = "payPeriodFrom";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_FROM)
  private String payPeriodFrom;

  public static final String SERIALIZED_NAME_PAY_PERIOD_TO = "payPeriodTo";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_TO)
  private String payPeriodTo;

  public static final String SERIALIZED_NAME_PAY_DATE = "payDate";
  @SerializedName(SERIALIZED_NAME_PAY_DATE)
  private String payDate;

  public static final String SERIALIZED_NAME_PAYOR_NAME = "payorName";
  @SerializedName(SERIALIZED_NAME_PAYOR_NAME)
  private String payorName;

  public static final String SERIALIZED_NAME_PAYOR_ADD1 = "payorAdd1";
  @SerializedName(SERIALIZED_NAME_PAYOR_ADD1)
  private String payorAdd1;

  public static final String SERIALIZED_NAME_PAYOR_ADD2 = "payorAdd2";
  @SerializedName(SERIALIZED_NAME_PAYOR_ADD2)
  private String payorAdd2;

  public static final String SERIALIZED_NAME_PAYOR_CITY = "payorCity";
  @SerializedName(SERIALIZED_NAME_PAYOR_CITY)
  private String payorCity;

  public static final String SERIALIZED_NAME_PAYOR_STATE = "payorState";
  @SerializedName(SERIALIZED_NAME_PAYOR_STATE)
  private String payorState;

  public static final String SERIALIZED_NAME_PAYOR_ZIP = "payorZip";
  @SerializedName(SERIALIZED_NAME_PAYOR_ZIP)
  private String payorZip;

  public static final String SERIALIZED_NAME_PAYEE_NAME = "payeeName";
  @SerializedName(SERIALIZED_NAME_PAYEE_NAME)
  private String payeeName;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_NET = "net";
  @SerializedName(SERIALIZED_NAME_NET)
  private String net;

  public static final String SERIALIZED_NAME_GROSS = "gross";
  @SerializedName(SERIALIZED_NAME_GROSS)
  private String gross;

  public static final String SERIALIZED_NAME_TOTAL_TAXES = "totalTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAXES)
  private String totalTaxes;

  public static final String SERIALIZED_NAME_TOTAL_DEDUCTIONS = "totalDeductions";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEDUCTIONS)
  private String totalDeductions;

  public static final String SERIALIZED_NAME_YTD_NET = "ytdNet";
  @SerializedName(SERIALIZED_NAME_YTD_NET)
  private String ytdNet;

  public static final String SERIALIZED_NAME_YTD_GROSS = "ytdGross";
  @SerializedName(SERIALIZED_NAME_YTD_GROSS)
  private String ytdGross;

  public static final String SERIALIZED_NAME_YTD_TAXES = "ytdTaxes";
  @SerializedName(SERIALIZED_NAME_YTD_TAXES)
  private String ytdTaxes;

  public static final String SERIALIZED_NAME_YTD_DEDUCTIONS = "ytdDeductions";
  @SerializedName(SERIALIZED_NAME_YTD_DEDUCTIONS)
  private String ytdDeductions;

  public static final String SERIALIZED_NAME_FED_WITHOLDING = "fedWitholding";
  @SerializedName(SERIALIZED_NAME_FED_WITHOLDING)
  private String fedWitholding;

  /**
   * must be 2020_w4, pre_2020_w4, or null
   */
  @JsonAdapter(FederalTypeEnum.Adapter.class)
 public enum FederalTypeEnum {
    _2020_W4("2020_w4"),
    
    PRE_2020_W4("pre_2020_w4");

    private String value;

    FederalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FederalTypeEnum fromValue(String value) {
      for (FederalTypeEnum b : FederalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FederalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FederalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FederalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FederalTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEDERAL_TYPE = "federalType";
  @SerializedName(SERIALIZED_NAME_FEDERAL_TYPE)
  private FederalTypeEnum federalType;

  public static final String SERIALIZED_NAME_TWO_JOBS = "twoJobs";
  @SerializedName(SERIALIZED_NAME_TWO_JOBS)
  private String twoJobs;

  public static final String SERIALIZED_NAME_DEPENDENTS_AMOUNT = "dependentsAmount";
  @SerializedName(SERIALIZED_NAME_DEPENDENTS_AMOUNT)
  private String dependentsAmount;

  public static final String SERIALIZED_NAME_OTHER_INCOME = "otherIncome";
  @SerializedName(SERIALIZED_NAME_OTHER_INCOME)
  private String otherIncome;

  public static final String SERIALIZED_NAME_DEDUCTIONS_AMOUNT = "deductionsAmount";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS_AMOUNT)
  private String deductionsAmount;

  public static final String SERIALIZED_NAME_STATE_WITHHOLDING = "stateWithholding";
  @SerializedName(SERIALIZED_NAME_STATE_WITHHOLDING)
  private String stateWithholding;

  public static final String SERIALIZED_NAME_LOCAL_WITHHOLDING = "localWithholding";
  @SerializedName(SERIALIZED_NAME_LOCAL_WITHHOLDING)
  private String localWithholding;

  public static final String SERIALIZED_NAME_ADDITIONAL_FED = "additionalFed";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FED)
  private String additionalFed;

  public static final String SERIALIZED_NAME_ADDITIONAL_STATE = "additionalState";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_STATE)
  private String additionalState;

  public static final String SERIALIZED_NAME_ADDITIONAL_LOCAL = "additionalLocal";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LOCAL)
  private String additionalLocal;

  public static final String SERIALIZED_NAME_TAX_STATE = "taxState";
  @SerializedName(SERIALIZED_NAME_TAX_STATE)
  private String taxState;

  public static final String SERIALIZED_NAME_TAX_LOCAL = "taxLocal";
  @SerializedName(SERIALIZED_NAME_TAX_LOCAL)
  private String taxLocal;

  public static final String SERIALIZED_NAME_WAGES = "wages";
  @SerializedName(SERIALIZED_NAME_WAGES)
  private List<EmployeePaystubWagesInner> wages = null;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<EmployeePaystubTaxesInner> taxes = null;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private List<EmployeePaystubDeductionsInner> deductions = null;

  public static final String SERIALIZED_NAME_DEPOSITS = "deposits";
  @SerializedName(SERIALIZED_NAME_DEPOSITS)
  private List<EmployeePaystubDepositsInner> deposits = null;

  public EmployeePaystub() {
  }

  public EmployeePaystub employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * 
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public EmployeePaystub externalRecordId(String externalRecordId) {
    
    
    
    
    this.externalRecordId = externalRecordId;
    return this;
  }

   /**
   * 
   * @return externalRecordId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalRecordId() {
    return externalRecordId;
  }


  public void setExternalRecordId(String externalRecordId) {
    
    
    
    this.externalRecordId = externalRecordId;
  }


  public EmployeePaystub payPeriodFrom(String payPeriodFrom) {
    
    
    
    
    this.payPeriodFrom = payPeriodFrom;
    return this;
  }

   /**
   * 
   * @return payPeriodFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayPeriodFrom() {
    return payPeriodFrom;
  }


  public void setPayPeriodFrom(String payPeriodFrom) {
    
    
    
    this.payPeriodFrom = payPeriodFrom;
  }


  public EmployeePaystub payPeriodTo(String payPeriodTo) {
    
    
    
    
    this.payPeriodTo = payPeriodTo;
    return this;
  }

   /**
   * 
   * @return payPeriodTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayPeriodTo() {
    return payPeriodTo;
  }


  public void setPayPeriodTo(String payPeriodTo) {
    
    
    
    this.payPeriodTo = payPeriodTo;
  }


  public EmployeePaystub payDate(String payDate) {
    
    
    
    
    this.payDate = payDate;
    return this;
  }

   /**
   * 
   * @return payDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayDate() {
    return payDate;
  }


  public void setPayDate(String payDate) {
    
    
    
    this.payDate = payDate;
  }


  public EmployeePaystub payorName(String payorName) {
    
    
    
    
    this.payorName = payorName;
    return this;
  }

   /**
   * 
   * @return payorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayorName() {
    return payorName;
  }


  public void setPayorName(String payorName) {
    
    
    
    this.payorName = payorName;
  }


  public EmployeePaystub payorAdd1(String payorAdd1) {
    
    
    
    
    this.payorAdd1 = payorAdd1;
    return this;
  }

   /**
   * 
   * @return payorAdd1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayorAdd1() {
    return payorAdd1;
  }


  public void setPayorAdd1(String payorAdd1) {
    
    
    
    this.payorAdd1 = payorAdd1;
  }


  public EmployeePaystub payorAdd2(String payorAdd2) {
    
    
    
    
    this.payorAdd2 = payorAdd2;
    return this;
  }

   /**
   * 
   * @return payorAdd2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayorAdd2() {
    return payorAdd2;
  }


  public void setPayorAdd2(String payorAdd2) {
    
    
    
    this.payorAdd2 = payorAdd2;
  }


  public EmployeePaystub payorCity(String payorCity) {
    
    
    
    
    this.payorCity = payorCity;
    return this;
  }

   /**
   * 
   * @return payorCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayorCity() {
    return payorCity;
  }


  public void setPayorCity(String payorCity) {
    
    
    
    this.payorCity = payorCity;
  }


  public EmployeePaystub payorState(String payorState) {
    
    
    
    
    this.payorState = payorState;
    return this;
  }

   /**
   * 
   * @return payorState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayorState() {
    return payorState;
  }


  public void setPayorState(String payorState) {
    
    
    
    this.payorState = payorState;
  }


  public EmployeePaystub payorZip(String payorZip) {
    
    
    
    
    this.payorZip = payorZip;
    return this;
  }

   /**
   * 
   * @return payorZip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayorZip() {
    return payorZip;
  }


  public void setPayorZip(String payorZip) {
    
    
    
    this.payorZip = payorZip;
  }


  public EmployeePaystub payeeName(String payeeName) {
    
    
    
    
    this.payeeName = payeeName;
    return this;
  }

   /**
   * 
   * @return payeeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayeeName() {
    return payeeName;
  }


  public void setPayeeName(String payeeName) {
    
    
    
    this.payeeName = payeeName;
  }


  public EmployeePaystub currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * 
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public EmployeePaystub net(String net) {
    
    
    
    
    this.net = net;
    return this;
  }

   /**
   * 
   * @return net
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNet() {
    return net;
  }


  public void setNet(String net) {
    
    
    
    this.net = net;
  }


  public EmployeePaystub gross(String gross) {
    
    
    
    
    this.gross = gross;
    return this;
  }

   /**
   * 
   * @return gross
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGross() {
    return gross;
  }


  public void setGross(String gross) {
    
    
    
    this.gross = gross;
  }


  public EmployeePaystub totalTaxes(String totalTaxes) {
    
    
    
    
    this.totalTaxes = totalTaxes;
    return this;
  }

   /**
   * 
   * @return totalTaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalTaxes() {
    return totalTaxes;
  }


  public void setTotalTaxes(String totalTaxes) {
    
    
    
    this.totalTaxes = totalTaxes;
  }


  public EmployeePaystub totalDeductions(String totalDeductions) {
    
    
    
    
    this.totalDeductions = totalDeductions;
    return this;
  }

   /**
   * 
   * @return totalDeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalDeductions() {
    return totalDeductions;
  }


  public void setTotalDeductions(String totalDeductions) {
    
    
    
    this.totalDeductions = totalDeductions;
  }


  public EmployeePaystub ytdNet(String ytdNet) {
    
    
    
    
    this.ytdNet = ytdNet;
    return this;
  }

   /**
   * 
   * @return ytdNet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getYtdNet() {
    return ytdNet;
  }


  public void setYtdNet(String ytdNet) {
    
    
    
    this.ytdNet = ytdNet;
  }


  public EmployeePaystub ytdGross(String ytdGross) {
    
    
    
    
    this.ytdGross = ytdGross;
    return this;
  }

   /**
   * 
   * @return ytdGross
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getYtdGross() {
    return ytdGross;
  }


  public void setYtdGross(String ytdGross) {
    
    
    
    this.ytdGross = ytdGross;
  }


  public EmployeePaystub ytdTaxes(String ytdTaxes) {
    
    
    
    
    this.ytdTaxes = ytdTaxes;
    return this;
  }

   /**
   * 
   * @return ytdTaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getYtdTaxes() {
    return ytdTaxes;
  }


  public void setYtdTaxes(String ytdTaxes) {
    
    
    
    this.ytdTaxes = ytdTaxes;
  }


  public EmployeePaystub ytdDeductions(String ytdDeductions) {
    
    
    
    
    this.ytdDeductions = ytdDeductions;
    return this;
  }

   /**
   * 
   * @return ytdDeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getYtdDeductions() {
    return ytdDeductions;
  }


  public void setYtdDeductions(String ytdDeductions) {
    
    
    
    this.ytdDeductions = ytdDeductions;
  }


  public EmployeePaystub fedWitholding(String fedWitholding) {
    
    
    
    
    this.fedWitholding = fedWitholding;
    return this;
  }

   /**
   * 
   * @return fedWitholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFedWitholding() {
    return fedWitholding;
  }


  public void setFedWitholding(String fedWitholding) {
    
    
    
    this.fedWitholding = fedWitholding;
  }


  public EmployeePaystub federalType(FederalTypeEnum federalType) {
    
    
    
    
    this.federalType = federalType;
    return this;
  }

   /**
   * must be 2020_w4, pre_2020_w4, or null
   * @return federalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "must be 2020_w4, pre_2020_w4, or null")

  public FederalTypeEnum getFederalType() {
    return federalType;
  }


  public void setFederalType(FederalTypeEnum federalType) {
    
    
    
    this.federalType = federalType;
  }


  public EmployeePaystub twoJobs(String twoJobs) {
    
    
    
    
    this.twoJobs = twoJobs;
    return this;
  }

   /**
   * boolean value
   * @return twoJobs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "boolean value")

  public String getTwoJobs() {
    return twoJobs;
  }


  public void setTwoJobs(String twoJobs) {
    
    
    
    this.twoJobs = twoJobs;
  }


  public EmployeePaystub dependentsAmount(String dependentsAmount) {
    
    
    
    
    this.dependentsAmount = dependentsAmount;
    return this;
  }

   /**
   * float value
   * @return dependentsAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "float value")

  public String getDependentsAmount() {
    return dependentsAmount;
  }


  public void setDependentsAmount(String dependentsAmount) {
    
    
    
    this.dependentsAmount = dependentsAmount;
  }


  public EmployeePaystub otherIncome(String otherIncome) {
    
    
    
    
    this.otherIncome = otherIncome;
    return this;
  }

   /**
   * float value
   * @return otherIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "float value")

  public String getOtherIncome() {
    return otherIncome;
  }


  public void setOtherIncome(String otherIncome) {
    
    
    
    this.otherIncome = otherIncome;
  }


  public EmployeePaystub deductionsAmount(String deductionsAmount) {
    
    
    
    
    this.deductionsAmount = deductionsAmount;
    return this;
  }

   /**
   * float value
   * @return deductionsAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "float value")

  public String getDeductionsAmount() {
    return deductionsAmount;
  }


  public void setDeductionsAmount(String deductionsAmount) {
    
    
    
    this.deductionsAmount = deductionsAmount;
  }


  public EmployeePaystub stateWithholding(String stateWithholding) {
    
    
    
    
    this.stateWithholding = stateWithholding;
    return this;
  }

   /**
   * 
   * @return stateWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStateWithholding() {
    return stateWithholding;
  }


  public void setStateWithholding(String stateWithholding) {
    
    
    
    this.stateWithholding = stateWithholding;
  }


  public EmployeePaystub localWithholding(String localWithholding) {
    
    
    
    
    this.localWithholding = localWithholding;
    return this;
  }

   /**
   * 
   * @return localWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocalWithholding() {
    return localWithholding;
  }


  public void setLocalWithholding(String localWithholding) {
    
    
    
    this.localWithholding = localWithholding;
  }


  public EmployeePaystub additionalFed(String additionalFed) {
    
    
    
    
    this.additionalFed = additionalFed;
    return this;
  }

   /**
   * 
   * @return additionalFed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalFed() {
    return additionalFed;
  }


  public void setAdditionalFed(String additionalFed) {
    
    
    
    this.additionalFed = additionalFed;
  }


  public EmployeePaystub additionalState(String additionalState) {
    
    
    
    
    this.additionalState = additionalState;
    return this;
  }

   /**
   * 
   * @return additionalState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalState() {
    return additionalState;
  }


  public void setAdditionalState(String additionalState) {
    
    
    
    this.additionalState = additionalState;
  }


  public EmployeePaystub additionalLocal(String additionalLocal) {
    
    
    
    
    this.additionalLocal = additionalLocal;
    return this;
  }

   /**
   * 
   * @return additionalLocal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalLocal() {
    return additionalLocal;
  }


  public void setAdditionalLocal(String additionalLocal) {
    
    
    
    this.additionalLocal = additionalLocal;
  }


  public EmployeePaystub taxState(String taxState) {
    
    
    
    
    this.taxState = taxState;
    return this;
  }

   /**
   * 
   * @return taxState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxState() {
    return taxState;
  }


  public void setTaxState(String taxState) {
    
    
    
    this.taxState = taxState;
  }


  public EmployeePaystub taxLocal(String taxLocal) {
    
    
    
    
    this.taxLocal = taxLocal;
    return this;
  }

   /**
   * 
   * @return taxLocal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxLocal() {
    return taxLocal;
  }


  public void setTaxLocal(String taxLocal) {
    
    
    
    this.taxLocal = taxLocal;
  }


  public EmployeePaystub wages(List<EmployeePaystubWagesInner> wages) {
    
    
    
    
    this.wages = wages;
    return this;
  }

  public EmployeePaystub addWagesItem(EmployeePaystubWagesInner wagesItem) {
    if (this.wages == null) {
      this.wages = new ArrayList<>();
    }
    this.wages.add(wagesItem);
    return this;
  }

   /**
   * 
   * @return wages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmployeePaystubWagesInner> getWages() {
    return wages;
  }


  public void setWages(List<EmployeePaystubWagesInner> wages) {
    
    
    
    this.wages = wages;
  }


  public EmployeePaystub taxes(List<EmployeePaystubTaxesInner> taxes) {
    
    
    
    
    this.taxes = taxes;
    return this;
  }

  public EmployeePaystub addTaxesItem(EmployeePaystubTaxesInner taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * 
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmployeePaystubTaxesInner> getTaxes() {
    return taxes;
  }


  public void setTaxes(List<EmployeePaystubTaxesInner> taxes) {
    
    
    
    this.taxes = taxes;
  }


  public EmployeePaystub deductions(List<EmployeePaystubDeductionsInner> deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

  public EmployeePaystub addDeductionsItem(EmployeePaystubDeductionsInner deductionsItem) {
    if (this.deductions == null) {
      this.deductions = new ArrayList<>();
    }
    this.deductions.add(deductionsItem);
    return this;
  }

   /**
   * 
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmployeePaystubDeductionsInner> getDeductions() {
    return deductions;
  }


  public void setDeductions(List<EmployeePaystubDeductionsInner> deductions) {
    
    
    
    this.deductions = deductions;
  }


  public EmployeePaystub deposits(List<EmployeePaystubDepositsInner> deposits) {
    
    
    
    
    this.deposits = deposits;
    return this;
  }

  public EmployeePaystub addDepositsItem(EmployeePaystubDepositsInner depositsItem) {
    if (this.deposits == null) {
      this.deposits = new ArrayList<>();
    }
    this.deposits.add(depositsItem);
    return this;
  }

   /**
   * 
   * @return deposits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmployeePaystubDepositsInner> getDeposits() {
    return deposits;
  }


  public void setDeposits(List<EmployeePaystubDepositsInner> deposits) {
    
    
    
    this.deposits = deposits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeePaystub instance itself
   */
  public EmployeePaystub putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeePaystub employeePaystub = (EmployeePaystub) o;
    return Objects.equals(this.employeeId, employeePaystub.employeeId) &&
        Objects.equals(this.externalRecordId, employeePaystub.externalRecordId) &&
        Objects.equals(this.payPeriodFrom, employeePaystub.payPeriodFrom) &&
        Objects.equals(this.payPeriodTo, employeePaystub.payPeriodTo) &&
        Objects.equals(this.payDate, employeePaystub.payDate) &&
        Objects.equals(this.payorName, employeePaystub.payorName) &&
        Objects.equals(this.payorAdd1, employeePaystub.payorAdd1) &&
        Objects.equals(this.payorAdd2, employeePaystub.payorAdd2) &&
        Objects.equals(this.payorCity, employeePaystub.payorCity) &&
        Objects.equals(this.payorState, employeePaystub.payorState) &&
        Objects.equals(this.payorZip, employeePaystub.payorZip) &&
        Objects.equals(this.payeeName, employeePaystub.payeeName) &&
        Objects.equals(this.currencyCode, employeePaystub.currencyCode) &&
        Objects.equals(this.net, employeePaystub.net) &&
        Objects.equals(this.gross, employeePaystub.gross) &&
        Objects.equals(this.totalTaxes, employeePaystub.totalTaxes) &&
        Objects.equals(this.totalDeductions, employeePaystub.totalDeductions) &&
        Objects.equals(this.ytdNet, employeePaystub.ytdNet) &&
        Objects.equals(this.ytdGross, employeePaystub.ytdGross) &&
        Objects.equals(this.ytdTaxes, employeePaystub.ytdTaxes) &&
        Objects.equals(this.ytdDeductions, employeePaystub.ytdDeductions) &&
        Objects.equals(this.fedWitholding, employeePaystub.fedWitholding) &&
        Objects.equals(this.federalType, employeePaystub.federalType) &&
        Objects.equals(this.twoJobs, employeePaystub.twoJobs) &&
        Objects.equals(this.dependentsAmount, employeePaystub.dependentsAmount) &&
        Objects.equals(this.otherIncome, employeePaystub.otherIncome) &&
        Objects.equals(this.deductionsAmount, employeePaystub.deductionsAmount) &&
        Objects.equals(this.stateWithholding, employeePaystub.stateWithholding) &&
        Objects.equals(this.localWithholding, employeePaystub.localWithholding) &&
        Objects.equals(this.additionalFed, employeePaystub.additionalFed) &&
        Objects.equals(this.additionalState, employeePaystub.additionalState) &&
        Objects.equals(this.additionalLocal, employeePaystub.additionalLocal) &&
        Objects.equals(this.taxState, employeePaystub.taxState) &&
        Objects.equals(this.taxLocal, employeePaystub.taxLocal) &&
        Objects.equals(this.wages, employeePaystub.wages) &&
        Objects.equals(this.taxes, employeePaystub.taxes) &&
        Objects.equals(this.deductions, employeePaystub.deductions) &&
        Objects.equals(this.deposits, employeePaystub.deposits)&&
        Objects.equals(this.additionalProperties, employeePaystub.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, externalRecordId, payPeriodFrom, payPeriodTo, payDate, payorName, payorAdd1, payorAdd2, payorCity, payorState, payorZip, payeeName, currencyCode, net, gross, totalTaxes, totalDeductions, ytdNet, ytdGross, ytdTaxes, ytdDeductions, fedWitholding, federalType, twoJobs, dependentsAmount, otherIncome, deductionsAmount, stateWithholding, localWithholding, additionalFed, additionalState, additionalLocal, taxState, taxLocal, wages, taxes, deductions, deposits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeePaystub {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    externalRecordId: ").append(toIndentedString(externalRecordId)).append("\n");
    sb.append("    payPeriodFrom: ").append(toIndentedString(payPeriodFrom)).append("\n");
    sb.append("    payPeriodTo: ").append(toIndentedString(payPeriodTo)).append("\n");
    sb.append("    payDate: ").append(toIndentedString(payDate)).append("\n");
    sb.append("    payorName: ").append(toIndentedString(payorName)).append("\n");
    sb.append("    payorAdd1: ").append(toIndentedString(payorAdd1)).append("\n");
    sb.append("    payorAdd2: ").append(toIndentedString(payorAdd2)).append("\n");
    sb.append("    payorCity: ").append(toIndentedString(payorCity)).append("\n");
    sb.append("    payorState: ").append(toIndentedString(payorState)).append("\n");
    sb.append("    payorZip: ").append(toIndentedString(payorZip)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    gross: ").append(toIndentedString(gross)).append("\n");
    sb.append("    totalTaxes: ").append(toIndentedString(totalTaxes)).append("\n");
    sb.append("    totalDeductions: ").append(toIndentedString(totalDeductions)).append("\n");
    sb.append("    ytdNet: ").append(toIndentedString(ytdNet)).append("\n");
    sb.append("    ytdGross: ").append(toIndentedString(ytdGross)).append("\n");
    sb.append("    ytdTaxes: ").append(toIndentedString(ytdTaxes)).append("\n");
    sb.append("    ytdDeductions: ").append(toIndentedString(ytdDeductions)).append("\n");
    sb.append("    fedWitholding: ").append(toIndentedString(fedWitholding)).append("\n");
    sb.append("    federalType: ").append(toIndentedString(federalType)).append("\n");
    sb.append("    twoJobs: ").append(toIndentedString(twoJobs)).append("\n");
    sb.append("    dependentsAmount: ").append(toIndentedString(dependentsAmount)).append("\n");
    sb.append("    otherIncome: ").append(toIndentedString(otherIncome)).append("\n");
    sb.append("    deductionsAmount: ").append(toIndentedString(deductionsAmount)).append("\n");
    sb.append("    stateWithholding: ").append(toIndentedString(stateWithholding)).append("\n");
    sb.append("    localWithholding: ").append(toIndentedString(localWithholding)).append("\n");
    sb.append("    additionalFed: ").append(toIndentedString(additionalFed)).append("\n");
    sb.append("    additionalState: ").append(toIndentedString(additionalState)).append("\n");
    sb.append("    additionalLocal: ").append(toIndentedString(additionalLocal)).append("\n");
    sb.append("    taxState: ").append(toIndentedString(taxState)).append("\n");
    sb.append("    taxLocal: ").append(toIndentedString(taxLocal)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    deposits: ").append(toIndentedString(deposits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("externalRecordId");
    openapiFields.add("payPeriodFrom");
    openapiFields.add("payPeriodTo");
    openapiFields.add("payDate");
    openapiFields.add("payorName");
    openapiFields.add("payorAdd1");
    openapiFields.add("payorAdd2");
    openapiFields.add("payorCity");
    openapiFields.add("payorState");
    openapiFields.add("payorZip");
    openapiFields.add("payeeName");
    openapiFields.add("currencyCode");
    openapiFields.add("net");
    openapiFields.add("gross");
    openapiFields.add("totalTaxes");
    openapiFields.add("totalDeductions");
    openapiFields.add("ytdNet");
    openapiFields.add("ytdGross");
    openapiFields.add("ytdTaxes");
    openapiFields.add("ytdDeductions");
    openapiFields.add("fedWitholding");
    openapiFields.add("federalType");
    openapiFields.add("twoJobs");
    openapiFields.add("dependentsAmount");
    openapiFields.add("otherIncome");
    openapiFields.add("deductionsAmount");
    openapiFields.add("stateWithholding");
    openapiFields.add("localWithholding");
    openapiFields.add("additionalFed");
    openapiFields.add("additionalState");
    openapiFields.add("additionalLocal");
    openapiFields.add("taxState");
    openapiFields.add("taxLocal");
    openapiFields.add("wages");
    openapiFields.add("taxes");
    openapiFields.add("deductions");
    openapiFields.add("deposits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeePaystub
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeePaystub.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeePaystub is not found in the empty JSON string", EmployeePaystub.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("externalRecordId") != null && !jsonObj.get("externalRecordId").isJsonNull()) && !jsonObj.get("externalRecordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalRecordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalRecordId").toString()));
      }
      if ((jsonObj.get("payPeriodFrom") != null && !jsonObj.get("payPeriodFrom").isJsonNull()) && !jsonObj.get("payPeriodFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payPeriodFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payPeriodFrom").toString()));
      }
      if ((jsonObj.get("payPeriodTo") != null && !jsonObj.get("payPeriodTo").isJsonNull()) && !jsonObj.get("payPeriodTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payPeriodTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payPeriodTo").toString()));
      }
      if ((jsonObj.get("payDate") != null && !jsonObj.get("payDate").isJsonNull()) && !jsonObj.get("payDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payDate").toString()));
      }
      if ((jsonObj.get("payorName") != null && !jsonObj.get("payorName").isJsonNull()) && !jsonObj.get("payorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorName").toString()));
      }
      if ((jsonObj.get("payorAdd1") != null && !jsonObj.get("payorAdd1").isJsonNull()) && !jsonObj.get("payorAdd1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorAdd1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorAdd1").toString()));
      }
      if ((jsonObj.get("payorAdd2") != null && !jsonObj.get("payorAdd2").isJsonNull()) && !jsonObj.get("payorAdd2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorAdd2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorAdd2").toString()));
      }
      if ((jsonObj.get("payorCity") != null && !jsonObj.get("payorCity").isJsonNull()) && !jsonObj.get("payorCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorCity").toString()));
      }
      if ((jsonObj.get("payorState") != null && !jsonObj.get("payorState").isJsonNull()) && !jsonObj.get("payorState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorState").toString()));
      }
      if ((jsonObj.get("payorZip") != null && !jsonObj.get("payorZip").isJsonNull()) && !jsonObj.get("payorZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorZip").toString()));
      }
      if ((jsonObj.get("payeeName") != null && !jsonObj.get("payeeName").isJsonNull()) && !jsonObj.get("payeeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeName").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("net") != null && !jsonObj.get("net").isJsonNull()) && !jsonObj.get("net").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net").toString()));
      }
      if ((jsonObj.get("gross") != null && !jsonObj.get("gross").isJsonNull()) && !jsonObj.get("gross").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gross` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gross").toString()));
      }
      if ((jsonObj.get("totalTaxes") != null && !jsonObj.get("totalTaxes").isJsonNull()) && !jsonObj.get("totalTaxes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTaxes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTaxes").toString()));
      }
      if ((jsonObj.get("totalDeductions") != null && !jsonObj.get("totalDeductions").isJsonNull()) && !jsonObj.get("totalDeductions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalDeductions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalDeductions").toString()));
      }
      if ((jsonObj.get("ytdNet") != null && !jsonObj.get("ytdNet").isJsonNull()) && !jsonObj.get("ytdNet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytdNet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytdNet").toString()));
      }
      if ((jsonObj.get("ytdGross") != null && !jsonObj.get("ytdGross").isJsonNull()) && !jsonObj.get("ytdGross").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytdGross` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytdGross").toString()));
      }
      if ((jsonObj.get("ytdTaxes") != null && !jsonObj.get("ytdTaxes").isJsonNull()) && !jsonObj.get("ytdTaxes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytdTaxes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytdTaxes").toString()));
      }
      if ((jsonObj.get("ytdDeductions") != null && !jsonObj.get("ytdDeductions").isJsonNull()) && !jsonObj.get("ytdDeductions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytdDeductions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytdDeductions").toString()));
      }
      if ((jsonObj.get("fedWitholding") != null && !jsonObj.get("fedWitholding").isJsonNull()) && !jsonObj.get("fedWitholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fedWitholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fedWitholding").toString()));
      }
      if ((jsonObj.get("federalType") != null && !jsonObj.get("federalType").isJsonNull()) && !jsonObj.get("federalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `federalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("federalType").toString()));
      }
      if ((jsonObj.get("twoJobs") != null && !jsonObj.get("twoJobs").isJsonNull()) && !jsonObj.get("twoJobs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twoJobs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twoJobs").toString()));
      }
      if ((jsonObj.get("dependentsAmount") != null && !jsonObj.get("dependentsAmount").isJsonNull()) && !jsonObj.get("dependentsAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependentsAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependentsAmount").toString()));
      }
      if ((jsonObj.get("otherIncome") != null && !jsonObj.get("otherIncome").isJsonNull()) && !jsonObj.get("otherIncome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherIncome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherIncome").toString()));
      }
      if ((jsonObj.get("deductionsAmount") != null && !jsonObj.get("deductionsAmount").isJsonNull()) && !jsonObj.get("deductionsAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductionsAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductionsAmount").toString()));
      }
      if ((jsonObj.get("stateWithholding") != null && !jsonObj.get("stateWithholding").isJsonNull()) && !jsonObj.get("stateWithholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateWithholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateWithholding").toString()));
      }
      if ((jsonObj.get("localWithholding") != null && !jsonObj.get("localWithholding").isJsonNull()) && !jsonObj.get("localWithholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localWithholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localWithholding").toString()));
      }
      if ((jsonObj.get("additionalFed") != null && !jsonObj.get("additionalFed").isJsonNull()) && !jsonObj.get("additionalFed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalFed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalFed").toString()));
      }
      if ((jsonObj.get("additionalState") != null && !jsonObj.get("additionalState").isJsonNull()) && !jsonObj.get("additionalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalState").toString()));
      }
      if ((jsonObj.get("additionalLocal") != null && !jsonObj.get("additionalLocal").isJsonNull()) && !jsonObj.get("additionalLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalLocal").toString()));
      }
      if ((jsonObj.get("taxState") != null && !jsonObj.get("taxState").isJsonNull()) && !jsonObj.get("taxState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxState").toString()));
      }
      if ((jsonObj.get("taxLocal") != null && !jsonObj.get("taxLocal").isJsonNull()) && !jsonObj.get("taxLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxLocal").toString()));
      }
      if (jsonObj.get("wages") != null && !jsonObj.get("wages").isJsonNull()) {
        JsonArray jsonArraywages = jsonObj.getAsJsonArray("wages");
        if (jsonArraywages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("wages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `wages` to be an array in the JSON string but got `%s`", jsonObj.get("wages").toString()));
          }

          // validate the optional field `wages` (array)
          for (int i = 0; i < jsonArraywages.size(); i++) {
            EmployeePaystubWagesInner.validateJsonObject(jsonArraywages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            EmployeePaystubTaxesInner.validateJsonObject(jsonArraytaxes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) {
        JsonArray jsonArraydeductions = jsonObj.getAsJsonArray("deductions");
        if (jsonArraydeductions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deductions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deductions` to be an array in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
          }

          // validate the optional field `deductions` (array)
          for (int i = 0; i < jsonArraydeductions.size(); i++) {
            EmployeePaystubDeductionsInner.validateJsonObject(jsonArraydeductions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("deposits") != null && !jsonObj.get("deposits").isJsonNull()) {
        JsonArray jsonArraydeposits = jsonObj.getAsJsonArray("deposits");
        if (jsonArraydeposits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deposits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deposits` to be an array in the JSON string but got `%s`", jsonObj.get("deposits").toString()));
          }

          // validate the optional field `deposits` (array)
          for (int i = 0; i < jsonArraydeposits.size(); i++) {
            EmployeePaystubDepositsInner.validateJsonObject(jsonArraydeposits.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeePaystub.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeePaystub' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeePaystub> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeePaystub.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeePaystub>() {
           @Override
           public void write(JsonWriter out, EmployeePaystub value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeePaystub read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeePaystub instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeePaystub given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeePaystub
  * @throws IOException if the JSON string is invalid with respect to EmployeePaystub
  */
  public static EmployeePaystub fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeePaystub.class);
  }

 /**
  * Convert an instance of EmployeePaystub to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

