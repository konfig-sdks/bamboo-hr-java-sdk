/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantTrackingCreateNewApplicationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantTrackingCreateNewApplicationRequest {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private Integer jobId;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LINKEDIN_URL = "linkedinUrl";
  @SerializedName(SERIALIZED_NAME_LINKEDIN_URL)
  private String linkedinUrl;

  public static final String SERIALIZED_NAME_DATE_AVAILABLE = "dateAvailable";
  @SerializedName(SERIALIZED_NAME_DATE_AVAILABLE)
  private String dateAvailable;

  public static final String SERIALIZED_NAME_DESIRED_SALARY = "desiredSalary";
  @SerializedName(SERIALIZED_NAME_DESIRED_SALARY)
  private String desiredSalary;

  public static final String SERIALIZED_NAME_REFERRED_BY = "referredBy";
  @SerializedName(SERIALIZED_NAME_REFERRED_BY)
  private String referredBy;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  /**
   * The highest completed education level of the candidate.
   */
  @JsonAdapter(HighestEducationEnum.Adapter.class)
 public enum HighestEducationEnum {
    GED_OR_EQUIVALENT("GED or Equivalent"),
    
    HIGH_SCHOOL("High School"),
    
    SOME_COLLEGE("Some College"),
    
    COLLEGE_ASSOCIATES("College - Associates"),
    
    COLLEGE_BACHELOR_OF_ARTS("College - Bachelor of Arts"),
    
    COLLEGE_BACHELOR_OF_FINE_ARTS("College - Bachelor of Fine Arts"),
    
    COLLEGE_BACHELOR_OF_SCIENCE("College - Bachelor of Science"),
    
    COLLEGE_MASTER_OF_ARTS("College - Master of Arts"),
    
    COLLEGE_MASTER_OF_FINE_ARTS("College - Master of Fine Arts"),
    
    COLLEGE_MASTER_OF_SCIENCE("College - Master of Science"),
    
    COLLEGE_MASTER_OF_BUSINESS_ADMINISTRATION("College - Master of Business Administration"),
    
    COLLEGE_DOCTORATE("College - Doctorate"),
    
    MEDICAL_DOCTOR("Medical Doctor"),
    
    OTHER("Other");

    private String value;

    HighestEducationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestEducationEnum fromValue(String value) {
      for (HighestEducationEnum b : HighestEducationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestEducationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestEducationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestEducationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestEducationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_EDUCATION = "highestEducation";
  @SerializedName(SERIALIZED_NAME_HIGHEST_EDUCATION)
  private HighestEducationEnum highestEducation;

  public static final String SERIALIZED_NAME_COLLEGE_NAME = "collegeName";
  @SerializedName(SERIALIZED_NAME_COLLEGE_NAME)
  private String collegeName;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private String references;

  public static final String SERIALIZED_NAME_RESUME = "resume";
  @SerializedName(SERIALIZED_NAME_RESUME)
  private File resume;

  public static final String SERIALIZED_NAME_COVER_LETTER = "coverLetter";
  @SerializedName(SERIALIZED_NAME_COVER_LETTER)
  private File coverLetter;

  public ApplicantTrackingCreateNewApplicationRequest() {
  }

  public ApplicantTrackingCreateNewApplicationRequest firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The first name of the candidate.
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The first name of the candidate.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public ApplicantTrackingCreateNewApplicationRequest lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The last name of the candidate.
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The last name of the candidate.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public ApplicantTrackingCreateNewApplicationRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The email address of the candidate.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address of the candidate.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public ApplicantTrackingCreateNewApplicationRequest phoneNumber(String phoneNumber) {
    
    
    
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * The phone number of the candidate.
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The phone number of the candidate.")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    
    
    
    this.phoneNumber = phoneNumber;
  }


  public ApplicantTrackingCreateNewApplicationRequest source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * The source of the candidate application, e.g. LinkedIn, Indeed, etc.
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The source of the candidate application, e.g. LinkedIn, Indeed, etc.")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public ApplicantTrackingCreateNewApplicationRequest jobId(Integer jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * The id of the job opening for the candidate application.
   * @return jobId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the job opening for the candidate application.")

  public Integer getJobId() {
    return jobId;
  }


  public void setJobId(Integer jobId) {
    
    
    
    this.jobId = jobId;
  }


  public ApplicantTrackingCreateNewApplicationRequest address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * The street address of the candidate.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The street address of the candidate.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public ApplicantTrackingCreateNewApplicationRequest city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * The city of the candidate.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The city of the candidate.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public ApplicantTrackingCreateNewApplicationRequest state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The state or province of the candidate. Accepts state name, abbreviation, or ISO code.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state or province of the candidate. Accepts state name, abbreviation, or ISO code.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public ApplicantTrackingCreateNewApplicationRequest zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * The zip code or postal code of the candidate.
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The zip code or postal code of the candidate.")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public ApplicantTrackingCreateNewApplicationRequest country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The country of the candidate. Accepts country name or ISO code.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The country of the candidate. Accepts country name or ISO code.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public ApplicantTrackingCreateNewApplicationRequest linkedinUrl(String linkedinUrl) {
    
    
    
    
    this.linkedinUrl = linkedinUrl;
    return this;
  }

   /**
   * The LinkedIn profile url of the candidate.
   * @return linkedinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The LinkedIn profile url of the candidate.")

  public String getLinkedinUrl() {
    return linkedinUrl;
  }


  public void setLinkedinUrl(String linkedinUrl) {
    
    
    
    this.linkedinUrl = linkedinUrl;
  }


  public ApplicantTrackingCreateNewApplicationRequest dateAvailable(String dateAvailable) {
    
    
    
    
    this.dateAvailable = dateAvailable;
    return this;
  }

   /**
   * The available start date of the candidate with the format YYYY-MM-DD.
   * @return dateAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The available start date of the candidate with the format YYYY-MM-DD.")

  public String getDateAvailable() {
    return dateAvailable;
  }


  public void setDateAvailable(String dateAvailable) {
    
    
    
    this.dateAvailable = dateAvailable;
  }


  public ApplicantTrackingCreateNewApplicationRequest desiredSalary(String desiredSalary) {
    
    
    
    
    this.desiredSalary = desiredSalary;
    return this;
  }

   /**
   * The desired salary of the candidate.
   * @return desiredSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The desired salary of the candidate.")

  public String getDesiredSalary() {
    return desiredSalary;
  }


  public void setDesiredSalary(String desiredSalary) {
    
    
    
    this.desiredSalary = desiredSalary;
  }


  public ApplicantTrackingCreateNewApplicationRequest referredBy(String referredBy) {
    
    
    
    
    this.referredBy = referredBy;
    return this;
  }

   /**
   * The person or entity that referred the candidate.
   * @return referredBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The person or entity that referred the candidate.")

  public String getReferredBy() {
    return referredBy;
  }


  public void setReferredBy(String referredBy) {
    
    
    
    this.referredBy = referredBy;
  }


  public ApplicantTrackingCreateNewApplicationRequest websiteUrl(String websiteUrl) {
    
    
    
    
    this.websiteUrl = websiteUrl;
    return this;
  }

   /**
   * The personal website, blog, or online portfolio of the candidate.
   * @return websiteUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The personal website, blog, or online portfolio of the candidate.")

  public String getWebsiteUrl() {
    return websiteUrl;
  }


  public void setWebsiteUrl(String websiteUrl) {
    
    
    
    this.websiteUrl = websiteUrl;
  }


  public ApplicantTrackingCreateNewApplicationRequest highestEducation(HighestEducationEnum highestEducation) {
    
    
    
    
    this.highestEducation = highestEducation;
    return this;
  }

   /**
   * The highest completed education level of the candidate.
   * @return highestEducation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The highest completed education level of the candidate.")

  public HighestEducationEnum getHighestEducation() {
    return highestEducation;
  }


  public void setHighestEducation(HighestEducationEnum highestEducation) {
    
    
    
    this.highestEducation = highestEducation;
  }


  public ApplicantTrackingCreateNewApplicationRequest collegeName(String collegeName) {
    
    
    
    
    this.collegeName = collegeName;
    return this;
  }

   /**
   * The college or university of the candidate.
   * @return collegeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The college or university of the candidate.")

  public String getCollegeName() {
    return collegeName;
  }


  public void setCollegeName(String collegeName) {
    
    
    
    this.collegeName = collegeName;
  }


  public ApplicantTrackingCreateNewApplicationRequest references(String references) {
    
    
    
    
    this.references = references;
    return this;
  }

   /**
   * A list of references supplied by the candidate.
   * @return references
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of references supplied by the candidate.")

  public String getReferences() {
    return references;
  }


  public void setReferences(String references) {
    
    
    
    this.references = references;
  }


  public ApplicantTrackingCreateNewApplicationRequest resume(File resume) {
    
    
    
    
    this.resume = resume;
    return this;
  }

   /**
   * Resume of the candidate.
   * @return resume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Resume of the candidate.")

  public File getResume() {
    return resume;
  }


  public void setResume(File resume) {
    
    
    
    this.resume = resume;
  }


  public ApplicantTrackingCreateNewApplicationRequest coverLetter(File coverLetter) {
    
    
    
    
    this.coverLetter = coverLetter;
    return this;
  }

   /**
   * Cover letter of the candidate.
   * @return coverLetter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cover letter of the candidate.")

  public File getCoverLetter() {
    return coverLetter;
  }


  public void setCoverLetter(File coverLetter) {
    
    
    
    this.coverLetter = coverLetter;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantTrackingCreateNewApplicationRequest instance itself
   */
  public ApplicantTrackingCreateNewApplicationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest = (ApplicantTrackingCreateNewApplicationRequest) o;
    return Objects.equals(this.firstName, applicantTrackingCreateNewApplicationRequest.firstName) &&
        Objects.equals(this.lastName, applicantTrackingCreateNewApplicationRequest.lastName) &&
        Objects.equals(this.email, applicantTrackingCreateNewApplicationRequest.email) &&
        Objects.equals(this.phoneNumber, applicantTrackingCreateNewApplicationRequest.phoneNumber) &&
        Objects.equals(this.source, applicantTrackingCreateNewApplicationRequest.source) &&
        Objects.equals(this.jobId, applicantTrackingCreateNewApplicationRequest.jobId) &&
        Objects.equals(this.address, applicantTrackingCreateNewApplicationRequest.address) &&
        Objects.equals(this.city, applicantTrackingCreateNewApplicationRequest.city) &&
        Objects.equals(this.state, applicantTrackingCreateNewApplicationRequest.state) &&
        Objects.equals(this.zip, applicantTrackingCreateNewApplicationRequest.zip) &&
        Objects.equals(this.country, applicantTrackingCreateNewApplicationRequest.country) &&
        Objects.equals(this.linkedinUrl, applicantTrackingCreateNewApplicationRequest.linkedinUrl) &&
        Objects.equals(this.dateAvailable, applicantTrackingCreateNewApplicationRequest.dateAvailable) &&
        Objects.equals(this.desiredSalary, applicantTrackingCreateNewApplicationRequest.desiredSalary) &&
        Objects.equals(this.referredBy, applicantTrackingCreateNewApplicationRequest.referredBy) &&
        Objects.equals(this.websiteUrl, applicantTrackingCreateNewApplicationRequest.websiteUrl) &&
        Objects.equals(this.highestEducation, applicantTrackingCreateNewApplicationRequest.highestEducation) &&
        Objects.equals(this.collegeName, applicantTrackingCreateNewApplicationRequest.collegeName) &&
        Objects.equals(this.references, applicantTrackingCreateNewApplicationRequest.references) &&
        Objects.equals(this.resume, applicantTrackingCreateNewApplicationRequest.resume) &&
        Objects.equals(this.coverLetter, applicantTrackingCreateNewApplicationRequest.coverLetter)&&
        Objects.equals(this.additionalProperties, applicantTrackingCreateNewApplicationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, email, phoneNumber, source, jobId, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantTrackingCreateNewApplicationRequest {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    linkedinUrl: ").append(toIndentedString(linkedinUrl)).append("\n");
    sb.append("    dateAvailable: ").append(toIndentedString(dateAvailable)).append("\n");
    sb.append("    desiredSalary: ").append(toIndentedString(desiredSalary)).append("\n");
    sb.append("    referredBy: ").append(toIndentedString(referredBy)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    highestEducation: ").append(toIndentedString(highestEducation)).append("\n");
    sb.append("    collegeName: ").append(toIndentedString(collegeName)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    resume: ").append(toIndentedString(resume)).append("\n");
    sb.append("    coverLetter: ").append(toIndentedString(coverLetter)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("email");
    openapiFields.add("phoneNumber");
    openapiFields.add("source");
    openapiFields.add("jobId");
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zip");
    openapiFields.add("country");
    openapiFields.add("linkedinUrl");
    openapiFields.add("dateAvailable");
    openapiFields.add("desiredSalary");
    openapiFields.add("referredBy");
    openapiFields.add("websiteUrl");
    openapiFields.add("highestEducation");
    openapiFields.add("collegeName");
    openapiFields.add("references");
    openapiFields.add("resume");
    openapiFields.add("coverLetter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("jobId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantTrackingCreateNewApplicationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantTrackingCreateNewApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantTrackingCreateNewApplicationRequest is not found in the empty JSON string", ApplicantTrackingCreateNewApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantTrackingCreateNewApplicationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("linkedinUrl") != null && !jsonObj.get("linkedinUrl").isJsonNull()) && !jsonObj.get("linkedinUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedinUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedinUrl").toString()));
      }
      if ((jsonObj.get("dateAvailable") != null && !jsonObj.get("dateAvailable").isJsonNull()) && !jsonObj.get("dateAvailable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateAvailable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateAvailable").toString()));
      }
      if ((jsonObj.get("desiredSalary") != null && !jsonObj.get("desiredSalary").isJsonNull()) && !jsonObj.get("desiredSalary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desiredSalary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desiredSalary").toString()));
      }
      if ((jsonObj.get("referredBy") != null && !jsonObj.get("referredBy").isJsonNull()) && !jsonObj.get("referredBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referredBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referredBy").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
      if ((jsonObj.get("highestEducation") != null && !jsonObj.get("highestEducation").isJsonNull()) && !jsonObj.get("highestEducation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestEducation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestEducation").toString()));
      }
      if ((jsonObj.get("collegeName") != null && !jsonObj.get("collegeName").isJsonNull()) && !jsonObj.get("collegeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collegeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collegeName").toString()));
      }
      if ((jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) && !jsonObj.get("references").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `references` to be a primitive type in the JSON string but got `%s`", jsonObj.get("references").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantTrackingCreateNewApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantTrackingCreateNewApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantTrackingCreateNewApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantTrackingCreateNewApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantTrackingCreateNewApplicationRequest>() {
           @Override
           public void write(JsonWriter out, ApplicantTrackingCreateNewApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantTrackingCreateNewApplicationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantTrackingCreateNewApplicationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantTrackingCreateNewApplicationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantTrackingCreateNewApplicationRequest
  * @throws IOException if the JSON string is invalid with respect to ApplicantTrackingCreateNewApplicationRequest
  */
  public static ApplicantTrackingCreateNewApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantTrackingCreateNewApplicationRequest.class);
  }

 /**
  * Convert an instance of ApplicantTrackingCreateNewApplicationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

