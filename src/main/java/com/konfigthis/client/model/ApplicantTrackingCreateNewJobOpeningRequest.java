/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantTrackingCreateNewJobOpeningRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantTrackingCreateNewJobOpeningRequest {
  public static final String SERIALIZED_NAME_POSTING_TITLE = "postingTitle";
  @SerializedName(SERIALIZED_NAME_POSTING_TITLE)
  private String postingTitle;

  /**
   * The status of the job opening.
   */
  @JsonAdapter(JobStatusEnum.Adapter.class)
 public enum JobStatusEnum {
    DRAFT("Draft"),
    
    OPEN("Open"),
    
    ON_HOLD("On Hold"),
    
    FILLED("Filled"),
    
    CANCELED("Canceled");

    private String value;

    JobStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobStatusEnum fromValue(String value) {
      for (JobStatusEnum b : JobStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_JOB_STATUS = "jobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatusEnum jobStatus;

  public static final String SERIALIZED_NAME_HIRING_LEAD = "hiringLead";
  @SerializedName(SERIALIZED_NAME_HIRING_LEAD)
  private Integer hiringLead;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE = "employmentType";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE)
  private String employmentType;

  /**
   * The minimum experience level that qualifies a candidate for the job opening.
   */
  @JsonAdapter(MinimumExperienceEnum.Adapter.class)
 public enum MinimumExperienceEnum {
    ENTRY_LEVEL("Entry-level"),
    
    MID_LEVEL("Mid-level"),
    
    EXPERIENCED("Experienced"),
    
    MANAGER_SUPERVISOR("Manager/Supervisor"),
    
    SENIOR_MANAGER_SUPERVISOR_("Senior Manager/Supervisor'"),
    
    EXECUTIVE("Executive"),
    
    SENIOR_EXECUTIVE("Senior Executive");

    private String value;

    MinimumExperienceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumExperienceEnum fromValue(String value) {
      for (MinimumExperienceEnum b : MinimumExperienceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumExperienceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumExperienceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumExperienceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumExperienceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_EXPERIENCE = "minimumExperience";
  @SerializedName(SERIALIZED_NAME_MINIMUM_EXPERIENCE)
  private MinimumExperienceEnum minimumExperience;

  public static final String SERIALIZED_NAME_COMPENSATION = "compensation";
  @SerializedName(SERIALIZED_NAME_COMPENSATION)
  private String compensation;

  public static final String SERIALIZED_NAME_JOB_LOCATION = "jobLocation";
  @SerializedName(SERIALIZED_NAME_JOB_LOCATION)
  private Integer jobLocation;

  public static final String SERIALIZED_NAME_JOB_DESCRIPTION = "jobDescription";
  @SerializedName(SERIALIZED_NAME_JOB_DESCRIPTION)
  private String jobDescription;

  /**
   * Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionResumeEnum.Adapter.class)
 public enum ApplicationQuestionResumeEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionResumeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionResumeEnum fromValue(String value) {
      for (ApplicationQuestionResumeEnum b : ApplicationQuestionResumeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionResumeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionResumeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionResumeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionResumeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_RESUME = "applicationQuestionResume";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_RESUME)
  private ApplicationQuestionResumeEnum applicationQuestionResume;

  /**
   * Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionAddressEnum.Adapter.class)
 public enum ApplicationQuestionAddressEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionAddressEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionAddressEnum fromValue(String value) {
      for (ApplicationQuestionAddressEnum b : ApplicationQuestionAddressEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionAddressEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionAddressEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionAddressEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionAddressEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_ADDRESS = "applicationQuestionAddress";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_ADDRESS)
  private ApplicationQuestionAddressEnum applicationQuestionAddress;

  /**
   * Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionLinkedinUrlEnum.Adapter.class)
 public enum ApplicationQuestionLinkedinUrlEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionLinkedinUrlEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionLinkedinUrlEnum fromValue(String value) {
      for (ApplicationQuestionLinkedinUrlEnum b : ApplicationQuestionLinkedinUrlEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionLinkedinUrlEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionLinkedinUrlEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionLinkedinUrlEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionLinkedinUrlEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_LINKEDIN_URL = "applicationQuestionLinkedinUrl";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_LINKEDIN_URL)
  private ApplicationQuestionLinkedinUrlEnum applicationQuestionLinkedinUrl;

  /**
   * Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionDateAvailableEnum.Adapter.class)
 public enum ApplicationQuestionDateAvailableEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionDateAvailableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionDateAvailableEnum fromValue(String value) {
      for (ApplicationQuestionDateAvailableEnum b : ApplicationQuestionDateAvailableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionDateAvailableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionDateAvailableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionDateAvailableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionDateAvailableEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_DATE_AVAILABLE = "applicationQuestionDateAvailable";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_DATE_AVAILABLE)
  private ApplicationQuestionDateAvailableEnum applicationQuestionDateAvailable;

  /**
   * Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionDesiredSalaryEnum.Adapter.class)
 public enum ApplicationQuestionDesiredSalaryEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionDesiredSalaryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionDesiredSalaryEnum fromValue(String value) {
      for (ApplicationQuestionDesiredSalaryEnum b : ApplicationQuestionDesiredSalaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionDesiredSalaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionDesiredSalaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionDesiredSalaryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionDesiredSalaryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_DESIRED_SALARY = "applicationQuestionDesiredSalary";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_DESIRED_SALARY)
  private ApplicationQuestionDesiredSalaryEnum applicationQuestionDesiredSalary;

  /**
   * Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionCoverLetterEnum.Adapter.class)
 public enum ApplicationQuestionCoverLetterEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionCoverLetterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionCoverLetterEnum fromValue(String value) {
      for (ApplicationQuestionCoverLetterEnum b : ApplicationQuestionCoverLetterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionCoverLetterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionCoverLetterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionCoverLetterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionCoverLetterEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_COVER_LETTER = "applicationQuestionCoverLetter";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_COVER_LETTER)
  private ApplicationQuestionCoverLetterEnum applicationQuestionCoverLetter;

  /**
   * Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionReferredByEnum.Adapter.class)
 public enum ApplicationQuestionReferredByEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionReferredByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionReferredByEnum fromValue(String value) {
      for (ApplicationQuestionReferredByEnum b : ApplicationQuestionReferredByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionReferredByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionReferredByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionReferredByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionReferredByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_REFERRED_BY = "applicationQuestionReferredBy";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_REFERRED_BY)
  private ApplicationQuestionReferredByEnum applicationQuestionReferredBy;

  /**
   * Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionWebsiteUrlEnum.Adapter.class)
 public enum ApplicationQuestionWebsiteUrlEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionWebsiteUrlEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionWebsiteUrlEnum fromValue(String value) {
      for (ApplicationQuestionWebsiteUrlEnum b : ApplicationQuestionWebsiteUrlEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionWebsiteUrlEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionWebsiteUrlEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionWebsiteUrlEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionWebsiteUrlEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_WEBSITE_URL = "applicationQuestionWebsiteUrl";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_WEBSITE_URL)
  private ApplicationQuestionWebsiteUrlEnum applicationQuestionWebsiteUrl;

  /**
   * Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionHighestEducationEnum.Adapter.class)
 public enum ApplicationQuestionHighestEducationEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionHighestEducationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionHighestEducationEnum fromValue(String value) {
      for (ApplicationQuestionHighestEducationEnum b : ApplicationQuestionHighestEducationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionHighestEducationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionHighestEducationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionHighestEducationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionHighestEducationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_HIGHEST_EDUCATION = "applicationQuestionHighestEducation";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_HIGHEST_EDUCATION)
  private ApplicationQuestionHighestEducationEnum applicationQuestionHighestEducation;

  /**
   * Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionCollegeEnum.Adapter.class)
 public enum ApplicationQuestionCollegeEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionCollegeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionCollegeEnum fromValue(String value) {
      for (ApplicationQuestionCollegeEnum b : ApplicationQuestionCollegeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionCollegeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionCollegeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionCollegeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionCollegeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_COLLEGE = "applicationQuestionCollege";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_COLLEGE)
  private ApplicationQuestionCollegeEnum applicationQuestionCollege;

  /**
   * Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).
   */
  @JsonAdapter(ApplicationQuestionReferencesEnum.Adapter.class)
 public enum ApplicationQuestionReferencesEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    REQUIRED("Required");

    private String value;

    ApplicationQuestionReferencesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationQuestionReferencesEnum fromValue(String value) {
      for (ApplicationQuestionReferencesEnum b : ApplicationQuestionReferencesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationQuestionReferencesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationQuestionReferencesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationQuestionReferencesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationQuestionReferencesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_QUESTION_REFERENCES = "applicationQuestionReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_QUESTION_REFERENCES)
  private ApplicationQuestionReferencesEnum applicationQuestionReferences;

  public static final String SERIALIZED_NAME_INTERNAL_JOB_CODE = "internalJobCode";
  @SerializedName(SERIALIZED_NAME_INTERNAL_JOB_CODE)
  private String internalJobCode;

  public ApplicantTrackingCreateNewJobOpeningRequest() {
  }

  public ApplicantTrackingCreateNewJobOpeningRequest postingTitle(String postingTitle) {
    
    
    
    
    this.postingTitle = postingTitle;
    return this;
  }

   /**
   * The posting title of the job opening.
   * @return postingTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The posting title of the job opening.")

  public String getPostingTitle() {
    return postingTitle;
  }


  public void setPostingTitle(String postingTitle) {
    
    
    
    this.postingTitle = postingTitle;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest jobStatus(JobStatusEnum jobStatus) {
    
    
    
    
    this.jobStatus = jobStatus;
    return this;
  }

   /**
   * The status of the job opening.
   * @return jobStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the job opening.")

  public JobStatusEnum getJobStatus() {
    return jobStatus;
  }


  public void setJobStatus(JobStatusEnum jobStatus) {
    
    
    
    this.jobStatus = jobStatus;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest hiringLead(Integer hiringLead) {
    
    
    
    
    this.hiringLead = hiringLead;
    return this;
  }

   /**
   * The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening.
   * @return hiringLead
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening.")

  public Integer getHiringLead() {
    return hiringLead;
  }


  public void setHiringLead(Integer hiringLead) {
    
    
    
    this.hiringLead = hiringLead;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * The department of the job opening.
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The department of the job opening.")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest employmentType(String employmentType) {
    
    
    
    
    this.employmentType = employmentType;
    return this;
  }

   /**
   * The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc.
   * @return employmentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc.")

  public String getEmploymentType() {
    return employmentType;
  }


  public void setEmploymentType(String employmentType) {
    
    
    
    this.employmentType = employmentType;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest minimumExperience(MinimumExperienceEnum minimumExperience) {
    
    
    
    
    this.minimumExperience = minimumExperience;
    return this;
  }

   /**
   * The minimum experience level that qualifies a candidate for the job opening.
   * @return minimumExperience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum experience level that qualifies a candidate for the job opening.")

  public MinimumExperienceEnum getMinimumExperience() {
    return minimumExperience;
  }


  public void setMinimumExperience(MinimumExperienceEnum minimumExperience) {
    
    
    
    this.minimumExperience = minimumExperience;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest compensation(String compensation) {
    
    
    
    
    this.compensation = compensation;
    return this;
  }

   /**
   * The pay rate or compensation for the job opening.
   * @return compensation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The pay rate or compensation for the job opening.")

  public String getCompensation() {
    return compensation;
  }


  public void setCompensation(String compensation) {
    
    
    
    this.compensation = compensation;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest jobLocation(Integer jobLocation) {
    
    
    
    
    this.jobLocation = jobLocation;
    return this;
  }

   /**
   * The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location.
   * @return jobLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location.")

  public Integer getJobLocation() {
    return jobLocation;
  }


  public void setJobLocation(Integer jobLocation) {
    
    
    
    this.jobLocation = jobLocation;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest jobDescription(String jobDescription) {
    
    
    
    
    this.jobDescription = jobDescription;
    return this;
  }

   /**
   * The long-form text description of the job opening.
   * @return jobDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The long-form text description of the job opening.")

  public String getJobDescription() {
    return jobDescription;
  }


  public void setJobDescription(String jobDescription) {
    
    
    
    this.jobDescription = jobDescription;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionResume(ApplicationQuestionResumeEnum applicationQuestionResume) {
    
    
    
    
    this.applicationQuestionResume = applicationQuestionResume;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).
   * @return applicationQuestionResume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).")

  public ApplicationQuestionResumeEnum getApplicationQuestionResume() {
    return applicationQuestionResume;
  }


  public void setApplicationQuestionResume(ApplicationQuestionResumeEnum applicationQuestionResume) {
    
    
    
    this.applicationQuestionResume = applicationQuestionResume;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionAddress(ApplicationQuestionAddressEnum applicationQuestionAddress) {
    
    
    
    
    this.applicationQuestionAddress = applicationQuestionAddress;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).
   * @return applicationQuestionAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).")

  public ApplicationQuestionAddressEnum getApplicationQuestionAddress() {
    return applicationQuestionAddress;
  }


  public void setApplicationQuestionAddress(ApplicationQuestionAddressEnum applicationQuestionAddress) {
    
    
    
    this.applicationQuestionAddress = applicationQuestionAddress;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionLinkedinUrl(ApplicationQuestionLinkedinUrlEnum applicationQuestionLinkedinUrl) {
    
    
    
    
    this.applicationQuestionLinkedinUrl = applicationQuestionLinkedinUrl;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).
   * @return applicationQuestionLinkedinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).")

  public ApplicationQuestionLinkedinUrlEnum getApplicationQuestionLinkedinUrl() {
    return applicationQuestionLinkedinUrl;
  }


  public void setApplicationQuestionLinkedinUrl(ApplicationQuestionLinkedinUrlEnum applicationQuestionLinkedinUrl) {
    
    
    
    this.applicationQuestionLinkedinUrl = applicationQuestionLinkedinUrl;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionDateAvailable(ApplicationQuestionDateAvailableEnum applicationQuestionDateAvailable) {
    
    
    
    
    this.applicationQuestionDateAvailable = applicationQuestionDateAvailable;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).
   * @return applicationQuestionDateAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).")

  public ApplicationQuestionDateAvailableEnum getApplicationQuestionDateAvailable() {
    return applicationQuestionDateAvailable;
  }


  public void setApplicationQuestionDateAvailable(ApplicationQuestionDateAvailableEnum applicationQuestionDateAvailable) {
    
    
    
    this.applicationQuestionDateAvailable = applicationQuestionDateAvailable;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionDesiredSalary(ApplicationQuestionDesiredSalaryEnum applicationQuestionDesiredSalary) {
    
    
    
    
    this.applicationQuestionDesiredSalary = applicationQuestionDesiredSalary;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).
   * @return applicationQuestionDesiredSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).")

  public ApplicationQuestionDesiredSalaryEnum getApplicationQuestionDesiredSalary() {
    return applicationQuestionDesiredSalary;
  }


  public void setApplicationQuestionDesiredSalary(ApplicationQuestionDesiredSalaryEnum applicationQuestionDesiredSalary) {
    
    
    
    this.applicationQuestionDesiredSalary = applicationQuestionDesiredSalary;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionCoverLetter(ApplicationQuestionCoverLetterEnum applicationQuestionCoverLetter) {
    
    
    
    
    this.applicationQuestionCoverLetter = applicationQuestionCoverLetter;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).
   * @return applicationQuestionCoverLetter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).")

  public ApplicationQuestionCoverLetterEnum getApplicationQuestionCoverLetter() {
    return applicationQuestionCoverLetter;
  }


  public void setApplicationQuestionCoverLetter(ApplicationQuestionCoverLetterEnum applicationQuestionCoverLetter) {
    
    
    
    this.applicationQuestionCoverLetter = applicationQuestionCoverLetter;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionReferredBy(ApplicationQuestionReferredByEnum applicationQuestionReferredBy) {
    
    
    
    
    this.applicationQuestionReferredBy = applicationQuestionReferredBy;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).
   * @return applicationQuestionReferredBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).")

  public ApplicationQuestionReferredByEnum getApplicationQuestionReferredBy() {
    return applicationQuestionReferredBy;
  }


  public void setApplicationQuestionReferredBy(ApplicationQuestionReferredByEnum applicationQuestionReferredBy) {
    
    
    
    this.applicationQuestionReferredBy = applicationQuestionReferredBy;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionWebsiteUrl(ApplicationQuestionWebsiteUrlEnum applicationQuestionWebsiteUrl) {
    
    
    
    
    this.applicationQuestionWebsiteUrl = applicationQuestionWebsiteUrl;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).
   * @return applicationQuestionWebsiteUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).")

  public ApplicationQuestionWebsiteUrlEnum getApplicationQuestionWebsiteUrl() {
    return applicationQuestionWebsiteUrl;
  }


  public void setApplicationQuestionWebsiteUrl(ApplicationQuestionWebsiteUrlEnum applicationQuestionWebsiteUrl) {
    
    
    
    this.applicationQuestionWebsiteUrl = applicationQuestionWebsiteUrl;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionHighestEducation(ApplicationQuestionHighestEducationEnum applicationQuestionHighestEducation) {
    
    
    
    
    this.applicationQuestionHighestEducation = applicationQuestionHighestEducation;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).
   * @return applicationQuestionHighestEducation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).")

  public ApplicationQuestionHighestEducationEnum getApplicationQuestionHighestEducation() {
    return applicationQuestionHighestEducation;
  }


  public void setApplicationQuestionHighestEducation(ApplicationQuestionHighestEducationEnum applicationQuestionHighestEducation) {
    
    
    
    this.applicationQuestionHighestEducation = applicationQuestionHighestEducation;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionCollege(ApplicationQuestionCollegeEnum applicationQuestionCollege) {
    
    
    
    
    this.applicationQuestionCollege = applicationQuestionCollege;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).
   * @return applicationQuestionCollege
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).")

  public ApplicationQuestionCollegeEnum getApplicationQuestionCollege() {
    return applicationQuestionCollege;
  }


  public void setApplicationQuestionCollege(ApplicationQuestionCollegeEnum applicationQuestionCollege) {
    
    
    
    this.applicationQuestionCollege = applicationQuestionCollege;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest applicationQuestionReferences(ApplicationQuestionReferencesEnum applicationQuestionReferences) {
    
    
    
    
    this.applicationQuestionReferences = applicationQuestionReferences;
    return this;
  }

   /**
   * Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).
   * @return applicationQuestionReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).")

  public ApplicationQuestionReferencesEnum getApplicationQuestionReferences() {
    return applicationQuestionReferences;
  }


  public void setApplicationQuestionReferences(ApplicationQuestionReferencesEnum applicationQuestionReferences) {
    
    
    
    this.applicationQuestionReferences = applicationQuestionReferences;
  }


  public ApplicantTrackingCreateNewJobOpeningRequest internalJobCode(String internalJobCode) {
    
    
    
    
    this.internalJobCode = internalJobCode;
    return this;
  }

   /**
   * The internal job code for the job opening.
   * @return internalJobCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The internal job code for the job opening.")

  public String getInternalJobCode() {
    return internalJobCode;
  }


  public void setInternalJobCode(String internalJobCode) {
    
    
    
    this.internalJobCode = internalJobCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantTrackingCreateNewJobOpeningRequest instance itself
   */
  public ApplicantTrackingCreateNewJobOpeningRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest = (ApplicantTrackingCreateNewJobOpeningRequest) o;
    return Objects.equals(this.postingTitle, applicantTrackingCreateNewJobOpeningRequest.postingTitle) &&
        Objects.equals(this.jobStatus, applicantTrackingCreateNewJobOpeningRequest.jobStatus) &&
        Objects.equals(this.hiringLead, applicantTrackingCreateNewJobOpeningRequest.hiringLead) &&
        Objects.equals(this.department, applicantTrackingCreateNewJobOpeningRequest.department) &&
        Objects.equals(this.employmentType, applicantTrackingCreateNewJobOpeningRequest.employmentType) &&
        Objects.equals(this.minimumExperience, applicantTrackingCreateNewJobOpeningRequest.minimumExperience) &&
        Objects.equals(this.compensation, applicantTrackingCreateNewJobOpeningRequest.compensation) &&
        Objects.equals(this.jobLocation, applicantTrackingCreateNewJobOpeningRequest.jobLocation) &&
        Objects.equals(this.jobDescription, applicantTrackingCreateNewJobOpeningRequest.jobDescription) &&
        Objects.equals(this.applicationQuestionResume, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionResume) &&
        Objects.equals(this.applicationQuestionAddress, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionAddress) &&
        Objects.equals(this.applicationQuestionLinkedinUrl, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionLinkedinUrl) &&
        Objects.equals(this.applicationQuestionDateAvailable, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionDateAvailable) &&
        Objects.equals(this.applicationQuestionDesiredSalary, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionDesiredSalary) &&
        Objects.equals(this.applicationQuestionCoverLetter, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionCoverLetter) &&
        Objects.equals(this.applicationQuestionReferredBy, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionReferredBy) &&
        Objects.equals(this.applicationQuestionWebsiteUrl, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionWebsiteUrl) &&
        Objects.equals(this.applicationQuestionHighestEducation, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionHighestEducation) &&
        Objects.equals(this.applicationQuestionCollege, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionCollege) &&
        Objects.equals(this.applicationQuestionReferences, applicantTrackingCreateNewJobOpeningRequest.applicationQuestionReferences) &&
        Objects.equals(this.internalJobCode, applicantTrackingCreateNewJobOpeningRequest.internalJobCode)&&
        Objects.equals(this.additionalProperties, applicantTrackingCreateNewJobOpeningRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postingTitle, jobStatus, hiringLead, department, employmentType, minimumExperience, compensation, jobLocation, jobDescription, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantTrackingCreateNewJobOpeningRequest {\n");
    sb.append("    postingTitle: ").append(toIndentedString(postingTitle)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    hiringLead: ").append(toIndentedString(hiringLead)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    employmentType: ").append(toIndentedString(employmentType)).append("\n");
    sb.append("    minimumExperience: ").append(toIndentedString(minimumExperience)).append("\n");
    sb.append("    compensation: ").append(toIndentedString(compensation)).append("\n");
    sb.append("    jobLocation: ").append(toIndentedString(jobLocation)).append("\n");
    sb.append("    jobDescription: ").append(toIndentedString(jobDescription)).append("\n");
    sb.append("    applicationQuestionResume: ").append(toIndentedString(applicationQuestionResume)).append("\n");
    sb.append("    applicationQuestionAddress: ").append(toIndentedString(applicationQuestionAddress)).append("\n");
    sb.append("    applicationQuestionLinkedinUrl: ").append(toIndentedString(applicationQuestionLinkedinUrl)).append("\n");
    sb.append("    applicationQuestionDateAvailable: ").append(toIndentedString(applicationQuestionDateAvailable)).append("\n");
    sb.append("    applicationQuestionDesiredSalary: ").append(toIndentedString(applicationQuestionDesiredSalary)).append("\n");
    sb.append("    applicationQuestionCoverLetter: ").append(toIndentedString(applicationQuestionCoverLetter)).append("\n");
    sb.append("    applicationQuestionReferredBy: ").append(toIndentedString(applicationQuestionReferredBy)).append("\n");
    sb.append("    applicationQuestionWebsiteUrl: ").append(toIndentedString(applicationQuestionWebsiteUrl)).append("\n");
    sb.append("    applicationQuestionHighestEducation: ").append(toIndentedString(applicationQuestionHighestEducation)).append("\n");
    sb.append("    applicationQuestionCollege: ").append(toIndentedString(applicationQuestionCollege)).append("\n");
    sb.append("    applicationQuestionReferences: ").append(toIndentedString(applicationQuestionReferences)).append("\n");
    sb.append("    internalJobCode: ").append(toIndentedString(internalJobCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("postingTitle");
    openapiFields.add("jobStatus");
    openapiFields.add("hiringLead");
    openapiFields.add("department");
    openapiFields.add("employmentType");
    openapiFields.add("minimumExperience");
    openapiFields.add("compensation");
    openapiFields.add("jobLocation");
    openapiFields.add("jobDescription");
    openapiFields.add("applicationQuestionResume");
    openapiFields.add("applicationQuestionAddress");
    openapiFields.add("applicationQuestionLinkedinUrl");
    openapiFields.add("applicationQuestionDateAvailable");
    openapiFields.add("applicationQuestionDesiredSalary");
    openapiFields.add("applicationQuestionCoverLetter");
    openapiFields.add("applicationQuestionReferredBy");
    openapiFields.add("applicationQuestionWebsiteUrl");
    openapiFields.add("applicationQuestionHighestEducation");
    openapiFields.add("applicationQuestionCollege");
    openapiFields.add("applicationQuestionReferences");
    openapiFields.add("internalJobCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("postingTitle");
    openapiRequiredFields.add("jobStatus");
    openapiRequiredFields.add("hiringLead");
    openapiRequiredFields.add("employmentType");
    openapiRequiredFields.add("jobDescription");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantTrackingCreateNewJobOpeningRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantTrackingCreateNewJobOpeningRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantTrackingCreateNewJobOpeningRequest is not found in the empty JSON string", ApplicantTrackingCreateNewJobOpeningRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantTrackingCreateNewJobOpeningRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("postingTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingTitle").toString()));
      }
      if (!jsonObj.get("jobStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobStatus").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (!jsonObj.get("employmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentType").toString()));
      }
      if ((jsonObj.get("minimumExperience") != null && !jsonObj.get("minimumExperience").isJsonNull()) && !jsonObj.get("minimumExperience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumExperience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumExperience").toString()));
      }
      if ((jsonObj.get("compensation") != null && !jsonObj.get("compensation").isJsonNull()) && !jsonObj.get("compensation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compensation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compensation").toString()));
      }
      if (!jsonObj.get("jobDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobDescription").toString()));
      }
      if ((jsonObj.get("applicationQuestionResume") != null && !jsonObj.get("applicationQuestionResume").isJsonNull()) && !jsonObj.get("applicationQuestionResume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionResume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionResume").toString()));
      }
      if ((jsonObj.get("applicationQuestionAddress") != null && !jsonObj.get("applicationQuestionAddress").isJsonNull()) && !jsonObj.get("applicationQuestionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionAddress").toString()));
      }
      if ((jsonObj.get("applicationQuestionLinkedinUrl") != null && !jsonObj.get("applicationQuestionLinkedinUrl").isJsonNull()) && !jsonObj.get("applicationQuestionLinkedinUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionLinkedinUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionLinkedinUrl").toString()));
      }
      if ((jsonObj.get("applicationQuestionDateAvailable") != null && !jsonObj.get("applicationQuestionDateAvailable").isJsonNull()) && !jsonObj.get("applicationQuestionDateAvailable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionDateAvailable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionDateAvailable").toString()));
      }
      if ((jsonObj.get("applicationQuestionDesiredSalary") != null && !jsonObj.get("applicationQuestionDesiredSalary").isJsonNull()) && !jsonObj.get("applicationQuestionDesiredSalary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionDesiredSalary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionDesiredSalary").toString()));
      }
      if ((jsonObj.get("applicationQuestionCoverLetter") != null && !jsonObj.get("applicationQuestionCoverLetter").isJsonNull()) && !jsonObj.get("applicationQuestionCoverLetter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionCoverLetter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionCoverLetter").toString()));
      }
      if ((jsonObj.get("applicationQuestionReferredBy") != null && !jsonObj.get("applicationQuestionReferredBy").isJsonNull()) && !jsonObj.get("applicationQuestionReferredBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionReferredBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionReferredBy").toString()));
      }
      if ((jsonObj.get("applicationQuestionWebsiteUrl") != null && !jsonObj.get("applicationQuestionWebsiteUrl").isJsonNull()) && !jsonObj.get("applicationQuestionWebsiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionWebsiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionWebsiteUrl").toString()));
      }
      if ((jsonObj.get("applicationQuestionHighestEducation") != null && !jsonObj.get("applicationQuestionHighestEducation").isJsonNull()) && !jsonObj.get("applicationQuestionHighestEducation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionHighestEducation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionHighestEducation").toString()));
      }
      if ((jsonObj.get("applicationQuestionCollege") != null && !jsonObj.get("applicationQuestionCollege").isJsonNull()) && !jsonObj.get("applicationQuestionCollege").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionCollege` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionCollege").toString()));
      }
      if ((jsonObj.get("applicationQuestionReferences") != null && !jsonObj.get("applicationQuestionReferences").isJsonNull()) && !jsonObj.get("applicationQuestionReferences").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationQuestionReferences` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationQuestionReferences").toString()));
      }
      if ((jsonObj.get("internalJobCode") != null && !jsonObj.get("internalJobCode").isJsonNull()) && !jsonObj.get("internalJobCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalJobCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalJobCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantTrackingCreateNewJobOpeningRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantTrackingCreateNewJobOpeningRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantTrackingCreateNewJobOpeningRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantTrackingCreateNewJobOpeningRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantTrackingCreateNewJobOpeningRequest>() {
           @Override
           public void write(JsonWriter out, ApplicantTrackingCreateNewJobOpeningRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantTrackingCreateNewJobOpeningRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantTrackingCreateNewJobOpeningRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantTrackingCreateNewJobOpeningRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantTrackingCreateNewJobOpeningRequest
  * @throws IOException if the JSON string is invalid with respect to ApplicantTrackingCreateNewJobOpeningRequest
  */
  public static ApplicantTrackingCreateNewJobOpeningRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantTrackingCreateNewJobOpeningRequest.class);
  }

 /**
  * Convert an instance of ApplicantTrackingCreateNewJobOpeningRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

