/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TimeTrackingPrivateBetaAddEditClockEntriesRequest;
import com.konfigthis.client.model.TimeTrackingPrivateBetaAddEditClockEntriesRequestEntriesInner;
import com.konfigthis.client.model.TimeTrackingPrivateBetaAddEditHourEntriesRequest;
import com.konfigthis.client.model.TimeTrackingPrivateBetaAddEditHourEntriesRequestHoursInner;
import com.konfigthis.client.model.TimeTrackingPrivateBetaAddTimesheetClockInRequest;
import com.konfigthis.client.model.TimeTrackingPrivateBetaCreateProjectTaskRequest;
import com.konfigthis.client.model.TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner;
import com.konfigthis.client.model.TimeTrackingPrivateBetaDeleteHourEntriesRequest;
import com.konfigthis.client.model.TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest;
import com.konfigthis.client.model.TimeTrackingProjectWithTasks;
import com.konfigthis.client.model.TimeTrackingProjectWithTasksAndEmployeeIds;
import com.konfigthis.client.model.TimesheetEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeTrackingPrivateBetaApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingPrivateBetaApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingPrivateBetaApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addClockOutCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_out"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClockOutValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addClockOut(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addClockOut(Async)");
        }

        return addClockOutCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<TimesheetEntry> addClockOutWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = addClockOutValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<TimesheetEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addClockOutAsync(String companyDomain, String employeeId, final ApiCallback<TimesheetEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClockOutValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<TimesheetEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddClockOutRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private AddClockOutRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for addClockOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addClockOutCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute addClockOut request
         * @return TimesheetEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetEntry execute() throws ApiException {
            ApiResponse<TimesheetEntry> localVarResp = addClockOutWithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addClockOut request with HTTP info returned
         * @return ApiResponse&lt;TimesheetEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetEntry> executeWithHttpInfo() throws ApiException {
            return addClockOutWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute addClockOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetEntry> _callback) throws ApiException {
            return addClockOutAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Add Timesheet Clock-Out Entry
     * Clock out an employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to clock out. (required)
     * @return AddClockOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
     </table>
     */
    public AddClockOutRequestBuilder addClockOut(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddClockOutRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call addEditClockEntriesCall(String companyDomain, TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingPrivateBetaAddEditClockEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/clock_entries/store"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEditClockEntriesValidateBeforeCall(String companyDomain, TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEditClockEntries(Async)");
        }

        return addEditClockEntriesCall(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest, _callback);

    }


    private ApiResponse<List<TimesheetEntry>> addEditClockEntriesWithHttpInfo(String companyDomain, TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = addEditClockEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest, null);
        Type localVarReturnType = new TypeToken<List<TimesheetEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEditClockEntriesAsync(String companyDomain, TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest, final ApiCallback<List<TimesheetEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEditClockEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TimesheetEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEditClockEntriesRequestBuilder {
        private final List<TimeTrackingPrivateBetaAddEditClockEntriesRequestEntriesInner> entries;
        private final String companyDomain;

        private AddEditClockEntriesRequestBuilder(List<TimeTrackingPrivateBetaAddEditClockEntriesRequestEntriesInner> entries, String companyDomain) {
            this.entries = entries;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for addEditClockEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest = buildBodyParams();
            return addEditClockEntriesCall(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest, _callback);
        }

        private TimeTrackingPrivateBetaAddEditClockEntriesRequest buildBodyParams() {
            TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest = new TimeTrackingPrivateBetaAddEditClockEntriesRequest();
            timeTrackingPrivateBetaAddEditClockEntriesRequest.entries(this.entries);
            return timeTrackingPrivateBetaAddEditClockEntriesRequest;
        }

        /**
         * Execute addEditClockEntries request
         * @return List&lt;TimesheetEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public List<TimesheetEntry> execute() throws ApiException {
            TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest = buildBodyParams();
            ApiResponse<List<TimesheetEntry>> localVarResp = addEditClockEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEditClockEntries request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TimesheetEntry&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TimesheetEntry>> executeWithHttpInfo() throws ApiException {
            TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest = buildBodyParams();
            return addEditClockEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest);
        }

        /**
         * Execute addEditClockEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TimesheetEntry>> _callback) throws ApiException {
            TimeTrackingPrivateBetaAddEditClockEntriesRequest timeTrackingPrivateBetaAddEditClockEntriesRequest = buildBodyParams();
            return addEditClockEntriesAsync(companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest, _callback);
        }
    }

    /**
     * Add/Edit Timesheet Clock Entries
     * Add or edit timesheet clock entries.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return AddEditClockEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public AddEditClockEntriesRequestBuilder addEditClockEntries(List<TimeTrackingPrivateBetaAddEditClockEntriesRequestEntriesInner> entries, String companyDomain) throws IllegalArgumentException {
        if (entries == null) throw new IllegalArgumentException("\"entries\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddEditClockEntriesRequestBuilder(entries, companyDomain);
    }
    private okhttp3.Call addEditHourEntriesCall(String companyDomain, TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingPrivateBetaAddEditHourEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/hour_entries/store"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEditHourEntriesValidateBeforeCall(String companyDomain, TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEditHourEntries(Async)");
        }

        return addEditHourEntriesCall(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest, _callback);

    }


    private ApiResponse<List<TimesheetEntry>> addEditHourEntriesWithHttpInfo(String companyDomain, TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = addEditHourEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest, null);
        Type localVarReturnType = new TypeToken<List<TimesheetEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEditHourEntriesAsync(String companyDomain, TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest, final ApiCallback<List<TimesheetEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEditHourEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TimesheetEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEditHourEntriesRequestBuilder {
        private final List<TimeTrackingPrivateBetaAddEditHourEntriesRequestHoursInner> hours;
        private final String companyDomain;

        private AddEditHourEntriesRequestBuilder(List<TimeTrackingPrivateBetaAddEditHourEntriesRequestHoursInner> hours, String companyDomain) {
            this.hours = hours;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for addEditHourEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest = buildBodyParams();
            return addEditHourEntriesCall(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest, _callback);
        }

        private TimeTrackingPrivateBetaAddEditHourEntriesRequest buildBodyParams() {
            TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest = new TimeTrackingPrivateBetaAddEditHourEntriesRequest();
            timeTrackingPrivateBetaAddEditHourEntriesRequest.hours(this.hours);
            return timeTrackingPrivateBetaAddEditHourEntriesRequest;
        }

        /**
         * Execute addEditHourEntries request
         * @return List&lt;TimesheetEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public List<TimesheetEntry> execute() throws ApiException {
            TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest = buildBodyParams();
            ApiResponse<List<TimesheetEntry>> localVarResp = addEditHourEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEditHourEntries request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TimesheetEntry&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TimesheetEntry>> executeWithHttpInfo() throws ApiException {
            TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest = buildBodyParams();
            return addEditHourEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest);
        }

        /**
         * Execute addEditHourEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TimesheetEntry>> _callback) throws ApiException {
            TimeTrackingPrivateBetaAddEditHourEntriesRequest timeTrackingPrivateBetaAddEditHourEntriesRequest = buildBodyParams();
            return addEditHourEntriesAsync(companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest, _callback);
        }
    }

    /**
     * Add/Edit Timesheet Hour Entries
     * Add or edit timesheet hour entries.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return AddEditHourEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public AddEditHourEntriesRequestBuilder addEditHourEntries(List<TimeTrackingPrivateBetaAddEditHourEntriesRequestHoursInner> hours, String companyDomain) throws IllegalArgumentException {
        if (hours == null) throw new IllegalArgumentException("\"hours\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddEditHourEntriesRequestBuilder(hours, companyDomain);
    }
    private okhttp3.Call addTimesheetClockInCall(String companyDomain, String employeeId, TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingPrivateBetaAddTimesheetClockInRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_in"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTimesheetClockInValidateBeforeCall(String companyDomain, String employeeId, TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addTimesheetClockIn(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addTimesheetClockIn(Async)");
        }

        return addTimesheetClockInCall(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest, _callback);

    }


    private ApiResponse<TimesheetEntry> addTimesheetClockInWithHttpInfo(String companyDomain, String employeeId, TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest) throws ApiException {
        okhttp3.Call localVarCall = addTimesheetClockInValidateBeforeCall(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest, null);
        Type localVarReturnType = new TypeToken<TimesheetEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTimesheetClockInAsync(String companyDomain, String employeeId, TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest, final ApiCallback<TimesheetEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTimesheetClockInValidateBeforeCall(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest, _callback);
        Type localVarReturnType = new TypeToken<TimesheetEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTimesheetClockInRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private Integer projectId;
        private Integer taskId;
        private String note;

        private AddTimesheetClockInRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set projectId
         * @param projectId id of the time tracking project that should be associated with the timesheet entry. Required if taskId is specified. (optional)
         * @return AddTimesheetClockInRequestBuilder
         */
        public AddTimesheetClockInRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set taskId
         * @param taskId id of the time tracking task that should be associated with the timesheet entry. (optional)
         * @return AddTimesheetClockInRequestBuilder
         */
        public AddTimesheetClockInRequestBuilder taskId(Integer taskId) {
            this.taskId = taskId;
            return this;
        }
        
        /**
         * Set note
         * @param note The note that should be associated with the timesheet entry (optional)
         * @return AddTimesheetClockInRequestBuilder
         */
        public AddTimesheetClockInRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for addTimesheetClockIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest = buildBodyParams();
            return addTimesheetClockInCall(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest, _callback);
        }

        private TimeTrackingPrivateBetaAddTimesheetClockInRequest buildBodyParams() {
            TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest = new TimeTrackingPrivateBetaAddTimesheetClockInRequest();
            timeTrackingPrivateBetaAddTimesheetClockInRequest.projectId(this.projectId);
            timeTrackingPrivateBetaAddTimesheetClockInRequest.taskId(this.taskId);
            timeTrackingPrivateBetaAddTimesheetClockInRequest.note(this.note);
            return timeTrackingPrivateBetaAddTimesheetClockInRequest;
        }

        /**
         * Execute addTimesheetClockIn request
         * @return TimesheetEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetEntry execute() throws ApiException {
            TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest = buildBodyParams();
            ApiResponse<TimesheetEntry> localVarResp = addTimesheetClockInWithHttpInfo(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTimesheetClockIn request with HTTP info returned
         * @return ApiResponse&lt;TimesheetEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetEntry> executeWithHttpInfo() throws ApiException {
            TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest = buildBodyParams();
            return addTimesheetClockInWithHttpInfo(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest);
        }

        /**
         * Execute addTimesheetClockIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetEntry> _callback) throws ApiException {
            TimeTrackingPrivateBetaAddTimesheetClockInRequest timeTrackingPrivateBetaAddTimesheetClockInRequest = buildBodyParams();
            return addTimesheetClockInAsync(companyDomain, employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest, _callback);
        }
    }

    /**
     * Add Timesheet Clock-In Entry
     * Clock in an employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to clock in. (required)
     * @return AddTimesheetClockInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
     </table>
     */
    public AddTimesheetClockInRequestBuilder addTimesheetClockIn(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddTimesheetClockInRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call createProjectTaskCall(String companyDomain, TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingPrivateBetaCreateProjectTaskRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/projects"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectTaskValidateBeforeCall(String companyDomain, TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createProjectTask(Async)");
        }

        return createProjectTaskCall(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest, _callback);

    }


    private ApiResponse<TimeTrackingProjectWithTasksAndEmployeeIds> createProjectTaskWithHttpInfo(String companyDomain, TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectTaskValidateBeforeCall(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest, null);
        Type localVarReturnType = new TypeToken<TimeTrackingProjectWithTasksAndEmployeeIds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectTaskAsync(String companyDomain, TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest, final ApiCallback<TimeTrackingProjectWithTasksAndEmployeeIds> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectTaskValidateBeforeCall(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingProjectWithTasksAndEmployeeIds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectTaskRequestBuilder {
        private final String name;
        private final String companyDomain;
        private Boolean billable;
        private Boolean allowAllEmployees;
        private List<Integer> employeeIds;
        private Boolean hasTasks;
        private List<TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner> tasks;

        private CreateProjectTaskRequestBuilder(String name, String companyDomain) {
            this.name = name;
            this.companyDomain = companyDomain;
        }

        /**
         * Set billable
         * @param billable Indicates if the project is billable. Defaults to true if not provided. (optional)
         * @return CreateProjectTaskRequestBuilder
         */
        public CreateProjectTaskRequestBuilder billable(Boolean billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set allowAllEmployees
         * @param allowAllEmployees Indicates if all employees can log time for this project. Defaults to true if not provided. (optional)
         * @return CreateProjectTaskRequestBuilder
         */
        public CreateProjectTaskRequestBuilder allowAllEmployees(Boolean allowAllEmployees) {
            this.allowAllEmployees = allowAllEmployees;
            return this;
        }
        
        /**
         * Set employeeIds
         * @param employeeIds A list of employee IDs that can log time for this project. (optional)
         * @return CreateProjectTaskRequestBuilder
         */
        public CreateProjectTaskRequestBuilder employeeIds(List<Integer> employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Set hasTasks
         * @param hasTasks Indicates if the project has tasks. Defaults to false if not provided. (optional)
         * @return CreateProjectTaskRequestBuilder
         */
        public CreateProjectTaskRequestBuilder hasTasks(Boolean hasTasks) {
            this.hasTasks = hasTasks;
            return this;
        }
        
        /**
         * Set tasks
         * @param tasks List of tasks to create and associate with the project. (optional)
         * @return CreateProjectTaskRequestBuilder
         */
        public CreateProjectTaskRequestBuilder tasks(List<TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner> tasks) {
            this.tasks = tasks;
            return this;
        }
        
        /**
         * Build call for createProjectTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest = buildBodyParams();
            return createProjectTaskCall(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest, _callback);
        }

        private TimeTrackingPrivateBetaCreateProjectTaskRequest buildBodyParams() {
            TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest = new TimeTrackingPrivateBetaCreateProjectTaskRequest();
            timeTrackingPrivateBetaCreateProjectTaskRequest.name(this.name);
            timeTrackingPrivateBetaCreateProjectTaskRequest.billable(this.billable);
            timeTrackingPrivateBetaCreateProjectTaskRequest.allowAllEmployees(this.allowAllEmployees);
            timeTrackingPrivateBetaCreateProjectTaskRequest.employeeIds(this.employeeIds);
            timeTrackingPrivateBetaCreateProjectTaskRequest.hasTasks(this.hasTasks);
            timeTrackingPrivateBetaCreateProjectTaskRequest.tasks(this.tasks);
            return timeTrackingPrivateBetaCreateProjectTaskRequest;
        }

        /**
         * Execute createProjectTask request
         * @return TimeTrackingProjectWithTasksAndEmployeeIds
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingProjectWithTasksAndEmployeeIds execute() throws ApiException {
            TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest = buildBodyParams();
            ApiResponse<TimeTrackingProjectWithTasksAndEmployeeIds> localVarResp = createProjectTaskWithHttpInfo(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectTask request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingProjectWithTasksAndEmployeeIds&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingProjectWithTasksAndEmployeeIds> executeWithHttpInfo() throws ApiException {
            TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest = buildBodyParams();
            return createProjectTaskWithHttpInfo(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest);
        }

        /**
         * Execute createProjectTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingProjectWithTasksAndEmployeeIds> _callback) throws ApiException {
            TimeTrackingPrivateBetaCreateProjectTaskRequest timeTrackingPrivateBetaCreateProjectTaskRequest = buildBodyParams();
            return createProjectTaskAsync(companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest, _callback);
        }
    }

    /**
     * Create a Time Tracking Project
     * Create a time tracking project with optional tasks.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return CreateProjectTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectTaskRequestBuilder createProjectTask(String name, String companyDomain) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CreateProjectTaskRequestBuilder(name, companyDomain);
    }
    private okhttp3.Call deleteHourEntriesCall(String companyDomain, TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingPrivateBetaDeleteHourEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/hour_entries/delete"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHourEntriesValidateBeforeCall(String companyDomain, TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteHourEntries(Async)");
        }

        return deleteHourEntriesCall(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest, _callback);

    }


    private ApiResponse<Void> deleteHourEntriesWithHttpInfo(String companyDomain, TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteHourEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteHourEntriesAsync(String companyDomain, TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHourEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteHourEntriesRequestBuilder {
        private final List<Integer> hourEntryIds;
        private final String companyDomain;

        private DeleteHourEntriesRequestBuilder(List<Integer> hourEntryIds, String companyDomain) {
            this.hourEntryIds = hourEntryIds;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for deleteHourEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest = buildBodyParams();
            return deleteHourEntriesCall(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest, _callback);
        }

        private TimeTrackingPrivateBetaDeleteHourEntriesRequest buildBodyParams() {
            TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest = new TimeTrackingPrivateBetaDeleteHourEntriesRequest();
            timeTrackingPrivateBetaDeleteHourEntriesRequest.hourEntryIds(this.hourEntryIds);
            return timeTrackingPrivateBetaDeleteHourEntriesRequest;
        }

        /**
         * Execute deleteHourEntries request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest = buildBodyParams();
            deleteHourEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest);
        }

        /**
         * Execute deleteHourEntries request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest = buildBodyParams();
            return deleteHourEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest);
        }

        /**
         * Execute deleteHourEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingPrivateBetaDeleteHourEntriesRequest timeTrackingPrivateBetaDeleteHourEntriesRequest = buildBodyParams();
            return deleteHourEntriesAsync(companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest, _callback);
        }
    }

    /**
     * Delete Timesheet Hour Entries
     * Delete timesheet hour entries.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return DeleteHourEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHourEntriesRequestBuilder deleteHourEntries(List<Integer> hourEntryIds, String companyDomain) throws IllegalArgumentException {
        if (hourEntryIds == null) throw new IllegalArgumentException("\"hourEntryIds\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new DeleteHourEntriesRequestBuilder(hourEntryIds, companyDomain);
    }
    private okhttp3.Call deleteTimeSheetEntriesCall(String companyDomain, TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/clock_entries/delete"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTimeSheetEntriesValidateBeforeCall(String companyDomain, TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteTimeSheetEntries(Async)");
        }

        return deleteTimeSheetEntriesCall(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, _callback);

    }


    private ApiResponse<Void> deleteTimeSheetEntriesWithHttpInfo(String companyDomain, TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteTimeSheetEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTimeSheetEntriesAsync(String companyDomain, TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTimeSheetEntriesValidateBeforeCall(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTimeSheetEntriesRequestBuilder {
        private final List<Integer> clockEntryIds;
        private final String companyDomain;

        private DeleteTimeSheetEntriesRequestBuilder(List<Integer> clockEntryIds, String companyDomain) {
            this.clockEntryIds = clockEntryIds;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for deleteTimeSheetEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest = buildBodyParams();
            return deleteTimeSheetEntriesCall(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, _callback);
        }

        private TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest buildBodyParams() {
            TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest = new TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest();
            timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest.clockEntryIds(this.clockEntryIds);
            return timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest;
        }

        /**
         * Execute deleteTimeSheetEntries request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest = buildBodyParams();
            deleteTimeSheetEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest);
        }

        /**
         * Execute deleteTimeSheetEntries request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest = buildBodyParams();
            return deleteTimeSheetEntriesWithHttpInfo(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest);
        }

        /**
         * Execute deleteTimeSheetEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest = buildBodyParams();
            return deleteTimeSheetEntriesAsync(companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, _callback);
        }
    }

    /**
     * Delete Timesheet Clock Entries
     * Delete timesheet clock entries.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return DeleteTimeSheetEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. No content returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a conflict with the request. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid time tracking configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTimeSheetEntriesRequestBuilder deleteTimeSheetEntries(List<Integer> clockEntryIds, String companyDomain) throws IllegalArgumentException {
        if (clockEntryIds == null) throw new IllegalArgumentException("\"clockEntryIds\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new DeleteTimeSheetEntriesRequestBuilder(clockEntryIds, companyDomain);
    }
    private okhttp3.Call listEmployeeProjectsCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employees/{employeeId}/projects"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeProjectsValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeeProjects(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeeProjects(Async)");
        }

        return listEmployeeProjectsCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<List<List<TimeTrackingProjectWithTasks>>> listEmployeeProjectsWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeProjectsValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<List<List<TimeTrackingProjectWithTasks>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeProjectsAsync(String companyDomain, String employeeId, final ApiCallback<List<List<TimeTrackingProjectWithTasks>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeProjectsValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<List<List<TimeTrackingProjectWithTasks>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeProjectsRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private ListEmployeeProjectsRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for listEmployeeProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeProjectsCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute listEmployeeProjects request
         * @return List&lt;List&lt;TimeTrackingProjectWithTasks&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public List<List<TimeTrackingProjectWithTasks>> execute() throws ApiException {
            ApiResponse<List<List<TimeTrackingProjectWithTasks>>> localVarResp = listEmployeeProjectsWithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeProjects request with HTTP info returned
         * @return ApiResponse&lt;List&lt;List&lt;TimeTrackingProjectWithTasks&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<List<TimeTrackingProjectWithTasks>>> executeWithHttpInfo() throws ApiException {
            return listEmployeeProjectsWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeeProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<List<TimeTrackingProjectWithTasks>>> _callback) throws ApiException {
            return listEmployeeProjectsAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get Employee Projects
     * Get the projects an employee can track time for.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to retrieve projects for. (required)
     * @return ListEmployeeProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeProjectsRequestBuilder listEmployeeProjects(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListEmployeeProjectsRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call listTimesheetEntriesCall(String companyDomain, String start, String end, String employeeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/timesheet_entries"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (employeeIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeIds", employeeIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimesheetEntriesValidateBeforeCall(String companyDomain, String start, String end, String employeeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listTimesheetEntries(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling listTimesheetEntries(Async)");
        }

        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling listTimesheetEntries(Async)");
        }

        return listTimesheetEntriesCall(companyDomain, start, end, employeeIds, _callback);

    }


    private ApiResponse<List<TimesheetEntry>> listTimesheetEntriesWithHttpInfo(String companyDomain, String start, String end, String employeeIds) throws ApiException {
        okhttp3.Call localVarCall = listTimesheetEntriesValidateBeforeCall(companyDomain, start, end, employeeIds, null);
        Type localVarReturnType = new TypeToken<List<TimesheetEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimesheetEntriesAsync(String companyDomain, String start, String end, String employeeIds, final ApiCallback<List<TimesheetEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimesheetEntriesValidateBeforeCall(companyDomain, start, end, employeeIds, _callback);
        Type localVarReturnType = new TypeToken<List<TimesheetEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimesheetEntriesRequestBuilder {
        private final String companyDomain;
        private final String start;
        private final String end;
        private String employeeIds;

        private ListTimesheetEntriesRequestBuilder(String companyDomain, String start, String end) {
            this.companyDomain = companyDomain;
            this.start = start;
            this.end = end;
        }

        /**
         * Set employeeIds
         * @param employeeIds A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
         * @return ListTimesheetEntriesRequestBuilder
         */
        public ListTimesheetEntriesRequestBuilder employeeIds(String employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Build call for listTimesheetEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimesheetEntriesCall(companyDomain, start, end, employeeIds, _callback);
        }


        /**
         * Execute listTimesheetEntries request
         * @return List&lt;TimesheetEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public List<TimesheetEntry> execute() throws ApiException {
            ApiResponse<List<TimesheetEntry>> localVarResp = listTimesheetEntriesWithHttpInfo(companyDomain, start, end, employeeIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimesheetEntries request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TimesheetEntry&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TimesheetEntry>> executeWithHttpInfo() throws ApiException {
            return listTimesheetEntriesWithHttpInfo(companyDomain, start, end, employeeIds);
        }

        /**
         * Execute listTimesheetEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TimesheetEntry>> _callback) throws ApiException {
            return listTimesheetEntriesAsync(companyDomain, start, end, employeeIds, _callback);
        }
    }

    /**
     * Get Timesheet Entries
     * Get all timesheet entries for a given period of time.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @return ListTimesheetEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
     </table>
     */
    public ListTimesheetEntriesRequestBuilder listTimesheetEntries(String companyDomain, String start, String end) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
            

        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
            

        return new ListTimesheetEntriesRequestBuilder(companyDomain, start, end);
    }
}
