/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeesGetDirectory200Response;
import com.konfigthis.client.model.EmployeesGetDirectoryResponse;
import com.konfigthis.client.model.EmployeesGetEmployeeData200Response;
import com.konfigthis.client.model.EmployeesGetEmployeeDataResponse;
import com.konfigthis.client.model.PostNewEmployee;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmployeeCall(String companyDomain, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmployeeValidateBeforeCall(String companyDomain, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createNewEmployee(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createNewEmployee(Async)");
        }

        return createNewEmployeeCall(companyDomain, requestBody, _callback);

    }


    private ApiResponse<Void> createNewEmployeeWithHttpInfo(String companyDomain, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(companyDomain, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewEmployeeAsync(String companyDomain, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(companyDomain, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewEmployeeRequestBuilder {
        private final String companyDomain;
        private String firstName;
        private String lastName;

        private CreateNewEmployeeRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Build call for createNewEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Additionally, an HTTP Location: header that points to the new API URL for the new employee will be returned. </td><td>  * Location - The URL to view the employee in the web app. The ID of the employee will be included. <br>  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add an employee. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewEmployeeCall(companyDomain, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("firstName", this.firstName);
            requestBody.put("lastName", this.lastName);
            return requestBody;
        }

        /**
         * Execute createNewEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Additionally, an HTTP Location: header that points to the new API URL for the new employee will be returned. </td><td>  * Location - The URL to view the employee in the web app. The ID of the employee will be included. <br>  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add an employee. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            createNewEmployeeWithHttpInfo(companyDomain, requestBody);
        }

        /**
         * Execute createNewEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Additionally, an HTTP Location: header that points to the new API URL for the new employee will be returned. </td><td>  * Location - The URL to view the employee in the web app. The ID of the employee will be included. <br>  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add an employee. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewEmployeeWithHttpInfo(companyDomain, requestBody);
        }

        /**
         * Execute createNewEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Additionally, an HTTP Location: header that points to the new API URL for the new employee will be returned. </td><td>  * Location - The URL to view the employee in the web app. The ID of the employee will be included. <br>  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add an employee. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewEmployeeAsync(companyDomain, requestBody, _callback);
        }
    }

    /**
     * Add Employee
     * Add a new employee. New employees must have at least a first name and a last name. The ID of the newly created employee is included in the Location header of the response. Other fields can be included. Please see the [fields](ref:metadata-get-a-list-of-fields) endpoint. New Employees added to a pay schedule synced with Trax Payroll must have the following required fields (listed by API field name): employeeNumber, firstName, lastName, dateOfBirth, ssn, gender, maritalStatus, hireDate, address1, city, state, country, employmentHistoryStatus, exempt, payType, payRate, payPer, location, department, and division.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param requestBody  (required)
     * @return CreateNewEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Additionally, an HTTP Location: header that points to the new API URL for the new employee will be returned. </td><td>  * Location - The URL to view the employee in the web app. The ID of the employee will be included. <br>  </td></tr>
        <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the API user does not have permission to add an employee. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If an employee field was given an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEmployeeRequestBuilder createNewEmployee(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CreateNewEmployeeRequestBuilder(companyDomain);
    }
    private okhttp3.Call getDirectoryCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/directory"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectoryValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDirectory(Async)");
        }

        return getDirectoryCall(companyDomain, _callback);

    }


    private ApiResponse<EmployeesGetDirectoryResponse> getDirectoryWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getDirectoryValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<EmployeesGetDirectoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDirectoryAsync(String companyDomain, final ApiCallback<EmployeesGetDirectoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectoryValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetDirectoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDirectoryRequestBuilder {
        private final String companyDomain;

        private GetDirectoryRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getDirectory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employees </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the directory has not been shared company-wide. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDirectoryCall(companyDomain, _callback);
        }


        /**
         * Execute getDirectory request
         * @return EmployeesGetDirectoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employees </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the directory has not been shared company-wide. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetDirectoryResponse execute() throws ApiException {
            ApiResponse<EmployeesGetDirectoryResponse> localVarResp = getDirectoryWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDirectory request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetDirectoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employees </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the directory has not been shared company-wide. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetDirectoryResponse> executeWithHttpInfo() throws ApiException {
            return getDirectoryWithHttpInfo(companyDomain);
        }

        /**
         * Execute getDirectory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employees </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the directory has not been shared company-wide. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetDirectoryResponse> _callback) throws ApiException {
            return getDirectoryAsync(companyDomain, _callback);
        }
    }

    /**
     * Get Employee Directory
     * Gets employee directory.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetDirectoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of employees </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the directory has not been shared company-wide. </td><td>  -  </td></tr>
     </table>
     */
    public GetDirectoryRequestBuilder getDirectory(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetDirectoryRequestBuilder(companyDomain);
    }
    private okhttp3.Call getEmployeeDataCall(String companyDomain, String fields, String id, Boolean onlyCurrent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (onlyCurrent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyCurrent", onlyCurrent));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeDataValidateBeforeCall(String companyDomain, String fields, String id, Boolean onlyCurrent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeeData(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling getEmployeeData(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeData(Async)");
        }

        return getEmployeeDataCall(companyDomain, fields, id, onlyCurrent, _callback);

    }


    private ApiResponse<EmployeesGetEmployeeDataResponse> getEmployeeDataWithHttpInfo(String companyDomain, String fields, String id, Boolean onlyCurrent) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeDataValidateBeforeCall(companyDomain, fields, id, onlyCurrent, null);
        Type localVarReturnType = new TypeToken<EmployeesGetEmployeeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeDataAsync(String companyDomain, String fields, String id, Boolean onlyCurrent, final ApiCallback<EmployeesGetEmployeeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeDataValidateBeforeCall(companyDomain, fields, id, onlyCurrent, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetEmployeeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeDataRequestBuilder {
        private final String companyDomain;
        private final String fields;
        private final String id;
        private Boolean onlyCurrent;

        private GetEmployeeDataRequestBuilder(String companyDomain, String fields, String id) {
            this.companyDomain = companyDomain;
            this.fields = fields;
            this.id = id;
        }

        /**
         * Set onlyCurrent
         * @param onlyCurrent Setting to false will return future dated values from history table fields. (optional, default to true)
         * @return GetEmployeeDataRequestBuilder
         */
        public GetEmployeeDataRequestBuilder onlyCurrent(Boolean onlyCurrent) {
            this.onlyCurrent = onlyCurrent;
            return this;
        }
        
        /**
         * Build call for getEmployeeData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Employee </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee does not exist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeDataCall(companyDomain, fields, id, onlyCurrent, _callback);
        }


        /**
         * Execute getEmployeeData request
         * @return EmployeesGetEmployeeDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Employee </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee does not exist. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetEmployeeDataResponse execute() throws ApiException {
            ApiResponse<EmployeesGetEmployeeDataResponse> localVarResp = getEmployeeDataWithHttpInfo(companyDomain, fields, id, onlyCurrent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeData request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetEmployeeDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Employee </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee does not exist. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetEmployeeDataResponse> executeWithHttpInfo() throws ApiException {
            return getEmployeeDataWithHttpInfo(companyDomain, fields, id, onlyCurrent);
        }

        /**
         * Execute getEmployeeData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Employee </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee does not exist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetEmployeeDataResponse> _callback) throws ApiException {
            return getEmployeeDataAsync(companyDomain, fields, id, onlyCurrent, _callback);
        }
    }

    /**
     * Get Employee
     * Get employee data by specifying a set of fields. This is suitable for getting basic employee information, including current values for fields that are part of a historical table, like job title, or compensation information. See the [fields](ref:metadata-get-a-list-of-fields) endpoint for a list of possible fields.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param fields {fields} is a comma separated list of values taken from the official list of field names.  (required)
     * @param id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @return GetEmployeeDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Employee </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the employee does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeDataRequestBuilder getEmployeeData(String companyDomain, String fields, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEmployeeDataRequestBuilder(companyDomain, fields, id);
    }
    private okhttp3.Call updateEmployeeCall(String companyDomain, String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeValidateBeforeCall(String companyDomain, String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateEmployee(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmployee(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateEmployee(Async)");
        }

        return updateEmployeeCall(companyDomain, id, requestBody, _callback);

    }


    private ApiResponse<Void> updateEmployeeWithHttpInfo(String companyDomain, String id, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeValidateBeforeCall(companyDomain, id, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmployeeAsync(String companyDomain, String id, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeValidateBeforeCall(companyDomain, id, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeRequestBuilder {
        private final String companyDomain;
        private final String id;
        private String firstName;
        private String lastName;

        private UpdateEmployeeRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Build call for updateEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Provided JSON is bad or user is missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the user doesn&#39;t have perms to see the employee or the user doesn&#39;t have perms to update ANY of the requested fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the employee to be updated doesn&#39;t exist. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateEmployeeCall(companyDomain, id, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("firstName", this.firstName);
            requestBody.put("lastName", this.lastName);
            return requestBody;
        }

        /**
         * Execute updateEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Provided JSON is bad or user is missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the user doesn&#39;t have perms to see the employee or the user doesn&#39;t have perms to update ANY of the requested fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the employee to be updated doesn&#39;t exist. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateEmployeeWithHttpInfo(companyDomain, id, requestBody);
        }

        /**
         * Execute updateEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Provided JSON is bad or user is missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the user doesn&#39;t have perms to see the employee or the user doesn&#39;t have perms to update ANY of the requested fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the employee to be updated doesn&#39;t exist. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateEmployeeWithHttpInfo(companyDomain, id, requestBody);
        }

        /**
         * Execute updateEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Provided JSON is bad or user is missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the user doesn&#39;t have perms to see the employee or the user doesn&#39;t have perms to update ANY of the requested fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the employee to be updated doesn&#39;t exist. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If an employee field was given an invalid value </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateEmployeeAsync(companyDomain, id, requestBody, _callback);
        }
    }

    /**
     * Update Employee
     * Update an employee, based on employee ID. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the API user will need to update the employee with all of the following required fields for the update to be successful (listed by API field name): employeeNumber, firstName, lastName, dateOfBirth, ssn, gender, maritalStatus, hireDate, address1, city, state, country, employmentHistoryStatus, exempt, payType, payRate, payPer, location, department, and division.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an employee ID. (required)
     * @param requestBody  (required)
     * @return UpdateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Provided JSON is bad or user is missing required fields. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user doesn&#39;t have perms to see the employee or the user doesn&#39;t have perms to update ANY of the requested fields. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the employee to be updated doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If an employee field was given an invalid value </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeRequestBuilder updateEmployee(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateEmployeeRequestBuilder(companyDomain, id);
    }
}
