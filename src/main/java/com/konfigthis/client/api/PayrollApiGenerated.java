/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeDeposit;
import com.konfigthis.client.model.EmployeeDepositAccountsInner;
import com.konfigthis.client.model.EmployeePaystub;
import com.konfigthis.client.model.EmployeePaystubDeductionsInner;
import com.konfigthis.client.model.EmployeePaystubDepositsInner;
import com.konfigthis.client.model.EmployeePaystubTaxesInner;
import com.konfigthis.client.model.EmployeePaystubWagesInner;
import com.konfigthis.client.model.EmployeeUnpaidPaystub;
import com.konfigthis.client.model.EmployeeUnpaidPaystubUnpaidPeriodsInner;
import com.konfigthis.client.model.EmployeeWithholding;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayrollApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addEmployeeDirectDepositInfoCall(String companyDomain, String id, EmployeeDeposit employeeDeposit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDeposit;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_direct_deposit_accounts/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeeDirectDepositInfoValidateBeforeCall(String companyDomain, String id, EmployeeDeposit employeeDeposit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEmployeeDirectDepositInfo(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addEmployeeDirectDepositInfo(Async)");
        }

        // verify the required parameter 'employeeDeposit' is set
        if (employeeDeposit == null) {
            throw new ApiException("Missing the required parameter 'employeeDeposit' when calling addEmployeeDirectDepositInfo(Async)");
        }

        return addEmployeeDirectDepositInfoCall(companyDomain, id, employeeDeposit, _callback);

    }


    private ApiResponse<Void> addEmployeeDirectDepositInfoWithHttpInfo(String companyDomain, String id, EmployeeDeposit employeeDeposit) throws ApiException {
        okhttp3.Call localVarCall = addEmployeeDirectDepositInfoValidateBeforeCall(companyDomain, id, employeeDeposit, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addEmployeeDirectDepositInfoAsync(String companyDomain, String id, EmployeeDeposit employeeDeposit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeeDirectDepositInfoValidateBeforeCall(companyDomain, id, employeeDeposit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddEmployeeDirectDepositInfoRequestBuilder {
        private final String companyDomain;
        private final String id;
        private List<EmployeeDepositAccountsInner> accounts;

        private AddEmployeeDirectDepositInfoRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Set accounts
         * @param accounts  (optional)
         * @return AddEmployeeDirectDepositInfoRequestBuilder
         */
        public AddEmployeeDirectDepositInfoRequestBuilder accounts(List<EmployeeDepositAccountsInner> accounts) {
            this.accounts = accounts;
            return this;
        }
        
        /**
         * Build call for addEmployeeDirectDepositInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The saved values for the employee&#39;s direct deposit declarations will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to update the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDeposit employeeDeposit = buildBodyParams();
            return addEmployeeDirectDepositInfoCall(companyDomain, id, employeeDeposit, _callback);
        }

        private EmployeeDeposit buildBodyParams() {
            EmployeeDeposit employeeDeposit = new EmployeeDeposit();
            employeeDeposit.accounts(this.accounts);
            return employeeDeposit;
        }

        /**
         * Execute addEmployeeDirectDepositInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The saved values for the employee&#39;s direct deposit declarations will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to update the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeDeposit employeeDeposit = buildBodyParams();
            addEmployeeDirectDepositInfoWithHttpInfo(companyDomain, id, employeeDeposit);
        }

        /**
         * Execute addEmployeeDirectDepositInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The saved values for the employee&#39;s direct deposit declarations will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to update the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeDeposit employeeDeposit = buildBodyParams();
            return addEmployeeDirectDepositInfoWithHttpInfo(companyDomain, id, employeeDeposit);
        }

        /**
         * Execute addEmployeeDirectDepositInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The saved values for the employee&#39;s direct deposit declarations will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to update the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeDeposit employeeDeposit = buildBodyParams();
            return addEmployeeDirectDepositInfoAsync(companyDomain, id, employeeDeposit, _callback);
        }
    }

    /**
     * Add an employee&#39;s direct deposit information
     * Add an employee&#39;s direct deposit information
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee id. (required)
     * @param employeeDeposit  (required)
     * @return AddEmployeeDirectDepositInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The saved values for the employee&#39;s direct deposit declarations will be returned in JSON. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to update the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeeDirectDepositInfoRequestBuilder addEmployeeDirectDepositInfo(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddEmployeeDirectDepositInfoRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call addEmployeePaystubCall(String companyDomain, EmployeePaystub employeePaystub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePaystub;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_pay_stub"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeePaystubValidateBeforeCall(String companyDomain, EmployeePaystub employeePaystub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEmployeePaystub(Async)");
        }

        // verify the required parameter 'employeePaystub' is set
        if (employeePaystub == null) {
            throw new ApiException("Missing the required parameter 'employeePaystub' when calling addEmployeePaystub(Async)");
        }

        return addEmployeePaystubCall(companyDomain, employeePaystub, _callback);

    }


    private ApiResponse<Void> addEmployeePaystubWithHttpInfo(String companyDomain, EmployeePaystub employeePaystub) throws ApiException {
        okhttp3.Call localVarCall = addEmployeePaystubValidateBeforeCall(companyDomain, employeePaystub, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addEmployeePaystubAsync(String companyDomain, EmployeePaystub employeePaystub, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeePaystubValidateBeforeCall(companyDomain, employeePaystub, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddEmployeePaystubRequestBuilder {
        private final String companyDomain;
        private String employeeId;
        private String externalRecordId;
        private String payPeriodFrom;
        private String payPeriodTo;
        private String payDate;
        private String payorName;
        private String payorAdd1;
        private String payorAdd2;
        private String payorCity;
        private String payorState;
        private String payorZip;
        private String payeeName;
        private String currencyCode;
        private String net;
        private String gross;
        private String totalTaxes;
        private String totalDeductions;
        private String ytdNet;
        private String ytdGross;
        private String ytdTaxes;
        private String ytdDeductions;
        private String fedWitholding;
        private String federalType;
        private String twoJobs;
        private String dependentsAmount;
        private String otherIncome;
        private String deductionsAmount;
        private String stateWithholding;
        private String localWithholding;
        private String additionalFed;
        private String additionalState;
        private String additionalLocal;
        private String taxState;
        private String taxLocal;
        private List<EmployeePaystubWagesInner> wages;
        private List<EmployeePaystubTaxesInner> taxes;
        private List<EmployeePaystubDeductionsInner> deductions;
        private List<EmployeePaystubDepositsInner> deposits;

        private AddEmployeePaystubRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set externalRecordId
         * @param externalRecordId  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder externalRecordId(String externalRecordId) {
            this.externalRecordId = externalRecordId;
            return this;
        }
        
        /**
         * Set payPeriodFrom
         * @param payPeriodFrom  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payPeriodFrom(String payPeriodFrom) {
            this.payPeriodFrom = payPeriodFrom;
            return this;
        }
        
        /**
         * Set payPeriodTo
         * @param payPeriodTo  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payPeriodTo(String payPeriodTo) {
            this.payPeriodTo = payPeriodTo;
            return this;
        }
        
        /**
         * Set payDate
         * @param payDate  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payDate(String payDate) {
            this.payDate = payDate;
            return this;
        }
        
        /**
         * Set payorName
         * @param payorName  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payorName(String payorName) {
            this.payorName = payorName;
            return this;
        }
        
        /**
         * Set payorAdd1
         * @param payorAdd1  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payorAdd1(String payorAdd1) {
            this.payorAdd1 = payorAdd1;
            return this;
        }
        
        /**
         * Set payorAdd2
         * @param payorAdd2  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payorAdd2(String payorAdd2) {
            this.payorAdd2 = payorAdd2;
            return this;
        }
        
        /**
         * Set payorCity
         * @param payorCity  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payorCity(String payorCity) {
            this.payorCity = payorCity;
            return this;
        }
        
        /**
         * Set payorState
         * @param payorState  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payorState(String payorState) {
            this.payorState = payorState;
            return this;
        }
        
        /**
         * Set payorZip
         * @param payorZip  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payorZip(String payorZip) {
            this.payorZip = payorZip;
            return this;
        }
        
        /**
         * Set payeeName
         * @param payeeName  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder payeeName(String payeeName) {
            this.payeeName = payeeName;
            return this;
        }
        
        /**
         * Set currencyCode
         * @param currencyCode  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Set net
         * @param net  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder net(String net) {
            this.net = net;
            return this;
        }
        
        /**
         * Set gross
         * @param gross  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder gross(String gross) {
            this.gross = gross;
            return this;
        }
        
        /**
         * Set totalTaxes
         * @param totalTaxes  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder totalTaxes(String totalTaxes) {
            this.totalTaxes = totalTaxes;
            return this;
        }
        
        /**
         * Set totalDeductions
         * @param totalDeductions  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder totalDeductions(String totalDeductions) {
            this.totalDeductions = totalDeductions;
            return this;
        }
        
        /**
         * Set ytdNet
         * @param ytdNet  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder ytdNet(String ytdNet) {
            this.ytdNet = ytdNet;
            return this;
        }
        
        /**
         * Set ytdGross
         * @param ytdGross  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder ytdGross(String ytdGross) {
            this.ytdGross = ytdGross;
            return this;
        }
        
        /**
         * Set ytdTaxes
         * @param ytdTaxes  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder ytdTaxes(String ytdTaxes) {
            this.ytdTaxes = ytdTaxes;
            return this;
        }
        
        /**
         * Set ytdDeductions
         * @param ytdDeductions  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder ytdDeductions(String ytdDeductions) {
            this.ytdDeductions = ytdDeductions;
            return this;
        }
        
        /**
         * Set fedWitholding
         * @param fedWitholding  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder fedWitholding(String fedWitholding) {
            this.fedWitholding = fedWitholding;
            return this;
        }
        
        /**
         * Set federalType
         * @param federalType must be 2020_w4, pre_2020_w4, or null (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder federalType(String federalType) {
            this.federalType = federalType;
            return this;
        }
        
        /**
         * Set twoJobs
         * @param twoJobs boolean value (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder twoJobs(String twoJobs) {
            this.twoJobs = twoJobs;
            return this;
        }
        
        /**
         * Set dependentsAmount
         * @param dependentsAmount float value (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder dependentsAmount(String dependentsAmount) {
            this.dependentsAmount = dependentsAmount;
            return this;
        }
        
        /**
         * Set otherIncome
         * @param otherIncome float value (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder otherIncome(String otherIncome) {
            this.otherIncome = otherIncome;
            return this;
        }
        
        /**
         * Set deductionsAmount
         * @param deductionsAmount float value (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder deductionsAmount(String deductionsAmount) {
            this.deductionsAmount = deductionsAmount;
            return this;
        }
        
        /**
         * Set stateWithholding
         * @param stateWithholding  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder stateWithholding(String stateWithholding) {
            this.stateWithholding = stateWithholding;
            return this;
        }
        
        /**
         * Set localWithholding
         * @param localWithholding  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder localWithholding(String localWithholding) {
            this.localWithholding = localWithholding;
            return this;
        }
        
        /**
         * Set additionalFed
         * @param additionalFed  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder additionalFed(String additionalFed) {
            this.additionalFed = additionalFed;
            return this;
        }
        
        /**
         * Set additionalState
         * @param additionalState  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder additionalState(String additionalState) {
            this.additionalState = additionalState;
            return this;
        }
        
        /**
         * Set additionalLocal
         * @param additionalLocal  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder additionalLocal(String additionalLocal) {
            this.additionalLocal = additionalLocal;
            return this;
        }
        
        /**
         * Set taxState
         * @param taxState  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder taxState(String taxState) {
            this.taxState = taxState;
            return this;
        }
        
        /**
         * Set taxLocal
         * @param taxLocal  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder taxLocal(String taxLocal) {
            this.taxLocal = taxLocal;
            return this;
        }
        
        /**
         * Set wages
         * @param wages  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder wages(List<EmployeePaystubWagesInner> wages) {
            this.wages = wages;
            return this;
        }
        
        /**
         * Set taxes
         * @param taxes  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder taxes(List<EmployeePaystubTaxesInner> taxes) {
            this.taxes = taxes;
            return this;
        }
        
        /**
         * Set deductions
         * @param deductions  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder deductions(List<EmployeePaystubDeductionsInner> deductions) {
            this.deductions = deductions;
            return this;
        }
        
        /**
         * Set deposits
         * @param deposits  (optional)
         * @return AddEmployeePaystubRequestBuilder
         */
        public AddEmployeePaystubRequestBuilder deposits(List<EmployeePaystubDepositsInner> deposits) {
            this.deposits = deposits;
            return this;
        }
        
        /**
         * Build call for addEmployeePaystub
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s paystub record will be returned in JSON along with its record ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add an employee pay stub. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePaystub employeePaystub = buildBodyParams();
            return addEmployeePaystubCall(companyDomain, employeePaystub, _callback);
        }

        private EmployeePaystub buildBodyParams() {
            EmployeePaystub employeePaystub = new EmployeePaystub();
            employeePaystub.employeeId(this.employeeId);
            employeePaystub.externalRecordId(this.externalRecordId);
            employeePaystub.payPeriodFrom(this.payPeriodFrom);
            employeePaystub.payPeriodTo(this.payPeriodTo);
            employeePaystub.payDate(this.payDate);
            employeePaystub.payorName(this.payorName);
            employeePaystub.payorAdd1(this.payorAdd1);
            employeePaystub.payorAdd2(this.payorAdd2);
            employeePaystub.payorCity(this.payorCity);
            employeePaystub.payorState(this.payorState);
            employeePaystub.payorZip(this.payorZip);
            employeePaystub.payeeName(this.payeeName);
            employeePaystub.currencyCode(this.currencyCode);
            employeePaystub.net(this.net);
            employeePaystub.gross(this.gross);
            employeePaystub.totalTaxes(this.totalTaxes);
            employeePaystub.totalDeductions(this.totalDeductions);
            employeePaystub.ytdNet(this.ytdNet);
            employeePaystub.ytdGross(this.ytdGross);
            employeePaystub.ytdTaxes(this.ytdTaxes);
            employeePaystub.ytdDeductions(this.ytdDeductions);
            employeePaystub.fedWitholding(this.fedWitholding);
            if (this.federalType != null)
            employeePaystub.federalType(EmployeePaystub.FederalTypeEnum.fromValue(this.federalType));
            employeePaystub.twoJobs(this.twoJobs);
            employeePaystub.dependentsAmount(this.dependentsAmount);
            employeePaystub.otherIncome(this.otherIncome);
            employeePaystub.deductionsAmount(this.deductionsAmount);
            employeePaystub.stateWithholding(this.stateWithholding);
            employeePaystub.localWithholding(this.localWithholding);
            employeePaystub.additionalFed(this.additionalFed);
            employeePaystub.additionalState(this.additionalState);
            employeePaystub.additionalLocal(this.additionalLocal);
            employeePaystub.taxState(this.taxState);
            employeePaystub.taxLocal(this.taxLocal);
            employeePaystub.wages(this.wages);
            employeePaystub.taxes(this.taxes);
            employeePaystub.deductions(this.deductions);
            employeePaystub.deposits(this.deposits);
            return employeePaystub;
        }

        /**
         * Execute addEmployeePaystub request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s paystub record will be returned in JSON along with its record ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add an employee pay stub. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeePaystub employeePaystub = buildBodyParams();
            addEmployeePaystubWithHttpInfo(companyDomain, employeePaystub);
        }

        /**
         * Execute addEmployeePaystub request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s paystub record will be returned in JSON along with its record ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add an employee pay stub. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeePaystub employeePaystub = buildBodyParams();
            return addEmployeePaystubWithHttpInfo(companyDomain, employeePaystub);
        }

        /**
         * Execute addEmployeePaystub request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s paystub record will be returned in JSON along with its record ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add an employee pay stub. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeePaystub employeePaystub = buildBodyParams();
            return addEmployeePaystubAsync(companyDomain, employeePaystub, _callback);
        }
    }

    /**
     * Add an employee&#39;s paystub
     * Add an employee&#39;s paystub
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeePaystub  (required)
     * @return AddEmployeePaystubRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s paystub record will be returned in JSON along with its record ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add an employee pay stub. </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeePaystubRequestBuilder addEmployeePaystub(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddEmployeePaystubRequestBuilder(companyDomain);
    }
    private okhttp3.Call addEmployeeUnpaidPaystubsCall(String companyDomain, EmployeeUnpaidPaystub employeeUnpaidPaystub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeUnpaidPaystub;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_unpaid_pay_stubs"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeeUnpaidPaystubsValidateBeforeCall(String companyDomain, EmployeeUnpaidPaystub employeeUnpaidPaystub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEmployeeUnpaidPaystubs(Async)");
        }

        // verify the required parameter 'employeeUnpaidPaystub' is set
        if (employeeUnpaidPaystub == null) {
            throw new ApiException("Missing the required parameter 'employeeUnpaidPaystub' when calling addEmployeeUnpaidPaystubs(Async)");
        }

        return addEmployeeUnpaidPaystubsCall(companyDomain, employeeUnpaidPaystub, _callback);

    }


    private ApiResponse<Void> addEmployeeUnpaidPaystubsWithHttpInfo(String companyDomain, EmployeeUnpaidPaystub employeeUnpaidPaystub) throws ApiException {
        okhttp3.Call localVarCall = addEmployeeUnpaidPaystubsValidateBeforeCall(companyDomain, employeeUnpaidPaystub, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addEmployeeUnpaidPaystubsAsync(String companyDomain, EmployeeUnpaidPaystub employeeUnpaidPaystub, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeeUnpaidPaystubsValidateBeforeCall(companyDomain, employeeUnpaidPaystub, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddEmployeeUnpaidPaystubsRequestBuilder {
        private final String companyDomain;
        private String employeeId;
        private List<EmployeeUnpaidPaystubUnpaidPeriodsInner> unpaidPeriods;

        private AddEmployeeUnpaidPaystubsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return AddEmployeeUnpaidPaystubsRequestBuilder
         */
        public AddEmployeeUnpaidPaystubsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set unpaidPeriods
         * @param unpaidPeriods  (optional)
         * @return AddEmployeeUnpaidPaystubsRequestBuilder
         */
        public AddEmployeeUnpaidPaystubsRequestBuilder unpaidPeriods(List<EmployeeUnpaidPaystubUnpaidPeriodsInner> unpaidPeriods) {
            this.unpaidPeriods = unpaidPeriods;
            return this;
        }
        
        /**
         * Build call for addEmployeeUnpaidPaystubs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s unpaid pay stubs will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee unpaid pay stub information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeUnpaidPaystub employeeUnpaidPaystub = buildBodyParams();
            return addEmployeeUnpaidPaystubsCall(companyDomain, employeeUnpaidPaystub, _callback);
        }

        private EmployeeUnpaidPaystub buildBodyParams() {
            EmployeeUnpaidPaystub employeeUnpaidPaystub = new EmployeeUnpaidPaystub();
            employeeUnpaidPaystub.employeeId(this.employeeId);
            employeeUnpaidPaystub.unpaidPeriods(this.unpaidPeriods);
            return employeeUnpaidPaystub;
        }

        /**
         * Execute addEmployeeUnpaidPaystubs request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s unpaid pay stubs will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee unpaid pay stub information. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeUnpaidPaystub employeeUnpaidPaystub = buildBodyParams();
            addEmployeeUnpaidPaystubsWithHttpInfo(companyDomain, employeeUnpaidPaystub);
        }

        /**
         * Execute addEmployeeUnpaidPaystubs request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s unpaid pay stubs will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee unpaid pay stub information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeUnpaidPaystub employeeUnpaidPaystub = buildBodyParams();
            return addEmployeeUnpaidPaystubsWithHttpInfo(companyDomain, employeeUnpaidPaystub);
        }

        /**
         * Execute addEmployeeUnpaidPaystubs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s unpaid pay stubs will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee unpaid pay stub information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeUnpaidPaystub employeeUnpaidPaystub = buildBodyParams();
            return addEmployeeUnpaidPaystubsAsync(companyDomain, employeeUnpaidPaystub, _callback);
        }
    }

    /**
     * Add an employee&#39;s unpaid paystubs
     * Add an employee&#39;s unpaid paystubs
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeUnpaidPaystub  (required)
     * @return AddEmployeeUnpaidPaystubsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additionally, the saved values for the employee&#39;s unpaid pay stubs will be returned in JSON. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee unpaid pay stub information. </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeeUnpaidPaystubsRequestBuilder addEmployeeUnpaidPaystubs(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddEmployeeUnpaidPaystubsRequestBuilder(companyDomain);
    }
    private okhttp3.Call addEmployeeWithholdingsCall(String companyDomain, String id, EmployeeWithholding employeeWithholding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeWithholding;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_withholding/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeeWithholdingsValidateBeforeCall(String companyDomain, String id, EmployeeWithholding employeeWithholding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEmployeeWithholdings(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addEmployeeWithholdings(Async)");
        }

        // verify the required parameter 'employeeWithholding' is set
        if (employeeWithholding == null) {
            throw new ApiException("Missing the required parameter 'employeeWithholding' when calling addEmployeeWithholdings(Async)");
        }

        return addEmployeeWithholdingsCall(companyDomain, id, employeeWithholding, _callback);

    }


    private ApiResponse<Void> addEmployeeWithholdingsWithHttpInfo(String companyDomain, String id, EmployeeWithholding employeeWithholding) throws ApiException {
        okhttp3.Call localVarCall = addEmployeeWithholdingsValidateBeforeCall(companyDomain, id, employeeWithholding, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addEmployeeWithholdingsAsync(String companyDomain, String id, EmployeeWithholding employeeWithholding, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeeWithholdingsValidateBeforeCall(companyDomain, id, employeeWithholding, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddEmployeeWithholdingsRequestBuilder {
        private final String companyDomain;
        private final String id;
        private String fedWithholding;
        private String stateWithholding;
        private String localWithholding;
        private String additionalFed;
        private String additionalState;
        private String additionalLocal;
        private String taxState;
        private String taxLocal;

        private AddEmployeeWithholdingsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Set fedWithholding
         * @param fedWithholding  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder fedWithholding(String fedWithholding) {
            this.fedWithholding = fedWithholding;
            return this;
        }
        
        /**
         * Set stateWithholding
         * @param stateWithholding  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder stateWithholding(String stateWithholding) {
            this.stateWithholding = stateWithholding;
            return this;
        }
        
        /**
         * Set localWithholding
         * @param localWithholding  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder localWithholding(String localWithholding) {
            this.localWithholding = localWithholding;
            return this;
        }
        
        /**
         * Set additionalFed
         * @param additionalFed  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder additionalFed(String additionalFed) {
            this.additionalFed = additionalFed;
            return this;
        }
        
        /**
         * Set additionalState
         * @param additionalState  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder additionalState(String additionalState) {
            this.additionalState = additionalState;
            return this;
        }
        
        /**
         * Set additionalLocal
         * @param additionalLocal  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder additionalLocal(String additionalLocal) {
            this.additionalLocal = additionalLocal;
            return this;
        }
        
        /**
         * Set taxState
         * @param taxState  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder taxState(String taxState) {
            this.taxState = taxState;
            return this;
        }
        
        /**
         * Set taxLocal
         * @param taxLocal  (optional)
         * @return AddEmployeeWithholdingsRequestBuilder
         */
        public AddEmployeeWithholdingsRequestBuilder taxLocal(String taxLocal) {
            this.taxLocal = taxLocal;
            return this;
        }
        
        /**
         * Build call for addEmployeeWithholdings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Withholding added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeWithholding employeeWithholding = buildBodyParams();
            return addEmployeeWithholdingsCall(companyDomain, id, employeeWithholding, _callback);
        }

        private EmployeeWithholding buildBodyParams() {
            EmployeeWithholding employeeWithholding = new EmployeeWithholding();
            employeeWithholding.fedWithholding(this.fedWithholding);
            employeeWithholding.stateWithholding(this.stateWithholding);
            employeeWithholding.localWithholding(this.localWithholding);
            employeeWithholding.additionalFed(this.additionalFed);
            employeeWithholding.additionalState(this.additionalState);
            employeeWithholding.additionalLocal(this.additionalLocal);
            employeeWithholding.taxState(this.taxState);
            employeeWithholding.taxLocal(this.taxLocal);
            return employeeWithholding;
        }

        /**
         * Execute addEmployeeWithholdings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Withholding added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeWithholding employeeWithholding = buildBodyParams();
            addEmployeeWithholdingsWithHttpInfo(companyDomain, id, employeeWithholding);
        }

        /**
         * Execute addEmployeeWithholdings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Withholding added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeWithholding employeeWithholding = buildBodyParams();
            return addEmployeeWithholdingsWithHttpInfo(companyDomain, id, employeeWithholding);
        }

        /**
         * Execute addEmployeeWithholdings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Withholding added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeWithholding employeeWithholding = buildBodyParams();
            return addEmployeeWithholdingsAsync(companyDomain, id, employeeWithholding, _callback);
        }
    }

    /**
     * Add an employee&#39;s default withholdings
     * Add an employee&#39;s default withholdings
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee id. (required)
     * @param employeeWithholding  (required)
     * @return AddEmployeeWithholdingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Withholding added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if an invalid employee ID is provided, or the posted JSON is not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add employee withholdings information. </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeeWithholdingsRequestBuilder addEmployeeWithholdings(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddEmployeeWithholdingsRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call clearEmployeeDirectDepositCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_direct_deposit_accounts/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearEmployeeDirectDepositValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clearEmployeeDirectDeposit(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clearEmployeeDirectDeposit(Async)");
        }

        return clearEmployeeDirectDepositCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> clearEmployeeDirectDepositWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = clearEmployeeDirectDepositValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clearEmployeeDirectDepositAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearEmployeeDirectDepositValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClearEmployeeDirectDepositRequestBuilder {
        private final String companyDomain;
        private final String id;

        private ClearEmployeeDirectDepositRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for clearEmployeeDirectDeposit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clearEmployeeDirectDepositCall(companyDomain, id, _callback);
        }


        /**
         * Execute clearEmployeeDirectDeposit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            clearEmployeeDirectDepositWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute clearEmployeeDirectDeposit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return clearEmployeeDirectDepositWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute clearEmployeeDirectDeposit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return clearEmployeeDirectDepositAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Clear an employee&#39;s direct deposit information
     * Clear an employee&#39;s direct deposit information
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @return ClearEmployeeDirectDepositRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee&#39;s direct deposit declarations. </td><td>  -  </td></tr>
     </table>
     */
    public ClearEmployeeDirectDepositRequestBuilder clearEmployeeDirectDeposit(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ClearEmployeeDirectDepositRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call clearEmployeeUnpaidPaystubsCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearEmployeeUnpaidPaystubsValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clearEmployeeUnpaidPaystubs(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clearEmployeeUnpaidPaystubs(Async)");
        }

        return clearEmployeeUnpaidPaystubsCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> clearEmployeeUnpaidPaystubsWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = clearEmployeeUnpaidPaystubsValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clearEmployeeUnpaidPaystubsAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearEmployeeUnpaidPaystubsValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClearEmployeeUnpaidPaystubsRequestBuilder {
        private final String companyDomain;
        private final String id;

        private ClearEmployeeUnpaidPaystubsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for clearEmployeeUnpaidPaystubs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unpaid paystub cleared </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Unauthorized </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clearEmployeeUnpaidPaystubsCall(companyDomain, id, _callback);
        }


        /**
         * Execute clearEmployeeUnpaidPaystubs request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unpaid paystub cleared </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Unauthorized </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            clearEmployeeUnpaidPaystubsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute clearEmployeeUnpaidPaystubs request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unpaid paystub cleared </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Unauthorized </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return clearEmployeeUnpaidPaystubsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute clearEmployeeUnpaidPaystubs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unpaid paystub cleared </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Unauthorized </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return clearEmployeeUnpaidPaystubsAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Clear an employee&#39;s unpaid paystubs
     * Clear an employee&#39;s unpaid paystubs
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee id. (required)
     * @return ClearEmployeeUnpaidPaystubsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unpaid paystub cleared </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unauthorized </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * X-BambooHR-Message - Human readable error to help when debugging, suitable for logging <br>  </td></tr>
     </table>
     */
    public ClearEmployeeUnpaidPaystubsRequestBuilder clearEmployeeUnpaidPaystubs(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ClearEmployeeUnpaidPaystubsRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call clearEmployeeWithholdingsCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_withholding/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearEmployeeWithholdingsValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clearEmployeeWithholdings(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clearEmployeeWithholdings(Async)");
        }

        return clearEmployeeWithholdingsCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> clearEmployeeWithholdingsWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = clearEmployeeWithholdingsValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clearEmployeeWithholdingsAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearEmployeeWithholdingsValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClearEmployeeWithholdingsRequestBuilder {
        private final String companyDomain;
        private final String id;

        private ClearEmployeeWithholdingsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for clearEmployeeWithholdings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clearEmployeeWithholdingsCall(companyDomain, id, _callback);
        }


        /**
         * Execute clearEmployeeWithholdings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            clearEmployeeWithholdingsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute clearEmployeeWithholdings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return clearEmployeeWithholdingsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute clearEmployeeWithholdings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee withholdings information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return clearEmployeeWithholdingsAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Clear an employee&#39;s default withholdings
     * Clear an employee&#39;s default withholdings
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee id. (required)
     * @return ClearEmployeeWithholdingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee withholdings information. </td><td>  -  </td></tr>
     </table>
     */
    public ClearEmployeeWithholdingsRequestBuilder clearEmployeeWithholdings(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ClearEmployeeWithholdingsRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call deleteEmployeePaystubCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_pay_stub/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmployeePaystubValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteEmployeePaystub(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEmployeePaystub(Async)");
        }

        return deleteEmployeePaystubCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> deleteEmployeePaystubWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteEmployeePaystubValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmployeePaystubAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmployeePaystubValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEmployeePaystubRequestBuilder {
        private final String companyDomain;
        private final String id;

        private DeleteEmployeePaystubRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for deleteEmployeePaystub
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee unpaid paystub information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmployeePaystubCall(companyDomain, id, _callback);
        }


        /**
         * Execute deleteEmployeePaystub request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee unpaid paystub information. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmployeePaystubWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteEmployeePaystub request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee unpaid paystub information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmployeePaystubWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteEmployeePaystub request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee unpaid paystub information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmployeePaystubAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Delete an employee&#39;s paystub
     * Delete an employee&#39;s paystub
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the paystub (record) ID. (required)
     * @return DeleteEmployeePaystubRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON success document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user doesn&#39;t have access to edit the employee unpaid paystub information. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEmployeePaystubRequestBuilder deleteEmployeePaystub(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteEmployeePaystubRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call employeeDirectDepositInfoCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_direct_deposit_accounts/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeeDirectDepositInfoValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling employeeDirectDepositInfo(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling employeeDirectDepositInfo(Async)");
        }

        return employeeDirectDepositInfoCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> employeeDirectDepositInfoWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = employeeDirectDepositInfoValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call employeeDirectDepositInfoAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeeDirectDepositInfoValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmployeeDirectDepositInfoRequestBuilder {
        private final String companyDomain;
        private final String id;

        private EmployeeDirectDepositInfoRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for employeeDirectDepositInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return employeeDirectDepositInfoCall(companyDomain, id, _callback);
        }


        /**
         * Execute employeeDirectDepositInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            employeeDirectDepositInfoWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute employeeDirectDepositInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return employeeDirectDepositInfoWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute employeeDirectDepositInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return employeeDirectDepositInfoAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get an employee&#39;s direct deposit information
     * Get an employee&#39;s direct deposit information
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee. (required)
     * @return EmployeeDirectDepositInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeDirectDepositInfoRequestBuilder employeeDirectDepositInfo(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new EmployeeDirectDepositInfoRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getDefaultWithholdingsCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_withholding/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultWithholdingsValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDefaultWithholdings(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDefaultWithholdings(Async)");
        }

        return getDefaultWithholdingsCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getDefaultWithholdingsWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getDefaultWithholdingsValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDefaultWithholdingsAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultWithholdingsValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDefaultWithholdingsRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetDefaultWithholdingsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getDefaultWithholdings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultWithholdingsCall(companyDomain, id, _callback);
        }


        /**
         * Execute getDefaultWithholdings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDefaultWithholdingsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getDefaultWithholdings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDefaultWithholdingsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getDefaultWithholdings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDefaultWithholdingsAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get an employee&#39;s default withholdings
     * Get an employee&#39;s default withholdings
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee. (required)
     * @return GetDefaultWithholdingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultWithholdingsRequestBuilder getDefaultWithholdings(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDefaultWithholdingsRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getPaystubCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_pay_stub/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaystubValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getPaystub(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPaystub(Async)");
        }

        return getPaystubCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getPaystubWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getPaystubValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getPaystubAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaystubValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetPaystubRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetPaystubRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getPaystub
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaystubCall(companyDomain, id, _callback);
        }


        /**
         * Execute getPaystub request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getPaystubWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getPaystub request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getPaystubWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getPaystub request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getPaystubAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get an employee&#39;s paystub
     * Get an employee&#39;s paystub
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the paystub (record) ID. (required)
     * @return GetPaystubRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid employee ID is provided </td><td>  -  </td></tr>
     </table>
     */
    public GetPaystubRequestBuilder getPaystub(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetPaystubRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getUnpaidPaystubsCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnpaidPaystubsValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getUnpaidPaystubs(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUnpaidPaystubs(Async)");
        }

        return getUnpaidPaystubsCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getUnpaidPaystubsWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getUnpaidPaystubsValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getUnpaidPaystubsAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnpaidPaystubsValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetUnpaidPaystubsRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetUnpaidPaystubsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getUnpaidPaystubs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnpaidPaystubsCall(companyDomain, id, _callback);
        }


        /**
         * Execute getUnpaidPaystubs request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getUnpaidPaystubsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getUnpaidPaystubs request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getUnpaidPaystubsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getUnpaidPaystubs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getUnpaidPaystubsAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get an employee&#39;s unpaid paystubs
     * Get an employee&#39;s unpaid paystubs
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee. (required)
     * @return GetUnpaidPaystubsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetUnpaidPaystubsRequestBuilder getUnpaidPaystubs(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUnpaidPaystubsRequestBuilder(companyDomain, id);
    }
}
