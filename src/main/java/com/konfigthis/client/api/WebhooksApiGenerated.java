/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.NewWebHook;
import com.konfigthis.client.model.NewWebHookFrequency;
import com.konfigthis.client.model.NewWebHookLimit;
import com.konfigthis.client.model.WebHookLogResponse;
import com.konfigthis.client.model.WebHookResponse;
import com.konfigthis.client.model.WebhooksAddNewWebhookResponse;
import com.konfigthis.client.model.WebhooksGetUserListResponse;
import com.konfigthis.client.model.WebhooksListMonitorFieldsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewWebhookCall(String companyDomain, NewWebHook newWebHook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newWebHook;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewWebhookValidateBeforeCall(String companyDomain, NewWebHook newWebHook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addNewWebhook(Async)");
        }

        // verify the required parameter 'newWebHook' is set
        if (newWebHook == null) {
            throw new ApiException("Missing the required parameter 'newWebHook' when calling addNewWebhook(Async)");
        }

        return addNewWebhookCall(companyDomain, newWebHook, _callback);

    }


    private ApiResponse<WebhooksAddNewWebhookResponse> addNewWebhookWithHttpInfo(String companyDomain, NewWebHook newWebHook) throws ApiException {
        okhttp3.Call localVarCall = addNewWebhookValidateBeforeCall(companyDomain, newWebHook, null);
        Type localVarReturnType = new TypeToken<WebhooksAddNewWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewWebhookAsync(String companyDomain, NewWebHook newWebHook, final ApiCallback<WebhooksAddNewWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewWebhookValidateBeforeCall(companyDomain, newWebHook, _callback);
        Type localVarReturnType = new TypeToken<WebhooksAddNewWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewWebhookRequestBuilder {
        private final String name;
        private final List<String> monitorFields;
        private final Map<String, String> postFields;
        private final String url;
        private final String companyDomain;
        private String format;
        private NewWebHookFrequency frequency;
        private NewWebHookLimit limit;
        private Boolean includeCompanyDomain;

        private AddNewWebhookRequestBuilder(String name, List<String> monitorFields, Map<String, String> postFields, String url, String companyDomain) {
            this.name = name;
            this.monitorFields = monitorFields;
            this.postFields = postFields;
            this.url = url;
            this.companyDomain = companyDomain;
        }

        /**
         * Set format
         * @param format The format the webhook should use (json - default, form-encoded). (optional)
         * @return AddNewWebhookRequestBuilder
         */
        public AddNewWebhookRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return AddNewWebhookRequestBuilder
         */
        public AddNewWebhookRequestBuilder frequency(NewWebHookFrequency frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return AddNewWebhookRequestBuilder
         */
        public AddNewWebhookRequestBuilder limit(NewWebHookLimit limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set includeCompanyDomain
         * @param includeCompanyDomain If set to true, the company domain will be added to the header. (optional)
         * @return AddNewWebhookRequestBuilder
         */
        public AddNewWebhookRequestBuilder includeCompanyDomain(Boolean includeCompanyDomain) {
            this.includeCompanyDomain = includeCompanyDomain;
            return this;
        }
        
        /**
         * Build call for addNewWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Webhook created, JSON output of webhook follows. Private key is included in the create webhook only! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            return addNewWebhookCall(companyDomain, newWebHook, _callback);
        }

        private NewWebHook buildBodyParams() {
            NewWebHook newWebHook = new NewWebHook();
            newWebHook.name(this.name);
            newWebHook.monitorFields(this.monitorFields);
            newWebHook.postFields(this.postFields);
            newWebHook.url(this.url);
            if (this.format != null)
            newWebHook.format(NewWebHook.FormatEnum.fromValue(this.format));
            newWebHook.frequency(this.frequency);
            newWebHook.limit(this.limit);
            newWebHook.includeCompanyDomain(this.includeCompanyDomain);
            return newWebHook;
        }

        /**
         * Execute addNewWebhook request
         * @return WebhooksAddNewWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Webhook created, JSON output of webhook follows. Private key is included in the create webhook only! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksAddNewWebhookResponse execute() throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            ApiResponse<WebhooksAddNewWebhookResponse> localVarResp = addNewWebhookWithHttpInfo(companyDomain, newWebHook);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhooksAddNewWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Webhook created, JSON output of webhook follows. Private key is included in the create webhook only! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksAddNewWebhookResponse> executeWithHttpInfo() throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            return addNewWebhookWithHttpInfo(companyDomain, newWebHook);
        }

        /**
         * Execute addNewWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Webhook created, JSON output of webhook follows. Private key is included in the create webhook only! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksAddNewWebhookResponse> _callback) throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            return addNewWebhookAsync(companyDomain, newWebHook, _callback);
        }
    }

    /**
     * Add Webhook
     * Add a new Webhook. For more details or instructions you can refer to the [webhooks API tutorial](https://documentation.bamboohr.com/docs/webhooks-api-permission-based).
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param newWebHook  (required)
     * @return AddNewWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Webhook created, JSON output of webhook follows. Private key is included in the create webhook only! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewWebhookRequestBuilder addNewWebhook(String name, List<String> monitorFields, Map<String, String> postFields, String url, String companyDomain) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (monitorFields == null) throw new IllegalArgumentException("\"monitorFields\" is required but got null");
        if (postFields == null) throw new IllegalArgumentException("\"postFields\" is required but got null");
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddNewWebhookRequestBuilder(name, monitorFields, postFields, url, companyDomain);
    }
    private okhttp3.Call deleteWebhookCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteWebhook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> deleteWebhookWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWebhookAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteWebhookRequestBuilder {
        private final String companyDomain;
        private final String id;

        private DeleteWebhookRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for deleteWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook was deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWebhookCall(companyDomain, id, _callback);
        }


        /**
         * Execute deleteWebhook request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook was deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWebhookWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteWebhook request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook was deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWebhookWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook was deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWebhookAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Delete Webhook
     * Delete a webhook that is tied to a specific user API Key.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an webhook ID that is associated with the User API key. (required)
     * @return DeleteWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWebhookRequestBuilder deleteWebhook(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteWebhookRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getUserListCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserListValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getUserList(Async)");
        }

        return getUserListCall(companyDomain, _callback);

    }


    private ApiResponse<WebhooksGetUserListResponse> getUserListWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getUserListValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<WebhooksGetUserListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserListAsync(String companyDomain, final ApiCallback<WebhooksGetUserListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserListValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<WebhooksGetUserListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserListRequestBuilder {
        private final String companyDomain;

        private GetUserListRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getUserList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of webhooks </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserListCall(companyDomain, _callback);
        }


        /**
         * Execute getUserList request
         * @return WebhooksGetUserListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of webhooks </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksGetUserListResponse execute() throws ApiException {
            ApiResponse<WebhooksGetUserListResponse> localVarResp = getUserListWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserList request with HTTP info returned
         * @return ApiResponse&lt;WebhooksGetUserListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of webhooks </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksGetUserListResponse> executeWithHttpInfo() throws ApiException {
            return getUserListWithHttpInfo(companyDomain);
        }

        /**
         * Execute getUserList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of webhooks </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksGetUserListResponse> _callback) throws ApiException {
            return getUserListAsync(companyDomain, _callback);
        }
    }

    /**
     * Gets as list of webhooks for the user API key.
     * Gets as list of webhooks for the user API key.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetUserListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of webhooks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserListRequestBuilder getUserList(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetUserListRequestBuilder(companyDomain);
    }
    private okhttp3.Call getUserWebhookCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserWebhookValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getUserWebhook(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserWebhook(Async)");
        }

        return getUserWebhookCall(companyDomain, id, _callback);

    }


    private ApiResponse<WebHookResponse> getUserWebhookWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getUserWebhookValidateBeforeCall(companyDomain, id, null);
        Type localVarReturnType = new TypeToken<WebHookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserWebhookAsync(String companyDomain, String id, final ApiCallback<WebHookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserWebhookValidateBeforeCall(companyDomain, id, _callback);
        Type localVarReturnType = new TypeToken<WebHookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserWebhookRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetUserWebhookRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getUserWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserWebhookCall(companyDomain, id, _callback);
        }


        /**
         * Execute getUserWebhook request
         * @return WebHookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public WebHookResponse execute() throws ApiException {
            ApiResponse<WebHookResponse> localVarResp = getUserWebhookWithHttpInfo(companyDomain, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebHookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebHookResponse> executeWithHttpInfo() throws ApiException {
            return getUserWebhookWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getUserWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebHookResponse> _callback) throws ApiException {
            return getUserWebhookAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get Webhook
     * Get webhook data that is tied to a specific user API Key.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id The webhook ID to display details about. (required)
     * @return GetUserWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserWebhookRequestBuilder getUserWebhook(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUserWebhookRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getWebhookLogsCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks/{id}/log"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookLogsValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getWebhookLogs(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWebhookLogs(Async)");
        }

        return getWebhookLogsCall(companyDomain, id, _callback);

    }


    private ApiResponse<WebHookLogResponse> getWebhookLogsWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getWebhookLogsValidateBeforeCall(companyDomain, id, null);
        Type localVarReturnType = new TypeToken<WebHookLogResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookLogsAsync(String companyDomain, String id, final ApiCallback<WebHookLogResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookLogsValidateBeforeCall(companyDomain, id, _callback);
        Type localVarReturnType = new TypeToken<WebHookLogResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebhookLogsRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetWebhookLogsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getWebhookLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookLogsCall(companyDomain, id, _callback);
        }


        /**
         * Execute getWebhookLogs request
         * @return WebHookLogResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
         </table>
         */
        public WebHookLogResponse execute() throws ApiException {
            ApiResponse<WebHookLogResponse> localVarResp = getWebhookLogsWithHttpInfo(companyDomain, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebhookLogs request with HTTP info returned
         * @return ApiResponse&lt;WebHookLogResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebHookLogResponse> executeWithHttpInfo() throws ApiException {
            return getWebhookLogsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getWebhookLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebHookLogResponse> _callback) throws ApiException {
            return getWebhookLogsAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get Webhook Logs
     * Get webhook logs for specific webhook id that is associated with the user API Key.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id The webhook ID to get logs about. (required)
     * @return GetWebhookLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Webhook </td><td>  -  </td></tr>
     </table>
     */
    public GetWebhookLogsRequestBuilder getWebhookLogs(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetWebhookLogsRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call listMonitorFieldsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks/monitor_fields"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMonitorFieldsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listMonitorFields(Async)");
        }

        return listMonitorFieldsCall(companyDomain, _callback);

    }


    private ApiResponse<WebhooksListMonitorFieldsResponse> listMonitorFieldsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = listMonitorFieldsValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<WebhooksListMonitorFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMonitorFieldsAsync(String companyDomain, final ApiCallback<WebhooksListMonitorFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMonitorFieldsValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<WebhooksListMonitorFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMonitorFieldsRequestBuilder {
        private final String companyDomain;

        private ListMonitorFieldsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for listMonitorFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of logs </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMonitorFieldsCall(companyDomain, _callback);
        }


        /**
         * Execute listMonitorFields request
         * @return WebhooksListMonitorFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of logs </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksListMonitorFieldsResponse execute() throws ApiException {
            ApiResponse<WebhooksListMonitorFieldsResponse> localVarResp = listMonitorFieldsWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMonitorFields request with HTTP info returned
         * @return ApiResponse&lt;WebhooksListMonitorFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of logs </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksListMonitorFieldsResponse> executeWithHttpInfo() throws ApiException {
            return listMonitorFieldsWithHttpInfo(companyDomain);
        }

        /**
         * Execute listMonitorFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of logs </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksListMonitorFieldsResponse> _callback) throws ApiException {
            return listMonitorFieldsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get monitor fields
     * Get a list fields webhooks can monitor monitor
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListMonitorFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of logs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ListMonitorFieldsRequestBuilder listMonitorFields(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListMonitorFieldsRequestBuilder(companyDomain);
    }
    private okhttp3.Call updateWebhookByIdCall(String companyDomain, String id, NewWebHook newWebHook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newWebHook;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/webhooks/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookByIdValidateBeforeCall(String companyDomain, String id, NewWebHook newWebHook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateWebhookById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWebhookById(Async)");
        }

        // verify the required parameter 'newWebHook' is set
        if (newWebHook == null) {
            throw new ApiException("Missing the required parameter 'newWebHook' when calling updateWebhookById(Async)");
        }

        return updateWebhookByIdCall(companyDomain, id, newWebHook, _callback);

    }


    private ApiResponse<WebHookResponse> updateWebhookByIdWithHttpInfo(String companyDomain, String id, NewWebHook newWebHook) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookByIdValidateBeforeCall(companyDomain, id, newWebHook, null);
        Type localVarReturnType = new TypeToken<WebHookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookByIdAsync(String companyDomain, String id, NewWebHook newWebHook, final ApiCallback<WebHookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookByIdValidateBeforeCall(companyDomain, id, newWebHook, _callback);
        Type localVarReturnType = new TypeToken<WebHookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebhookByIdRequestBuilder {
        private final String name;
        private final List<String> monitorFields;
        private final Map<String, String> postFields;
        private final String url;
        private final String companyDomain;
        private final String id;
        private String format;
        private NewWebHookFrequency frequency;
        private NewWebHookLimit limit;
        private Boolean includeCompanyDomain;

        private UpdateWebhookByIdRequestBuilder(String name, List<String> monitorFields, Map<String, String> postFields, String url, String companyDomain, String id) {
            this.name = name;
            this.monitorFields = monitorFields;
            this.postFields = postFields;
            this.url = url;
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Set format
         * @param format The format the webhook should use (json - default, form-encoded). (optional)
         * @return UpdateWebhookByIdRequestBuilder
         */
        public UpdateWebhookByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return UpdateWebhookByIdRequestBuilder
         */
        public UpdateWebhookByIdRequestBuilder frequency(NewWebHookFrequency frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return UpdateWebhookByIdRequestBuilder
         */
        public UpdateWebhookByIdRequestBuilder limit(NewWebHookLimit limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set includeCompanyDomain
         * @param includeCompanyDomain If set to true, the company domain will be added to the header. (optional)
         * @return UpdateWebhookByIdRequestBuilder
         */
        public UpdateWebhookByIdRequestBuilder includeCompanyDomain(Boolean includeCompanyDomain) {
            this.includeCompanyDomain = includeCompanyDomain;
            return this;
        }
        
        /**
         * Build call for updateWebhookById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook updated successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            return updateWebhookByIdCall(companyDomain, id, newWebHook, _callback);
        }

        private NewWebHook buildBodyParams() {
            NewWebHook newWebHook = new NewWebHook();
            newWebHook.name(this.name);
            newWebHook.monitorFields(this.monitorFields);
            newWebHook.postFields(this.postFields);
            newWebHook.url(this.url);
            if (this.format != null)
            newWebHook.format(NewWebHook.FormatEnum.fromValue(this.format));
            newWebHook.frequency(this.frequency);
            newWebHook.limit(this.limit);
            newWebHook.includeCompanyDomain(this.includeCompanyDomain);
            return newWebHook;
        }

        /**
         * Execute updateWebhookById request
         * @return WebHookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook updated successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public WebHookResponse execute() throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            ApiResponse<WebHookResponse> localVarResp = updateWebhookByIdWithHttpInfo(companyDomain, id, newWebHook);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebhookById request with HTTP info returned
         * @return ApiResponse&lt;WebHookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook updated successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebHookResponse> executeWithHttpInfo() throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            return updateWebhookByIdWithHttpInfo(companyDomain, id, newWebHook);
        }

        /**
         * Execute updateWebhookById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook updated successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebHookResponse> _callback) throws ApiException {
            NewWebHook newWebHook = buildBodyParams();
            return updateWebhookByIdAsync(companyDomain, id, newWebHook, _callback);
        }
    }

    /**
     * Update Webhook
     * Update a webhook, based on webhook ID.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is a webhook ID. (required)
     * @param newWebHook  (required)
     * @return UpdateWebhookByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user API key is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebhookByIdRequestBuilder updateWebhookById(String name, List<String> monitorFields, Map<String, String> postFields, String url, String companyDomain, String id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (monitorFields == null) throw new IllegalArgumentException("\"monitorFields\" is required but got null");
        if (postFields == null) throw new IllegalArgumentException("\"postFields\" is required but got null");
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateWebhookByIdRequestBuilder(name, monitorFields, postFields, url, companyDomain, id);
    }
}
