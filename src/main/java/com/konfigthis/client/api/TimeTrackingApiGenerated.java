/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequest;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequest1;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequest1ClockOutsInner;
import com.konfigthis.client.model.TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner;
import com.konfigthis.client.model.TimeTrackingClockInEmployeeRequest;
import com.konfigthis.client.model.TimeTrackingClockInEmployeeRequestClockInLocation;
import com.konfigthis.client.model.TimeTrackingClockOutEmployeeAtSpecificTimeRequest;
import com.konfigthis.client.model.TimeTrackingClockOutEmployeeRequest;
import com.konfigthis.client.model.TimeTrackingClockOutEmployeeRequestClockOutLocation;
import com.konfigthis.client.model.TimeTrackingDeleteClockEntriesRequest;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequest;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequestClockInLocation;
import com.konfigthis.client.model.TimeTrackingEditClockedInEntryDataRequestClockOutLocation;
import com.konfigthis.client.model.TimeTrackingGetTimesheetsByIdsRequest;
import com.konfigthis.client.model.TimeTrackingStoreClockEntriesRequest;
import com.konfigthis.client.model.TimeTrackingStoreClockEntriesRequestEntriesInner;
import com.konfigthis.client.model.TimeTrackingStoreDailyEntriesRequest;
import com.konfigthis.client.model.TimeTrackingStoreDailyEntriesRequestEntriesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeTrackingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveEmployeeTimesheetsCall(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingApproveEmployeeTimesheetsRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/timesheets/approve"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveEmployeeTimesheetsValidateBeforeCall(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling approveEmployeeTimesheets(Async)");
        }

        // verify the required parameter 'timeTrackingApproveEmployeeTimesheetsRequest' is set
        if (timeTrackingApproveEmployeeTimesheetsRequest == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingApproveEmployeeTimesheetsRequest' when calling approveEmployeeTimesheets(Async)");
        }

        return approveEmployeeTimesheetsCall(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest, _callback);

    }


    private ApiResponse<Void> approveEmployeeTimesheetsWithHttpInfo(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest) throws ApiException {
        okhttp3.Call localVarCall = approveEmployeeTimesheetsValidateBeforeCall(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveEmployeeTimesheetsAsync(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveEmployeeTimesheetsValidateBeforeCall(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveEmployeeTimesheetsRequestBuilder {
        private final Integer lastChanged;
        private final List<TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner> timesheets;
        private final String companyDomain;

        private ApproveEmployeeTimesheetsRequestBuilder(Integer lastChanged, List<TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner> timesheets, String companyDomain) {
            this.lastChanged = lastChanged;
            this.timesheets = timesheets;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for approveEmployeeTimesheets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest = buildBodyParams();
            return approveEmployeeTimesheetsCall(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest, _callback);
        }

        private TimeTrackingApproveEmployeeTimesheetsRequest buildBodyParams() {
            TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest = new TimeTrackingApproveEmployeeTimesheetsRequest();
            timeTrackingApproveEmployeeTimesheetsRequest.lastChanged(this.lastChanged);
            timeTrackingApproveEmployeeTimesheetsRequest.timesheets(this.timesheets);
            return timeTrackingApproveEmployeeTimesheetsRequest;
        }

        /**
         * Execute approveEmployeeTimesheets request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest = buildBodyParams();
            approveEmployeeTimesheetsWithHttpInfo(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest);
        }

        /**
         * Execute approveEmployeeTimesheets request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest = buildBodyParams();
            return approveEmployeeTimesheetsWithHttpInfo(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest);
        }

        /**
         * Execute approveEmployeeTimesheets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest timeTrackingApproveEmployeeTimesheetsRequest = buildBodyParams();
            return approveEmployeeTimesheetsAsync(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest, _callback);
        }
    }

    /**
     * Approve employee timesheets
     * Approve employee timesheets
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param timeTrackingApproveEmployeeTimesheetsRequest  (required)
     * @return ApproveEmployeeTimesheetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApproveEmployeeTimesheetsRequestBuilder approveEmployeeTimesheets(Integer lastChanged, List<TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner> timesheets, String companyDomain) throws IllegalArgumentException {
        if (lastChanged == null) throw new IllegalArgumentException("\"lastChanged\" is required but got null");
        if (timesheets == null) throw new IllegalArgumentException("\"timesheets\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ApproveEmployeeTimesheetsRequestBuilder(lastChanged, timesheets, companyDomain);
    }
    private okhttp3.Call approveEmployeeTimesheets_0Call(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingApproveEmployeeTimesheetsRequest1;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/timesheets/clock_out_and_approve"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveEmployeeTimesheets_0ValidateBeforeCall(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling approveEmployeeTimesheets_0(Async)");
        }

        // verify the required parameter 'timeTrackingApproveEmployeeTimesheetsRequest1' is set
        if (timeTrackingApproveEmployeeTimesheetsRequest1 == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingApproveEmployeeTimesheetsRequest1' when calling approveEmployeeTimesheets_0(Async)");
        }

        return approveEmployeeTimesheets_0Call(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1, _callback);

    }


    private ApiResponse<Void> approveEmployeeTimesheets_0WithHttpInfo(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1) throws ApiException {
        okhttp3.Call localVarCall = approveEmployeeTimesheets_0ValidateBeforeCall(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveEmployeeTimesheets_0Async(String companyDomain, TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveEmployeeTimesheets_0ValidateBeforeCall(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveEmployeeTimesheets0RequestBuilder {
        private final String companyDomain;
        private List<TimeTrackingApproveEmployeeTimesheetsRequest1ClockOutsInner> clockOuts;

        private ApproveEmployeeTimesheets0RequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set clockOuts
         * @param clockOuts Array of clock out information (optional)
         * @return ApproveEmployeeTimesheets0RequestBuilder
         */
        public ApproveEmployeeTimesheets0RequestBuilder clockOuts(List<TimeTrackingApproveEmployeeTimesheetsRequest1ClockOutsInner> clockOuts) {
            this.clockOuts = clockOuts;
            return this;
        }
        
        /**
         * Build call for approveEmployeeTimesheets_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1 = buildBodyParams();
            return approveEmployeeTimesheets_0Call(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1, _callback);
        }

        private TimeTrackingApproveEmployeeTimesheetsRequest1 buildBodyParams() {
            TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1 = new TimeTrackingApproveEmployeeTimesheetsRequest1();
            timeTrackingApproveEmployeeTimesheetsRequest1.clockOuts(this.clockOuts);
            return timeTrackingApproveEmployeeTimesheetsRequest1;
        }

        /**
         * Execute approveEmployeeTimesheets_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1 = buildBodyParams();
            approveEmployeeTimesheets_0WithHttpInfo(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1);
        }

        /**
         * Execute approveEmployeeTimesheets_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1 = buildBodyParams();
            return approveEmployeeTimesheets_0WithHttpInfo(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1);
        }

        /**
         * Execute approveEmployeeTimesheets_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingApproveEmployeeTimesheetsRequest1 timeTrackingApproveEmployeeTimesheetsRequest1 = buildBodyParams();
            return approveEmployeeTimesheets_0Async(companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1, _callback);
        }
    }

    /**
     * Approve timesheets for employees that are currently clocked in
     * Approve timesheets for employees that are currently clocked in
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param timeTrackingApproveEmployeeTimesheetsRequest1  (required)
     * @return ApproveEmployeeTimesheets0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful approval will return a 204 - No content response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing argument </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing time tracking tool or permissions to approve. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid timesheet id. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Stale data or employee clocked in. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApproveEmployeeTimesheets0RequestBuilder approveEmployeeTimesheets_0(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ApproveEmployeeTimesheets0RequestBuilder(companyDomain);
    }
    private okhttp3.Call clockInEmployeeCall(String companyDomain, String employeeId, TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingClockInEmployeeRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/clock_in/{employeeId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clockInEmployeeValidateBeforeCall(String companyDomain, String employeeId, TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clockInEmployee(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling clockInEmployee(Async)");
        }

        return clockInEmployeeCall(companyDomain, employeeId, timeTrackingClockInEmployeeRequest, _callback);

    }


    private ApiResponse<Void> clockInEmployeeWithHttpInfo(String companyDomain, String employeeId, TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = clockInEmployeeValidateBeforeCall(companyDomain, employeeId, timeTrackingClockInEmployeeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clockInEmployeeAsync(String companyDomain, String employeeId, TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clockInEmployeeValidateBeforeCall(companyDomain, employeeId, timeTrackingClockInEmployeeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClockInEmployeeRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String start;
        private String timezone;
        private String note;
        private Integer projectId;
        private Integer taskId;
        private TimeTrackingClockInEmployeeRequestClockInLocation clockInLocation;

        private ClockInEmployeeRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set start
         * @param start The start time for the clock in. In 24 hour format HH:MM (optional)
         * @return ClockInEmployeeRequestBuilder
         */
        public ClockInEmployeeRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone associated with the clock in. (optional)
         * @return ClockInEmployeeRequestBuilder
         */
        public ClockInEmployeeRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set note
         * @param note The note associated with the clock in (optional)
         * @return ClockInEmployeeRequestBuilder
         */
        public ClockInEmployeeRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The id of the project associated with the clock in (optional)
         * @return ClockInEmployeeRequestBuilder
         */
        public ClockInEmployeeRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set taskId
         * @param taskId The id of the task associated with the clock in (optional)
         * @return ClockInEmployeeRequestBuilder
         */
        public ClockInEmployeeRequestBuilder taskId(Integer taskId) {
            this.taskId = taskId;
            return this;
        }
        
        /**
         * Set clockInLocation
         * @param clockInLocation  (optional)
         * @return ClockInEmployeeRequestBuilder
         */
        public ClockInEmployeeRequestBuilder clockInLocation(TimeTrackingClockInEmployeeRequestClockInLocation clockInLocation) {
            this.clockInLocation = clockInLocation;
            return this;
        }
        
        /**
         * Build call for clockInEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock in information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock in. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest = buildBodyParams();
            return clockInEmployeeCall(companyDomain, employeeId, timeTrackingClockInEmployeeRequest, _callback);
        }

        private TimeTrackingClockInEmployeeRequest buildBodyParams() {
            TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest = new TimeTrackingClockInEmployeeRequest();
            timeTrackingClockInEmployeeRequest.start(this.start);
            timeTrackingClockInEmployeeRequest.timezone(this.timezone);
            timeTrackingClockInEmployeeRequest.note(this.note);
            timeTrackingClockInEmployeeRequest.projectId(this.projectId);
            timeTrackingClockInEmployeeRequest.taskId(this.taskId);
            timeTrackingClockInEmployeeRequest.clockInLocation(this.clockInLocation);
            return timeTrackingClockInEmployeeRequest;
        }

        /**
         * Execute clockInEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock in information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock in. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest = buildBodyParams();
            clockInEmployeeWithHttpInfo(companyDomain, employeeId, timeTrackingClockInEmployeeRequest);
        }

        /**
         * Execute clockInEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock in information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock in. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest = buildBodyParams();
            return clockInEmployeeWithHttpInfo(companyDomain, employeeId, timeTrackingClockInEmployeeRequest);
        }

        /**
         * Execute clockInEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock in information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock in. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingClockInEmployeeRequest timeTrackingClockInEmployeeRequest = buildBodyParams();
            return clockInEmployeeAsync(companyDomain, employeeId, timeTrackingClockInEmployeeRequest, _callback);
        }
    }

    /**
     * Clock in (employee id optional)
     * Clock in (employee id optional)
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId {employeeId} is id of the employee clocking out (required)
     * @return ClockInEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the clock in information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Most likely because of missing permissions to clock in. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ClockInEmployeeRequestBuilder clockInEmployee(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ClockInEmployeeRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call clockOutEmployeeCall(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingClockOutEmployeeRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/clock_out/{employeeId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clockOutEmployeeValidateBeforeCall(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clockOutEmployee(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling clockOutEmployee(Async)");
        }

        return clockOutEmployeeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest, _callback);

    }


    private ApiResponse<Void> clockOutEmployeeWithHttpInfo(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = clockOutEmployeeValidateBeforeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clockOutEmployeeAsync(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clockOutEmployeeValidateBeforeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClockOutEmployeeRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private TimeTrackingClockOutEmployeeRequestClockOutLocation clockOutLocation;

        private ClockOutEmployeeRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set clockOutLocation
         * @param clockOutLocation  (optional)
         * @return ClockOutEmployeeRequestBuilder
         */
        public ClockOutEmployeeRequestBuilder clockOutLocation(TimeTrackingClockOutEmployeeRequestClockOutLocation clockOutLocation) {
            this.clockOutLocation = clockOutLocation;
            return this;
        }
        
        /**
         * Build call for clockOutEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock out information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock out. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest = buildBodyParams();
            return clockOutEmployeeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest, _callback);
        }

        private TimeTrackingClockOutEmployeeRequest buildBodyParams() {
            TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest = new TimeTrackingClockOutEmployeeRequest();
            timeTrackingClockOutEmployeeRequest.clockOutLocation(this.clockOutLocation);
            return timeTrackingClockOutEmployeeRequest;
        }

        /**
         * Execute clockOutEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock out information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock out. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest = buildBodyParams();
            clockOutEmployeeWithHttpInfo(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest);
        }

        /**
         * Execute clockOutEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock out information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock out. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest = buildBodyParams();
            return clockOutEmployeeWithHttpInfo(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest);
        }

        /**
         * Execute clockOutEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the clock out information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Most likely because of missing permissions to clock out. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingClockOutEmployeeRequest timeTrackingClockOutEmployeeRequest = buildBodyParams();
            return clockOutEmployeeAsync(companyDomain, employeeId, timeTrackingClockOutEmployeeRequest, _callback);
        }
    }

    /**
     * Clock out (employee id optional)
     * Clock out (employee id optional)
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId {employeeId} is id of the employee clocking out (required)
     * @return ClockOutEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the clock out information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Most likely because of missing permissions to clock out. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Employee already clocked in or invalid timesheet type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ClockOutEmployeeRequestBuilder clockOutEmployee(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ClockOutEmployeeRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call clockOutEmployeeAtSpecificTimeCall(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingClockOutEmployeeAtSpecificTimeRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_out/datetime"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clockOutEmployeeAtSpecificTimeValidateBeforeCall(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clockOutEmployeeAtSpecificTime(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling clockOutEmployeeAtSpecificTime(Async)");
        }

        return clockOutEmployeeAtSpecificTimeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest, _callback);

    }


    private ApiResponse<Void> clockOutEmployeeAtSpecificTimeWithHttpInfo(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest) throws ApiException {
        okhttp3.Call localVarCall = clockOutEmployeeAtSpecificTimeValidateBeforeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clockOutEmployeeAtSpecificTimeAsync(String companyDomain, String employeeId, TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clockOutEmployeeAtSpecificTimeValidateBeforeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClockOutEmployeeAtSpecificTimeRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String datetime;
        private String timezone;
        private Integer employeeId;

        private ClockOutEmployeeAtSpecificTimeRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set datetime
         * @param datetime Date time for clock out in atom format.  (optional)
         * @return ClockOutEmployeeAtSpecificTimeRequestBuilder
         */
        public ClockOutEmployeeAtSpecificTimeRequestBuilder datetime(String datetime) {
            this.datetime = datetime;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone Timezone of the time entry (optional)
         * @return ClockOutEmployeeAtSpecificTimeRequestBuilder
         */
        public ClockOutEmployeeAtSpecificTimeRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId The employeeId for the time entry. (optional)
         * @return ClockOutEmployeeAtSpecificTimeRequestBuilder
         */
        public ClockOutEmployeeAtSpecificTimeRequestBuilder employeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Build call for clockOutEmployeeAtSpecificTime
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest = buildBodyParams();
            return clockOutEmployeeAtSpecificTimeCall(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest, _callback);
        }

        private TimeTrackingClockOutEmployeeAtSpecificTimeRequest buildBodyParams() {
            TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest = new TimeTrackingClockOutEmployeeAtSpecificTimeRequest();
            timeTrackingClockOutEmployeeAtSpecificTimeRequest.datetime(this.datetime);
            timeTrackingClockOutEmployeeAtSpecificTimeRequest.timezone(this.timezone);
            timeTrackingClockOutEmployeeAtSpecificTimeRequest.employeeId(this.employeeId);
            return timeTrackingClockOutEmployeeAtSpecificTimeRequest;
        }

        /**
         * Execute clockOutEmployeeAtSpecificTime request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest = buildBodyParams();
            clockOutEmployeeAtSpecificTimeWithHttpInfo(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest);
        }

        /**
         * Execute clockOutEmployeeAtSpecificTime request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest = buildBodyParams();
            return clockOutEmployeeAtSpecificTimeWithHttpInfo(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest);
        }

        /**
         * Execute clockOutEmployeeAtSpecificTime request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingClockOutEmployeeAtSpecificTimeRequest timeTrackingClockOutEmployeeAtSpecificTimeRequest = buildBodyParams();
            return clockOutEmployeeAtSpecificTimeAsync(companyDomain, employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest, _callback);
        }
    }

    /**
     * Clock out an employee at a specific time
     * Clock out an employee at a specific time
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to whom the projects belong. (required)
     * @return ClockOutEmployeeAtSpecificTimeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ClockOutEmployeeAtSpecificTimeRequestBuilder clockOutEmployeeAtSpecificTime(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ClockOutEmployeeAtSpecificTimeRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call deleteClockEntriesCall(String companyDomain, TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingDeleteClockEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/clock_entries"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClockEntriesValidateBeforeCall(String companyDomain, TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteClockEntries(Async)");
        }

        // verify the required parameter 'timeTrackingDeleteClockEntriesRequest' is set
        if (timeTrackingDeleteClockEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingDeleteClockEntriesRequest' when calling deleteClockEntries(Async)");
        }

        return deleteClockEntriesCall(companyDomain, timeTrackingDeleteClockEntriesRequest, _callback);

    }


    private ApiResponse<Void> deleteClockEntriesWithHttpInfo(String companyDomain, TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteClockEntriesValidateBeforeCall(companyDomain, timeTrackingDeleteClockEntriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteClockEntriesAsync(String companyDomain, TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClockEntriesValidateBeforeCall(companyDomain, timeTrackingDeleteClockEntriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteClockEntriesRequestBuilder {
        private final String companyDomain;
        private List<Integer> clockEntryIds;

        private DeleteClockEntriesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set clockEntryIds
         * @param clockEntryIds  (optional)
         * @return DeleteClockEntriesRequestBuilder
         */
        public DeleteClockEntriesRequestBuilder clockEntryIds(List<Integer> clockEntryIds) {
            this.clockEntryIds = clockEntryIds;
            return this;
        }
        
        /**
         * Build call for deleteClockEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions or timesheet already approved. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If clock timesheet, may still be clocked in. Have to clock out first. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest = buildBodyParams();
            return deleteClockEntriesCall(companyDomain, timeTrackingDeleteClockEntriesRequest, _callback);
        }

        private TimeTrackingDeleteClockEntriesRequest buildBodyParams() {
            TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest = new TimeTrackingDeleteClockEntriesRequest();
            timeTrackingDeleteClockEntriesRequest.clockEntryIds(this.clockEntryIds);
            return timeTrackingDeleteClockEntriesRequest;
        }

        /**
         * Execute deleteClockEntries request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions or timesheet already approved. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If clock timesheet, may still be clocked in. Have to clock out first. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest = buildBodyParams();
            deleteClockEntriesWithHttpInfo(companyDomain, timeTrackingDeleteClockEntriesRequest);
        }

        /**
         * Execute deleteClockEntries request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions or timesheet already approved. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If clock timesheet, may still be clocked in. Have to clock out first. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest = buildBodyParams();
            return deleteClockEntriesWithHttpInfo(companyDomain, timeTrackingDeleteClockEntriesRequest);
        }

        /**
         * Execute deleteClockEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions or timesheet already approved. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If clock timesheet, may still be clocked in. Have to clock out first. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingDeleteClockEntriesRequest timeTrackingDeleteClockEntriesRequest = buildBodyParams();
            return deleteClockEntriesAsync(companyDomain, timeTrackingDeleteClockEntriesRequest, _callback);
        }
    }

    /**
     * Delete clock entries
     * Delete clock entries
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param timeTrackingDeleteClockEntriesRequest  (required)
     * @return DeleteClockEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions or timesheet already approved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If clock timesheet, may still be clocked in. Have to clock out first. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteClockEntriesRequestBuilder deleteClockEntries(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new DeleteClockEntriesRequestBuilder(companyDomain);
    }
    private okhttp3.Call editClockedInEntryDataCall(String companyDomain, String employeeId, TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingEditClockedInEntryDataRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_in/data"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editClockedInEntryDataValidateBeforeCall(String companyDomain, String employeeId, TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling editClockedInEntryData(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling editClockedInEntryData(Async)");
        }

        return editClockedInEntryDataCall(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest, _callback);

    }


    private ApiResponse<Void> editClockedInEntryDataWithHttpInfo(String companyDomain, String employeeId, TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest) throws ApiException {
        okhttp3.Call localVarCall = editClockedInEntryDataValidateBeforeCall(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call editClockedInEntryDataAsync(String companyDomain, String employeeId, TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editClockedInEntryDataValidateBeforeCall(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EditClockedInEntryDataRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String start;
        private String timezone;
        private String note;
        private Integer projectId;
        private Integer taskId;
        private TimeTrackingEditClockedInEntryDataRequestClockInLocation clockInLocation;
        private TimeTrackingEditClockedInEntryDataRequestClockOutLocation clockOutLocation;

        private EditClockedInEntryDataRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set start
         * @param start The start time for the clock in. In 24 hour format HH:MM (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone associated with the clock in. (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set note
         * @param note The note associated with the clock in (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The id of the project associated with the clock in (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set taskId
         * @param taskId The id of the task associated with the clock in (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder taskId(Integer taskId) {
            this.taskId = taskId;
            return this;
        }
        
        /**
         * Set clockInLocation
         * @param clockInLocation  (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder clockInLocation(TimeTrackingEditClockedInEntryDataRequestClockInLocation clockInLocation) {
            this.clockInLocation = clockInLocation;
            return this;
        }
        
        /**
         * Set clockOutLocation
         * @param clockOutLocation  (optional)
         * @return EditClockedInEntryDataRequestBuilder
         */
        public EditClockedInEntryDataRequestBuilder clockOutLocation(TimeTrackingEditClockedInEntryDataRequestClockOutLocation clockOutLocation) {
            this.clockOutLocation = clockOutLocation;
            return this;
        }
        
        /**
         * Build call for editClockedInEntryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Precondition failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest = buildBodyParams();
            return editClockedInEntryDataCall(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest, _callback);
        }

        private TimeTrackingEditClockedInEntryDataRequest buildBodyParams() {
            TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest = new TimeTrackingEditClockedInEntryDataRequest();
            timeTrackingEditClockedInEntryDataRequest.start(this.start);
            timeTrackingEditClockedInEntryDataRequest.timezone(this.timezone);
            timeTrackingEditClockedInEntryDataRequest.note(this.note);
            timeTrackingEditClockedInEntryDataRequest.projectId(this.projectId);
            timeTrackingEditClockedInEntryDataRequest.taskId(this.taskId);
            timeTrackingEditClockedInEntryDataRequest.clockInLocation(this.clockInLocation);
            timeTrackingEditClockedInEntryDataRequest.clockOutLocation(this.clockOutLocation);
            return timeTrackingEditClockedInEntryDataRequest;
        }

        /**
         * Execute editClockedInEntryData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Precondition failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest = buildBodyParams();
            editClockedInEntryDataWithHttpInfo(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest);
        }

        /**
         * Execute editClockedInEntryData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Precondition failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest = buildBodyParams();
            return editClockedInEntryDataWithHttpInfo(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest);
        }

        /**
         * Execute editClockedInEntryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Precondition failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingEditClockedInEntryDataRequest timeTrackingEditClockedInEntryDataRequest = buildBodyParams();
            return editClockedInEntryDataAsync(companyDomain, employeeId, timeTrackingEditClockedInEntryDataRequest, _callback);
        }
    }

    /**
     * Edit information on the currently clocked in entry
     * Edit information on the currently clocked in entry
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to whom the projects belong. (required)
     * @return EditClockedInEntryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict found. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public EditClockedInEntryDataRequestBuilder editClockedInEntryData(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new EditClockedInEntryDataRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call employeeClockedInCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/is_clocked_in"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeeClockedInValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling employeeClockedIn(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling employeeClockedIn(Async)");
        }

        return employeeClockedInCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<Void> employeeClockedInWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = employeeClockedInValidateBeforeCall(companyDomain, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call employeeClockedInAsync(String companyDomain, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeeClockedInValidateBeforeCall(companyDomain, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmployeeClockedInRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private EmployeeClockedInRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for employeeClockedIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return employeeClockedInCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute employeeClockedIn request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            employeeClockedInWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute employeeClockedIn request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return employeeClockedInWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute employeeClockedIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return employeeClockedInAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Is employee clocked in?
     * Is employee clocked in?
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of employee to whom the clock entry belongs. (required)
     * @return EmployeeClockedInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeClockedInRequestBuilder employeeClockedIn(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new EmployeeClockedInRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call employeeTimesheetGetCall(String companyDomain, String employeeId, String timesheetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/timesheet/{timesheetId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "timesheetId" + "}", localVarApiClient.escapeString(timesheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeeTimesheetGetValidateBeforeCall(String companyDomain, String employeeId, String timesheetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling employeeTimesheetGet(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling employeeTimesheetGet(Async)");
        }

        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling employeeTimesheetGet(Async)");
        }

        return employeeTimesheetGetCall(companyDomain, employeeId, timesheetId, _callback);

    }


    private ApiResponse<Void> employeeTimesheetGetWithHttpInfo(String companyDomain, String employeeId, String timesheetId) throws ApiException {
        okhttp3.Call localVarCall = employeeTimesheetGetValidateBeforeCall(companyDomain, employeeId, timesheetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call employeeTimesheetGetAsync(String companyDomain, String employeeId, String timesheetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeeTimesheetGetValidateBeforeCall(companyDomain, employeeId, timesheetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmployeeTimesheetGetRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String timesheetId;

        private EmployeeTimesheetGetRequestBuilder(String companyDomain, String employeeId, String timesheetId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.timesheetId = timesheetId;
        }

        /**
         * Build call for employeeTimesheetGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the timesheet information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return employeeTimesheetGetCall(companyDomain, employeeId, timesheetId, _callback);
        }


        /**
         * Execute employeeTimesheetGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the timesheet information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            employeeTimesheetGetWithHttpInfo(companyDomain, employeeId, timesheetId);
        }

        /**
         * Execute employeeTimesheetGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the timesheet information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return employeeTimesheetGetWithHttpInfo(companyDomain, employeeId, timesheetId);
        }

        /**
         * Execute employeeTimesheetGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the timesheet information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return employeeTimesheetGetAsync(companyDomain, employeeId, timesheetId, _callback);
        }
    }

    /**
     * Get a timesheet for an employee
     * Get a timesheet for an employee
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of employee to whom the timesheet belongs. (required)
     * @param timesheetId timesheetId is the id to whom the timesheet belongs. (required)
     * @return EmployeeTimesheetGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the timesheet information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeTimesheetGetRequestBuilder employeeTimesheetGet(String companyDomain, String employeeId, String timesheetId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (timesheetId == null) throw new IllegalArgumentException("\"timesheetId\" is required but got null");
            

        return new EmployeeTimesheetGetRequestBuilder(companyDomain, employeeId, timesheetId);
    }
    private okhttp3.Call getClockEntryCall(String companyDomain, String employeeId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_entries/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClockEntryValidateBeforeCall(String companyDomain, String employeeId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getClockEntry(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getClockEntry(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClockEntry(Async)");
        }

        return getClockEntryCall(companyDomain, employeeId, id, _callback);

    }


    private ApiResponse<Void> getClockEntryWithHttpInfo(String companyDomain, String employeeId, String id) throws ApiException {
        okhttp3.Call localVarCall = getClockEntryValidateBeforeCall(companyDomain, employeeId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getClockEntryAsync(String companyDomain, String employeeId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClockEntryValidateBeforeCall(companyDomain, employeeId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetClockEntryRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String id;

        private GetClockEntryRequestBuilder(String companyDomain, String employeeId, String id) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.id = id;
        }

        /**
         * Build call for getClockEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClockEntryCall(companyDomain, employeeId, id, _callback);
        }


        /**
         * Execute getClockEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getClockEntryWithHttpInfo(companyDomain, employeeId, id);
        }

        /**
         * Execute getClockEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getClockEntryWithHttpInfo(companyDomain, employeeId, id);
        }

        /**
         * Execute getClockEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getClockEntryAsync(companyDomain, employeeId, id, _callback);
        }
    }

    /**
     * Get a clock entry
     * Get a clock entry
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of employee to whom the clock entry belongs. (required)
     * @param id the id to whom the clock entry belongs. (required)
     * @return GetClockEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetClockEntryRequestBuilder getClockEntry(String companyDomain, String employeeId, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetClockEntryRequestBuilder(companyDomain, employeeId, id);
    }
    private okhttp3.Call getDailyEntryCall(String companyDomain, String employeeId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/daily_entries/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyEntryValidateBeforeCall(String companyDomain, String employeeId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDailyEntry(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getDailyEntry(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDailyEntry(Async)");
        }

        return getDailyEntryCall(companyDomain, employeeId, id, _callback);

    }


    private ApiResponse<Void> getDailyEntryWithHttpInfo(String companyDomain, String employeeId, String id) throws ApiException {
        okhttp3.Call localVarCall = getDailyEntryValidateBeforeCall(companyDomain, employeeId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDailyEntryAsync(String companyDomain, String employeeId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyEntryValidateBeforeCall(companyDomain, employeeId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDailyEntryRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String id;

        private GetDailyEntryRequestBuilder(String companyDomain, String employeeId, String id) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.id = id;
        }

        /**
         * Build call for getDailyEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailyEntryCall(companyDomain, employeeId, id, _callback);
        }


        /**
         * Execute getDailyEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDailyEntryWithHttpInfo(companyDomain, employeeId, id);
        }

        /**
         * Execute getDailyEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDailyEntryWithHttpInfo(companyDomain, employeeId, id);
        }

        /**
         * Execute getDailyEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDailyEntryAsync(companyDomain, employeeId, id, _callback);
        }
    }

    /**
     * Get a daily entry
     * Get a daily entry
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of employee to whom the daily entry belongs. (required)
     * @param id the id to whom the daily entry belongs. (required)
     * @return GetDailyEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetDailyEntryRequestBuilder getDailyEntry(String companyDomain, String employeeId, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDailyEntryRequestBuilder(companyDomain, employeeId, id);
    }
    private okhttp3.Call getProjectTasksCall(String companyDomain, String employeeId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects/{projectId}/tasks"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectTasksValidateBeforeCall(String companyDomain, String employeeId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getProjectTasks(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getProjectTasks(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectTasks(Async)");
        }

        return getProjectTasksCall(companyDomain, employeeId, projectId, _callback);

    }


    private ApiResponse<Void> getProjectTasksWithHttpInfo(String companyDomain, String employeeId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectTasksValidateBeforeCall(companyDomain, employeeId, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getProjectTasksAsync(String companyDomain, String employeeId, String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectTasksValidateBeforeCall(companyDomain, employeeId, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetProjectTasksRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String projectId;

        private GetProjectTasksRequestBuilder(String companyDomain, String employeeId, String projectId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.projectId = projectId;
        }

        /**
         * Build call for getProjectTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the task information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectTasksCall(companyDomain, employeeId, projectId, _callback);
        }


        /**
         * Execute getProjectTasks request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the task information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getProjectTasksWithHttpInfo(companyDomain, employeeId, projectId);
        }

        /**
         * Execute getProjectTasks request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the task information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getProjectTasksWithHttpInfo(companyDomain, employeeId, projectId);
        }

        /**
         * Execute getProjectTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the task information. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getProjectTasksAsync(companyDomain, employeeId, projectId, _callback);
        }
    }

    /**
     * Get tasks for a project
     * Get tasks for a project
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to whom the projects belong. (required)
     * @param projectId id of the project to which the tasks belong. (required)
     * @return GetProjectTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the task information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid permissions. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectTasksRequestBuilder getProjectTasks(String companyDomain, String employeeId, String projectId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new GetProjectTasksRequestBuilder(companyDomain, employeeId, projectId);
    }
    private okhttp3.Call getTimesheetsByIdsCall(String companyDomain, TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingGetTimesheetsByIdsRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/timesheets"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimesheetsByIdsValidateBeforeCall(String companyDomain, TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getTimesheetsByIds(Async)");
        }

        // verify the required parameter 'timeTrackingGetTimesheetsByIdsRequest' is set
        if (timeTrackingGetTimesheetsByIdsRequest == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingGetTimesheetsByIdsRequest' when calling getTimesheetsByIds(Async)");
        }

        return getTimesheetsByIdsCall(companyDomain, timeTrackingGetTimesheetsByIdsRequest, _callback);

    }


    private ApiResponse<Void> getTimesheetsByIdsWithHttpInfo(String companyDomain, TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest) throws ApiException {
        okhttp3.Call localVarCall = getTimesheetsByIdsValidateBeforeCall(companyDomain, timeTrackingGetTimesheetsByIdsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getTimesheetsByIdsAsync(String companyDomain, TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimesheetsByIdsValidateBeforeCall(companyDomain, timeTrackingGetTimesheetsByIdsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetTimesheetsByIdsRequestBuilder {
        private final String timesheets;
        private final String companyDomain;

        private GetTimesheetsByIdsRequestBuilder(String timesheets, String companyDomain) {
            this.timesheets = timesheets;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getTimesheetsByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No timesheet ids given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions to view all or some of the timesheets. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Timesheet not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest = buildBodyParams();
            return getTimesheetsByIdsCall(companyDomain, timeTrackingGetTimesheetsByIdsRequest, _callback);
        }

        private TimeTrackingGetTimesheetsByIdsRequest buildBodyParams() {
            TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest = new TimeTrackingGetTimesheetsByIdsRequest();
            timeTrackingGetTimesheetsByIdsRequest.timesheets(this.timesheets);
            return timeTrackingGetTimesheetsByIdsRequest;
        }

        /**
         * Execute getTimesheetsByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No timesheet ids given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions to view all or some of the timesheets. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Timesheet not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest = buildBodyParams();
            getTimesheetsByIdsWithHttpInfo(companyDomain, timeTrackingGetTimesheetsByIdsRequest);
        }

        /**
         * Execute getTimesheetsByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No timesheet ids given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions to view all or some of the timesheets. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Timesheet not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest = buildBodyParams();
            return getTimesheetsByIdsWithHttpInfo(companyDomain, timeTrackingGetTimesheetsByIdsRequest);
        }

        /**
         * Execute getTimesheetsByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No timesheet ids given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions to view all or some of the timesheets. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Timesheet not found. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingGetTimesheetsByIdsRequest timeTrackingGetTimesheetsByIdsRequest = buildBodyParams();
            return getTimesheetsByIdsAsync(companyDomain, timeTrackingGetTimesheetsByIdsRequest, _callback);
        }
    }

    /**
     * Get timesheets by ids
     * Get timesheets by ids
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param timeTrackingGetTimesheetsByIdsRequest  (required)
     * @return GetTimesheetsByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the requested information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No timesheet ids given. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions to view all or some of the timesheets. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Timesheet not found. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetTimesheetsByIdsRequestBuilder getTimesheetsByIds(String timesheets, String companyDomain) throws IllegalArgumentException {
        if (timesheets == null) throw new IllegalArgumentException("\"timesheets\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetTimesheetsByIdsRequestBuilder(timesheets, companyDomain);
    }
    private okhttp3.Call listEmployeeProjectsCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeProjectsValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeeProjects(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeeProjects(Async)");
        }

        return listEmployeeProjectsCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<Void> listEmployeeProjectsWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeProjectsValidateBeforeCall(companyDomain, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listEmployeeProjectsAsync(String companyDomain, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeProjectsValidateBeforeCall(companyDomain, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListEmployeeProjectsRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private ListEmployeeProjectsRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for listEmployeeProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeProjectsCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute listEmployeeProjects request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listEmployeeProjectsWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeeProjects request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listEmployeeProjectsWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeeProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listEmployeeProjectsAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get projects an employee can log time to
     * Get projects an employee can log time to
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId id of the employee to whom the projects belong. (required)
     * @return ListEmployeeProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeProjectsRequestBuilder listEmployeeProjects(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListEmployeeProjectsRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call storeClockEntriesCall(String companyDomain, TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingStoreClockEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/clock_entries"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeClockEntriesValidateBeforeCall(String companyDomain, TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling storeClockEntries(Async)");
        }

        return storeClockEntriesCall(companyDomain, timeTrackingStoreClockEntriesRequest, _callback);

    }


    private ApiResponse<Void> storeClockEntriesWithHttpInfo(String companyDomain, TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = storeClockEntriesValidateBeforeCall(companyDomain, timeTrackingStoreClockEntriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call storeClockEntriesAsync(String companyDomain, TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeClockEntriesValidateBeforeCall(companyDomain, timeTrackingStoreClockEntriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StoreClockEntriesRequestBuilder {
        private final String companyDomain;
        private List<TimeTrackingStoreClockEntriesRequestEntriesInner> entries;

        private StoreClockEntriesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set entries
         * @param entries  (optional)
         * @return StoreClockEntriesRequestBuilder
         */
        public StoreClockEntriesRequestBuilder entries(List<TimeTrackingStoreClockEntriesRequestEntriesInner> entries) {
            this.entries = entries;
            return this;
        }
        
        /**
         * Build call for storeClockEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type or overlapping time entries. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest = buildBodyParams();
            return storeClockEntriesCall(companyDomain, timeTrackingStoreClockEntriesRequest, _callback);
        }

        private TimeTrackingStoreClockEntriesRequest buildBodyParams() {
            TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest = new TimeTrackingStoreClockEntriesRequest();
            timeTrackingStoreClockEntriesRequest.entries(this.entries);
            return timeTrackingStoreClockEntriesRequest;
        }

        /**
         * Execute storeClockEntries request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type or overlapping time entries. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest = buildBodyParams();
            storeClockEntriesWithHttpInfo(companyDomain, timeTrackingStoreClockEntriesRequest);
        }

        /**
         * Execute storeClockEntries request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type or overlapping time entries. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest = buildBodyParams();
            return storeClockEntriesWithHttpInfo(companyDomain, timeTrackingStoreClockEntriesRequest);
        }

        /**
         * Execute storeClockEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type or overlapping time entries. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingStoreClockEntriesRequest timeTrackingStoreClockEntriesRequest = buildBodyParams();
            return storeClockEntriesAsync(companyDomain, timeTrackingStoreClockEntriesRequest, _callback);
        }
    }

    /**
     * Store clock entries
     * Store clock entries
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return StoreClockEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid timesheet type or overlapping time entries. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public StoreClockEntriesRequestBuilder storeClockEntries(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new StoreClockEntriesRequestBuilder(companyDomain);
    }
    private okhttp3.Call storeDailyEntriesCall(String companyDomain, TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingStoreDailyEntriesRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_tracking/daily_entries"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeDailyEntriesValidateBeforeCall(String companyDomain, TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling storeDailyEntries(Async)");
        }

        return storeDailyEntriesCall(companyDomain, timeTrackingStoreDailyEntriesRequest, _callback);

    }


    private ApiResponse<Void> storeDailyEntriesWithHttpInfo(String companyDomain, TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = storeDailyEntriesValidateBeforeCall(companyDomain, timeTrackingStoreDailyEntriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call storeDailyEntriesAsync(String companyDomain, TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeDailyEntriesValidateBeforeCall(companyDomain, timeTrackingStoreDailyEntriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StoreDailyEntriesRequestBuilder {
        private final String companyDomain;
        private List<TimeTrackingStoreDailyEntriesRequestEntriesInner> entries;

        private StoreDailyEntriesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set entries
         * @param entries  (optional)
         * @return StoreDailyEntriesRequestBuilder
         */
        public StoreDailyEntriesRequestBuilder entries(List<TimeTrackingStoreDailyEntriesRequestEntriesInner> entries) {
            this.entries = entries;
            return this;
        }
        
        /**
         * Build call for storeDailyEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest = buildBodyParams();
            return storeDailyEntriesCall(companyDomain, timeTrackingStoreDailyEntriesRequest, _callback);
        }

        private TimeTrackingStoreDailyEntriesRequest buildBodyParams() {
            TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest = new TimeTrackingStoreDailyEntriesRequest();
            timeTrackingStoreDailyEntriesRequest.entries(this.entries);
            return timeTrackingStoreDailyEntriesRequest;
        }

        /**
         * Execute storeDailyEntries request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest = buildBodyParams();
            storeDailyEntriesWithHttpInfo(companyDomain, timeTrackingStoreDailyEntriesRequest);
        }

        /**
         * Execute storeDailyEntries request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest = buildBodyParams();
            return storeDailyEntriesWithHttpInfo(companyDomain, timeTrackingStoreDailyEntriesRequest);
        }

        /**
         * Execute storeDailyEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Invalid timesheet type. </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingStoreDailyEntriesRequest timeTrackingStoreDailyEntriesRequest = buildBodyParams();
            return storeDailyEntriesAsync(companyDomain, timeTrackingStoreDailyEntriesRequest, _callback);
        }
    }

    /**
     * Store daily entries
     * Store daily entries
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return StoreDailyEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be JSON with the daily entry information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information passed in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Id not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid timesheet type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Invalid company configuration or timezone. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public StoreDailyEntriesRequestBuilder storeDailyEntries(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new StoreDailyEntriesRequestBuilder(companyDomain);
    }
}
