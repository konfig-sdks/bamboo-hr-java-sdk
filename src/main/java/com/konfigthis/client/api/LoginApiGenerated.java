/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Login;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LoginApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoginApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LoginApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call userCredentialsCall(String companyDomain, Login login, String applicationKey, String user, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = login;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/login"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationKey != null) {
            localVarFormParams.put("applicationKey", applicationKey);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCredentialsValidateBeforeCall(String companyDomain, Login login, String applicationKey, String user, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling userCredentials(Async)");
        }

        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling userCredentials(Async)");
        }

        return userCredentialsCall(companyDomain, login, applicationKey, user, password, _callback);

    }


    private ApiResponse<Void> userCredentialsWithHttpInfo(String companyDomain, Login login, String applicationKey, String user, String password) throws ApiException {
        okhttp3.Call localVarCall = userCredentialsValidateBeforeCall(companyDomain, login, applicationKey, user, password, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call userCredentialsAsync(String companyDomain, Login login, String applicationKey, String user, String password, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCredentialsValidateBeforeCall(companyDomain, login, applicationKey, user, password, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UserCredentialsRequestBuilder {
        private final String companyDomain;
        private String applicationKey;
        private String user;
        private String password;

        private UserCredentialsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set applicationKey
         * @param applicationKey  (optional)
         * @return UserCredentialsRequestBuilder
         */
        public UserCredentialsRequestBuilder applicationKey(String applicationKey) {
            this.applicationKey = applicationKey;
            return this;
        }
        
        /**
         * Set user
         * @param user  (optional)
         * @return UserCredentialsRequestBuilder
         */
        public UserCredentialsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set password
         * @param password  (optional)
         * @return UserCredentialsRequestBuilder
         */
        public UserCredentialsRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Build call for userCredentials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Login login = buildBodyParams();
            return userCredentialsCall(companyDomain, login, applicationKey, user, password, _callback);
        }

        private Login buildBodyParams() {
            Login login = new Login();
            login.applicationKey(this.applicationKey);
            login.user(this.user);
            login.password(this.password);
            return login;
        }

        /**
         * Execute userCredentials request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Login login = buildBodyParams();
            userCredentialsWithHttpInfo(companyDomain, login, applicationKey, user, password);
        }

        /**
         * Execute userCredentials request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Login login = buildBodyParams();
            return userCredentialsWithHttpInfo(companyDomain, login, applicationKey, user, password);
        }

        /**
         * Execute userCredentials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Login login = buildBodyParams();
            return userCredentialsAsync(companyDomain, login, applicationKey, user, password, _callback);
        }
    }

    /**
     * User Login
     * User Login
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param login  (required)
     * @return UserCredentialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserCredentialsRequestBuilder userCredentials(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new UserCredentialsRequestBuilder(companyDomain);
    }
}
