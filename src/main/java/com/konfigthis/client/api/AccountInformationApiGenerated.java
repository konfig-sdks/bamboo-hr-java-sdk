/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ListFieldValues;
import com.konfigthis.client.model.ListFieldValuesOptionsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountInformationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountInformationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountInformationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call discoverTableFieldsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/tables"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoverTableFieldsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling discoverTableFields(Async)");
        }

        return discoverTableFieldsCall(companyDomain, _callback);

    }


    private ApiResponse<Void> discoverTableFieldsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = discoverTableFieldsValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call discoverTableFieldsAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoverTableFieldsValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DiscoverTableFieldsRequestBuilder {
        private final String companyDomain;

        private DiscoverTableFieldsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for discoverTableFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All table fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return discoverTableFieldsCall(companyDomain, _callback);
        }


        /**
         * Execute discoverTableFields request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All table fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            discoverTableFieldsWithHttpInfo(companyDomain);
        }

        /**
         * Execute discoverTableFields request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All table fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return discoverTableFieldsWithHttpInfo(companyDomain);
        }

        /**
         * Execute discoverTableFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All table fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return discoverTableFieldsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get a list of tabular fields
     * This endpoint can help discover table fields available in your BambooHR account.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return DiscoverTableFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All table fields available in BambooHR </td><td>  -  </td></tr>
     </table>
     */
    public DiscoverTableFieldsRequestBuilder discoverTableFields(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new DiscoverTableFieldsRequestBuilder(companyDomain);
    }
    private okhttp3.Call getFieldListCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/fields"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldListValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getFieldList(Async)");
        }

        return getFieldListCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getFieldListWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getFieldListValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFieldListAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldListValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFieldListRequestBuilder {
        private final String companyDomain;

        private GetFieldListRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getFieldList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldListCall(companyDomain, _callback);
        }


        /**
         * Execute getFieldList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFieldListWithHttpInfo(companyDomain);
        }

        /**
         * Execute getFieldList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFieldListWithHttpInfo(companyDomain);
        }

        /**
         * Execute getFieldList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFieldListAsync(companyDomain, _callback);
        }
    }

    /**
     * Get a list of fields
     * This endpoint can help with discovery of fields that are available in an account.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetFieldListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldListRequestBuilder getFieldList(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetFieldListRequestBuilder(companyDomain);
    }
    private okhttp3.Call getListFieldsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/lists"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListFieldsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getListFields(Async)");
        }

        return getListFieldsCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getListFieldsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getListFieldsValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListFieldsAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListFieldsValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListFieldsRequestBuilder {
        private final String companyDomain;

        private GetListFieldsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getListFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All details for list fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListFieldsCall(companyDomain, _callback);
        }


        /**
         * Execute getListFields request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All details for list fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListFieldsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getListFields request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All details for list fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListFieldsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getListFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All details for list fields available in BambooHR </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListFieldsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get details for list fields
     * This endpoint will return details for all list fields. Lists that can be edited will have the \&quot;manageable\&quot; attribute set to yes. Lists with the \&quot;multiple\&quot; attribute set to yes are fields that can have multiple values. Options with the \&quot;archived\&quot; attribute set to yes should not appear as current options, but are included so that historical data can reference the value.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetListFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All details for list fields available in BambooHR </td><td>  -  </td></tr>
     </table>
     */
    public GetListFieldsRequestBuilder getListFields(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetListFieldsRequestBuilder(companyDomain);
    }
    private okhttp3.Call getUserListCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/users"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserListValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getUserList(Async)");
        }

        return getUserListCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getUserListWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getUserListValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getUserListAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserListValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetUserListRequestBuilder {
        private final String companyDomain;

        private GetUserListRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getUserList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserListCall(companyDomain, _callback);
        }


        /**
         * Execute getUserList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getUserListWithHttpInfo(companyDomain);
        }

        /**
         * Execute getUserList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getUserListWithHttpInfo(companyDomain);
        }

        /**
         * Execute getUserList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getUserListAsync(companyDomain, _callback);
        }
    }

    /**
     * Get a List of Users
     * 
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetUserListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetUserListRequestBuilder getUserList(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetUserListRequestBuilder(companyDomain);
    }
    private okhttp3.Call updateListFieldValuesCall(String companyDomain, String listFieldId, ListFieldValues listFieldValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listFieldValues;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/lists/{listFieldId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "listFieldId" + "}", localVarApiClient.escapeString(listFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateListFieldValuesValidateBeforeCall(String companyDomain, String listFieldId, ListFieldValues listFieldValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateListFieldValues(Async)");
        }

        // verify the required parameter 'listFieldId' is set
        if (listFieldId == null) {
            throw new ApiException("Missing the required parameter 'listFieldId' when calling updateListFieldValues(Async)");
        }

        // verify the required parameter 'listFieldValues' is set
        if (listFieldValues == null) {
            throw new ApiException("Missing the required parameter 'listFieldValues' when calling updateListFieldValues(Async)");
        }

        return updateListFieldValuesCall(companyDomain, listFieldId, listFieldValues, _callback);

    }


    private ApiResponse<Void> updateListFieldValuesWithHttpInfo(String companyDomain, String listFieldId, ListFieldValues listFieldValues) throws ApiException {
        okhttp3.Call localVarCall = updateListFieldValuesValidateBeforeCall(companyDomain, listFieldId, listFieldValues, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateListFieldValuesAsync(String companyDomain, String listFieldId, ListFieldValues listFieldValues, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateListFieldValuesValidateBeforeCall(companyDomain, listFieldId, listFieldValues, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateListFieldValuesRequestBuilder {
        private final String companyDomain;
        private final String listFieldId;
        private List<ListFieldValuesOptionsInner> options;

        private UpdateListFieldValuesRequestBuilder(String companyDomain, String listFieldId) {
            this.companyDomain = companyDomain;
            this.listFieldId = listFieldId;
        }

        /**
         * Set options
         * @param options  (optional)
         * @return UpdateListFieldValuesRequestBuilder
         */
        public UpdateListFieldValuesRequestBuilder options(List<ListFieldValuesOptionsInner> options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateListFieldValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the full list of options for the specified listId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> List is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A non-existant list value or option ID is specified. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A duplicate list value conflicted with the value specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListFieldValues listFieldValues = buildBodyParams();
            return updateListFieldValuesCall(companyDomain, listFieldId, listFieldValues, _callback);
        }

        private ListFieldValues buildBodyParams() {
            ListFieldValues listFieldValues = new ListFieldValues();
            listFieldValues.options(this.options);
            return listFieldValues;
        }

        /**
         * Execute updateListFieldValues request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the full list of options for the specified listId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> List is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A non-existant list value or option ID is specified. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A duplicate list value conflicted with the value specified. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListFieldValues listFieldValues = buildBodyParams();
            updateListFieldValuesWithHttpInfo(companyDomain, listFieldId, listFieldValues);
        }

        /**
         * Execute updateListFieldValues request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the full list of options for the specified listId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> List is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A non-existant list value or option ID is specified. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A duplicate list value conflicted with the value specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListFieldValues listFieldValues = buildBodyParams();
            return updateListFieldValuesWithHttpInfo(companyDomain, listFieldId, listFieldValues);
        }

        /**
         * Execute updateListFieldValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the full list of options for the specified listId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> List is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A non-existant list value or option ID is specified. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A duplicate list value conflicted with the value specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListFieldValues listFieldValues = buildBodyParams();
            return updateListFieldValuesAsync(companyDomain, listFieldId, listFieldValues, _callback);
        }
    }

    /**
     * Add or Update Values for List Fields
     * This resource accepts one or more options. To update an option, specify an ID. You may also remove an option from the list of current values by archiving the value. To create a new option, do not specify an \&quot;id\&quot; attribute.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param listFieldId  (required)
     * @param listFieldValues  (required)
     * @return UpdateListFieldValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the full list of options for the specified listId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> List is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A non-existant list value or option ID is specified. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A duplicate list value conflicted with the value specified. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateListFieldValuesRequestBuilder updateListFieldValues(String companyDomain, String listFieldId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (listFieldId == null) throw new IllegalArgumentException("\"listFieldId\" is required but got null");
            

        return new UpdateListFieldValuesRequestBuilder(companyDomain, listFieldId);
    }
}
