/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.TrainingAddCategoryRequest;
import com.konfigthis.client.model.TrainingAddEmployeeTrainingRecordRequest;
import com.konfigthis.client.model.TrainingAddEmployeeTrainingRecordRequestCost;
import com.konfigthis.client.model.TrainingCategory;
import com.konfigthis.client.model.TrainingCategoryListResponseInner;
import com.konfigthis.client.model.TrainingGetTypesResponseInner;
import com.konfigthis.client.model.TrainingListEmployeeTrainingsResponseInner;
import com.konfigthis.client.model.TrainingRecord;
import com.konfigthis.client.model.TrainingType;
import com.konfigthis.client.model.TrainingTypeAdditionRequest;
import com.konfigthis.client.model.TrainingTypeAdditionRequestCategory;
import com.konfigthis.client.model.TrainingUpdateCategoryRequest;
import com.konfigthis.client.model.TrainingUpdateEmployeeTrainingRecordRequest;
import com.konfigthis.client.model.TrainingUpdateTypeRequest;
import com.konfigthis.client.model.TrainingUpdateTypeRequestCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TrainingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrainingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TrainingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCategoryCall(String companyDomain, TrainingAddCategoryRequest trainingAddCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingAddCategoryRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/category"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryValidateBeforeCall(String companyDomain, TrainingAddCategoryRequest trainingAddCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addCategory(Async)");
        }

        // verify the required parameter 'trainingAddCategoryRequest' is set
        if (trainingAddCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingAddCategoryRequest' when calling addCategory(Async)");
        }

        return addCategoryCall(companyDomain, trainingAddCategoryRequest, _callback);

    }


    private ApiResponse<TrainingCategory> addCategoryWithHttpInfo(String companyDomain, TrainingAddCategoryRequest trainingAddCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(companyDomain, trainingAddCategoryRequest, null);
        Type localVarReturnType = new TypeToken<TrainingCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCategoryAsync(String companyDomain, TrainingAddCategoryRequest trainingAddCategoryRequest, final ApiCallback<TrainingCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(companyDomain, trainingAddCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainingCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCategoryRequestBuilder {
        private final String name;
        private final String companyDomain;

        private AddCategoryRequestBuilder(String name, String companyDomain) {
            this.name = name;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for addCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingAddCategoryRequest trainingAddCategoryRequest = buildBodyParams();
            return addCategoryCall(companyDomain, trainingAddCategoryRequest, _callback);
        }

        private TrainingAddCategoryRequest buildBodyParams() {
            TrainingAddCategoryRequest trainingAddCategoryRequest = new TrainingAddCategoryRequest();
            trainingAddCategoryRequest.name(this.name);
            return trainingAddCategoryRequest;
        }

        /**
         * Execute addCategory request
         * @return TrainingCategory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingCategory execute() throws ApiException {
            TrainingAddCategoryRequest trainingAddCategoryRequest = buildBodyParams();
            ApiResponse<TrainingCategory> localVarResp = addCategoryWithHttpInfo(companyDomain, trainingAddCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCategory request with HTTP info returned
         * @return ApiResponse&lt;TrainingCategory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingCategory> executeWithHttpInfo() throws ApiException {
            TrainingAddCategoryRequest trainingAddCategoryRequest = buildBodyParams();
            return addCategoryWithHttpInfo(companyDomain, trainingAddCategoryRequest);
        }

        /**
         * Execute addCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingCategory> _callback) throws ApiException {
            TrainingAddCategoryRequest trainingAddCategoryRequest = buildBodyParams();
            return addCategoryAsync(companyDomain, trainingAddCategoryRequest, _callback);
        }
    }

    /**
     * Add Training Category
     * Add a training category. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param trainingAddCategoryRequest Training category to post (required)
     * @return AddCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public AddCategoryRequestBuilder addCategory(String name, String companyDomain) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddCategoryRequestBuilder(name, companyDomain);
    }
    private okhttp3.Call addEmployeeTrainingRecordCall(String companyDomain, Integer employeeId, TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingAddEmployeeTrainingRecordRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/record/employee/{employeeId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeeTrainingRecordValidateBeforeCall(String companyDomain, Integer employeeId, TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEmployeeTrainingRecord(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addEmployeeTrainingRecord(Async)");
        }

        // verify the required parameter 'trainingAddEmployeeTrainingRecordRequest' is set
        if (trainingAddEmployeeTrainingRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingAddEmployeeTrainingRecordRequest' when calling addEmployeeTrainingRecord(Async)");
        }

        return addEmployeeTrainingRecordCall(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest, _callback);

    }


    private ApiResponse<TrainingRecord> addEmployeeTrainingRecordWithHttpInfo(String companyDomain, Integer employeeId, TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = addEmployeeTrainingRecordValidateBeforeCall(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest, null);
        Type localVarReturnType = new TypeToken<TrainingRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEmployeeTrainingRecordAsync(String companyDomain, Integer employeeId, TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest, final ApiCallback<TrainingRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeeTrainingRecordValidateBeforeCall(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainingRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEmployeeTrainingRecordRequestBuilder {
        private final LocalDate completed;
        private final Integer type;
        private final String companyDomain;
        private final Integer employeeId;
        private TrainingAddEmployeeTrainingRecordRequestCost cost;
        private String instructor;
        private Double hours;
        private Double credits;
        private String notes;

        private AddEmployeeTrainingRecordRequestBuilder(LocalDate completed, Integer type, String companyDomain, Integer employeeId) {
            this.completed = completed;
            this.type = type;
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set cost
         * @param cost  (optional)
         * @return AddEmployeeTrainingRecordRequestBuilder
         */
        public AddEmployeeTrainingRecordRequestBuilder cost(TrainingAddEmployeeTrainingRecordRequestCost cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set instructor
         * @param instructor  (optional)
         * @return AddEmployeeTrainingRecordRequestBuilder
         */
        public AddEmployeeTrainingRecordRequestBuilder instructor(String instructor) {
            this.instructor = instructor;
            return this;
        }
        
        /**
         * Set hours
         * @param hours  (optional)
         * @return AddEmployeeTrainingRecordRequestBuilder
         */
        public AddEmployeeTrainingRecordRequestBuilder hours(Double hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set credits
         * @param credits  (optional)
         * @return AddEmployeeTrainingRecordRequestBuilder
         */
        public AddEmployeeTrainingRecordRequestBuilder credits(Double credits) {
            this.credits = credits;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return AddEmployeeTrainingRecordRequestBuilder
         */
        public AddEmployeeTrainingRecordRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for addEmployeeTrainingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest = buildBodyParams();
            return addEmployeeTrainingRecordCall(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest, _callback);
        }

        private TrainingAddEmployeeTrainingRecordRequest buildBodyParams() {
            TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest = new TrainingAddEmployeeTrainingRecordRequest();
            trainingAddEmployeeTrainingRecordRequest.completed(this.completed);
            trainingAddEmployeeTrainingRecordRequest.cost(this.cost);
            trainingAddEmployeeTrainingRecordRequest.instructor(this.instructor);
            trainingAddEmployeeTrainingRecordRequest.hours(this.hours);
            trainingAddEmployeeTrainingRecordRequest.credits(this.credits);
            trainingAddEmployeeTrainingRecordRequest.notes(this.notes);
            trainingAddEmployeeTrainingRecordRequest.type(this.type);
            return trainingAddEmployeeTrainingRecordRequest;
        }

        /**
         * Execute addEmployeeTrainingRecord request
         * @return TrainingRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingRecord execute() throws ApiException {
            TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest = buildBodyParams();
            ApiResponse<TrainingRecord> localVarResp = addEmployeeTrainingRecordWithHttpInfo(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEmployeeTrainingRecord request with HTTP info returned
         * @return ApiResponse&lt;TrainingRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingRecord> executeWithHttpInfo() throws ApiException {
            TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest = buildBodyParams();
            return addEmployeeTrainingRecordWithHttpInfo(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest);
        }

        /**
         * Execute addEmployeeTrainingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingRecord> _callback) throws ApiException {
            TrainingAddEmployeeTrainingRecordRequest trainingAddEmployeeTrainingRecordRequest = buildBodyParams();
            return addEmployeeTrainingRecordAsync(companyDomain, employeeId, trainingAddEmployeeTrainingRecordRequest, _callback);
        }
    }

    /**
     * Add New Employee Training Record
     * Add a new employee training record. The owner of the API key used must have permission to add trainings for the selected employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId The ID of the employee to add a training record to. (required)
     * @param trainingAddEmployeeTrainingRecordRequest Training object to post (required)
     * @return AddEmployeeTrainingRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeeTrainingRecordRequestBuilder addEmployeeTrainingRecord(LocalDate completed, Integer type, String companyDomain, Integer employeeId) throws IllegalArgumentException {
        if (completed == null) throw new IllegalArgumentException("\"completed\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new AddEmployeeTrainingRecordRequestBuilder(completed, type, companyDomain, employeeId);
    }
    private okhttp3.Call categoryListCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/category"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryListValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling categoryList(Async)");
        }

        return categoryListCall(companyDomain, _callback);

    }


    private ApiResponse<List<TrainingCategoryListResponseInner>> categoryListWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = categoryListValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<TrainingCategoryListResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call categoryListAsync(String companyDomain, final ApiCallback<List<TrainingCategoryListResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryListValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<TrainingCategoryListResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CategoryListRequestBuilder {
        private final String companyDomain;

        private CategoryListRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for categoryList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return categoryListCall(companyDomain, _callback);
        }


        /**
         * Execute categoryList request
         * @return List&lt;TrainingCategoryListResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public List<TrainingCategoryListResponseInner> execute() throws ApiException {
            ApiResponse<List<TrainingCategoryListResponseInner>> localVarResp = categoryListWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute categoryList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TrainingCategoryListResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TrainingCategoryListResponseInner>> executeWithHttpInfo() throws ApiException {
            return categoryListWithHttpInfo(companyDomain);
        }

        /**
         * Execute categoryList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TrainingCategoryListResponseInner>> _callback) throws ApiException {
            return categoryListAsync(companyDomain, _callback);
        }
    }

    /**
     * List Training Categories
     * Get a list of training categories. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return CategoryListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryListRequestBuilder categoryList(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CategoryListRequestBuilder(companyDomain);
    }
    private okhttp3.Call deleteCategoryCall(String companyDomain, Integer trainingCategoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/category/{trainingCategoryId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "trainingCategoryId" + "}", localVarApiClient.escapeString(trainingCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(String companyDomain, Integer trainingCategoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteCategory(Async)");
        }

        // verify the required parameter 'trainingCategoryId' is set
        if (trainingCategoryId == null) {
            throw new ApiException("Missing the required parameter 'trainingCategoryId' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(companyDomain, trainingCategoryId, _callback);

    }


    private ApiResponse<Void> deleteCategoryWithHttpInfo(String companyDomain, Integer trainingCategoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(companyDomain, trainingCategoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCategoryAsync(String companyDomain, Integer trainingCategoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(companyDomain, trainingCategoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCategoryRequestBuilder {
        private final String companyDomain;
        private final Integer trainingCategoryId;

        private DeleteCategoryRequestBuilder(String companyDomain, Integer trainingCategoryId) {
            this.companyDomain = companyDomain;
            this.trainingCategoryId = trainingCategoryId;
        }

        /**
         * Build call for deleteCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training category does not exist. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCategoryCall(companyDomain, trainingCategoryId, _callback);
        }


        /**
         * Execute deleteCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training category does not exist. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCategoryWithHttpInfo(companyDomain, trainingCategoryId);
        }

        /**
         * Execute deleteCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training category does not exist. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCategoryWithHttpInfo(companyDomain, trainingCategoryId);
        }

        /**
         * Execute deleteCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training category does not exist. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCategoryAsync(companyDomain, trainingCategoryId, _callback);
        }
    }

    /**
     * Delete Training Category
     * Delete an existing training category. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param trainingCategoryId The ID of the training category to delete. (required)
     * @return DeleteCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url or training category does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCategoryRequestBuilder deleteCategory(String companyDomain, Integer trainingCategoryId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (trainingCategoryId == null) throw new IllegalArgumentException("\"trainingCategoryId\" is required but got null");
        return new DeleteCategoryRequestBuilder(companyDomain, trainingCategoryId);
    }
    private okhttp3.Call deleteEmployeeRecordCall(String companyDomain, Integer employeeTrainingRecordId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/record/{employeeTrainingRecordId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeTrainingRecordId" + "}", localVarApiClient.escapeString(employeeTrainingRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmployeeRecordValidateBeforeCall(String companyDomain, Integer employeeTrainingRecordId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteEmployeeRecord(Async)");
        }

        // verify the required parameter 'employeeTrainingRecordId' is set
        if (employeeTrainingRecordId == null) {
            throw new ApiException("Missing the required parameter 'employeeTrainingRecordId' when calling deleteEmployeeRecord(Async)");
        }

        return deleteEmployeeRecordCall(companyDomain, employeeTrainingRecordId, _callback);

    }


    private ApiResponse<Void> deleteEmployeeRecordWithHttpInfo(String companyDomain, Integer employeeTrainingRecordId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmployeeRecordValidateBeforeCall(companyDomain, employeeTrainingRecordId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmployeeRecordAsync(String companyDomain, Integer employeeTrainingRecordId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmployeeRecordValidateBeforeCall(companyDomain, employeeTrainingRecordId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEmployeeRecordRequestBuilder {
        private final String companyDomain;
        private final Integer employeeTrainingRecordId;

        private DeleteEmployeeRecordRequestBuilder(String companyDomain, Integer employeeTrainingRecordId) {
            this.companyDomain = companyDomain;
            this.employeeTrainingRecordId = employeeTrainingRecordId;
        }

        /**
         * Build call for deleteEmployeeRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training record does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Unable to delete training record. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmployeeRecordCall(companyDomain, employeeTrainingRecordId, _callback);
        }


        /**
         * Execute deleteEmployeeRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training record does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Unable to delete training record. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmployeeRecordWithHttpInfo(companyDomain, employeeTrainingRecordId);
        }

        /**
         * Execute deleteEmployeeRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training record does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Unable to delete training record. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmployeeRecordWithHttpInfo(companyDomain, employeeTrainingRecordId);
        }

        /**
         * Execute deleteEmployeeRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training record does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Unable to delete training record. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmployeeRecordAsync(companyDomain, employeeTrainingRecordId, _callback);
        }
    }

    /**
     * Delete Employee Training Record
     * Delete an existing employee training record. The owner of the API key used must have permission to view and edit the employee and training type.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeTrainingRecordId The ID of the training record to delete. (required)
     * @return DeleteEmployeeRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url or training record does not exist. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unable to delete training record. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEmployeeRecordRequestBuilder deleteEmployeeRecord(String companyDomain, Integer employeeTrainingRecordId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeTrainingRecordId == null) throw new IllegalArgumentException("\"employeeTrainingRecordId\" is required but got null");
        return new DeleteEmployeeRecordRequestBuilder(companyDomain, employeeTrainingRecordId);
    }
    private okhttp3.Call getTypesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/type"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTypesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getTypes(Async)");
        }

        return getTypesCall(companyDomain, _callback);

    }


    private ApiResponse<List<TrainingGetTypesResponseInner>> getTypesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getTypesValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<TrainingGetTypesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTypesAsync(String companyDomain, final ApiCallback<List<TrainingGetTypesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTypesValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<TrainingGetTypesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTypesRequestBuilder {
        private final String companyDomain;

        private GetTypesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTypesCall(companyDomain, _callback);
        }


        /**
         * Execute getTypes request
         * @return List&lt;TrainingGetTypesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public List<TrainingGetTypesResponseInner> execute() throws ApiException {
            ApiResponse<List<TrainingGetTypesResponseInner>> localVarResp = getTypesWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTypes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TrainingGetTypesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TrainingGetTypesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getTypesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TrainingGetTypesResponseInner>> _callback) throws ApiException {
            return getTypesAsync(companyDomain, _callback);
        }
    }

    /**
     * List Training Types
     * Get a list of training types. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public GetTypesRequestBuilder getTypes(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetTypesRequestBuilder(companyDomain);
    }
    private okhttp3.Call listEmployeeTrainingsCall(String companyDomain, Integer employeeId, Integer trainingTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/record/employee/{employeeId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trainingTypeId", trainingTypeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeTrainingsValidateBeforeCall(String companyDomain, Integer employeeId, Integer trainingTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeeTrainings(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeeTrainings(Async)");
        }

        return listEmployeeTrainingsCall(companyDomain, employeeId, trainingTypeId, _callback);

    }


    private ApiResponse<List<TrainingListEmployeeTrainingsResponseInner>> listEmployeeTrainingsWithHttpInfo(String companyDomain, Integer employeeId, Integer trainingTypeId) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeTrainingsValidateBeforeCall(companyDomain, employeeId, trainingTypeId, null);
        Type localVarReturnType = new TypeToken<List<TrainingListEmployeeTrainingsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeTrainingsAsync(String companyDomain, Integer employeeId, Integer trainingTypeId, final ApiCallback<List<TrainingListEmployeeTrainingsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeTrainingsValidateBeforeCall(companyDomain, employeeId, trainingTypeId, _callback);
        Type localVarReturnType = new TypeToken<List<TrainingListEmployeeTrainingsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeTrainingsRequestBuilder {
        private final String companyDomain;
        private final Integer employeeId;
        private Integer trainingTypeId;

        private ListEmployeeTrainingsRequestBuilder(String companyDomain, Integer employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set trainingTypeId
         * @param trainingTypeId The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional, default to 0)
         * @return ListEmployeeTrainingsRequestBuilder
         */
        public ListEmployeeTrainingsRequestBuilder trainingTypeId(Integer trainingTypeId) {
            this.trainingTypeId = trainingTypeId;
            return this;
        }
        
        /**
         * Build call for listEmployeeTrainings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeTrainingsCall(companyDomain, employeeId, trainingTypeId, _callback);
        }


        /**
         * Execute listEmployeeTrainings request
         * @return List&lt;TrainingListEmployeeTrainingsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public List<TrainingListEmployeeTrainingsResponseInner> execute() throws ApiException {
            ApiResponse<List<TrainingListEmployeeTrainingsResponseInner>> localVarResp = listEmployeeTrainingsWithHttpInfo(companyDomain, employeeId, trainingTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeTrainings request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TrainingListEmployeeTrainingsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TrainingListEmployeeTrainingsResponseInner>> executeWithHttpInfo() throws ApiException {
            return listEmployeeTrainingsWithHttpInfo(companyDomain, employeeId, trainingTypeId);
        }

        /**
         * Execute listEmployeeTrainings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TrainingListEmployeeTrainingsResponseInner>> _callback) throws ApiException {
            return listEmployeeTrainingsAsync(companyDomain, employeeId, trainingTypeId, _callback);
        }
    }

    /**
     * List Employee Trainings
     * Get all employee training records. The owner of the API key used must have access to view the employee. The API will only return trainings for the employee that the owner of the API key has permission to see. Included with each employee training is the training information that has been selected for tracking in settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId The ID of the employee to get a list of trainings for. (required)
     * @return ListEmployeeTrainingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeTrainingsRequestBuilder listEmployeeTrainings(String companyDomain, Integer employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new ListEmployeeTrainingsRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call removeTypeCall(String companyDomain, Integer trainingTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/type/{trainingTypeId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "trainingTypeId" + "}", localVarApiClient.escapeString(trainingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTypeValidateBeforeCall(String companyDomain, Integer trainingTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling removeType(Async)");
        }

        // verify the required parameter 'trainingTypeId' is set
        if (trainingTypeId == null) {
            throw new ApiException("Missing the required parameter 'trainingTypeId' when calling removeType(Async)");
        }

        return removeTypeCall(companyDomain, trainingTypeId, _callback);

    }


    private ApiResponse<Void> removeTypeWithHttpInfo(String companyDomain, Integer trainingTypeId) throws ApiException {
        okhttp3.Call localVarCall = removeTypeValidateBeforeCall(companyDomain, trainingTypeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTypeAsync(String companyDomain, Integer trainingTypeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTypeValidateBeforeCall(companyDomain, trainingTypeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTypeRequestBuilder {
        private final String companyDomain;
        private final Integer trainingTypeId;

        private RemoveTypeRequestBuilder(String companyDomain, Integer trainingTypeId) {
            this.companyDomain = companyDomain;
            this.trainingTypeId = trainingTypeId;
        }

        /**
         * Build call for removeType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training type does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Training type was unable to be deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTypeCall(companyDomain, trainingTypeId, _callback);
        }


        /**
         * Execute removeType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training type does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Training type was unable to be deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTypeWithHttpInfo(companyDomain, trainingTypeId);
        }

        /**
         * Execute removeType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training type does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Training type was unable to be deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTypeWithHttpInfo(companyDomain, trainingTypeId);
        }

        /**
         * Execute removeType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url or training type does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Training type was unable to be deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTypeAsync(companyDomain, trainingTypeId, _callback);
        }
    }

    /**
     * Delete Training Type
     * Delete an existing training type. The owner of the API key used must have access to training settings. Deleting a training type will only be successful if all employee trainings for this type have been removed prior to this request.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param trainingTypeId The ID of the training type to delete. (required)
     * @return RemoveTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url or training type does not exist. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Training type was unable to be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTypeRequestBuilder removeType(String companyDomain, Integer trainingTypeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (trainingTypeId == null) throw new IllegalArgumentException("\"trainingTypeId\" is required but got null");
        return new RemoveTypeRequestBuilder(companyDomain, trainingTypeId);
    }
    private okhttp3.Call typeAdditionCall(String companyDomain, TrainingTypeAdditionRequest trainingTypeAdditionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingTypeAdditionRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/type"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typeAdditionValidateBeforeCall(String companyDomain, TrainingTypeAdditionRequest trainingTypeAdditionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling typeAddition(Async)");
        }

        // verify the required parameter 'trainingTypeAdditionRequest' is set
        if (trainingTypeAdditionRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingTypeAdditionRequest' when calling typeAddition(Async)");
        }

        return typeAdditionCall(companyDomain, trainingTypeAdditionRequest, _callback);

    }


    private ApiResponse<TrainingType> typeAdditionWithHttpInfo(String companyDomain, TrainingTypeAdditionRequest trainingTypeAdditionRequest) throws ApiException {
        okhttp3.Call localVarCall = typeAdditionValidateBeforeCall(companyDomain, trainingTypeAdditionRequest, null);
        Type localVarReturnType = new TypeToken<TrainingType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call typeAdditionAsync(String companyDomain, TrainingTypeAdditionRequest trainingTypeAdditionRequest, final ApiCallback<TrainingType> _callback) throws ApiException {

        okhttp3.Call localVarCall = typeAdditionValidateBeforeCall(companyDomain, trainingTypeAdditionRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainingType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TypeAdditionRequestBuilder {
        private final String name;
        private final Boolean required;
        private final String companyDomain;
        private String description;
        private Integer frequency;
        private Boolean renewable;
        private TrainingTypeAdditionRequestCategory category;
        private Integer dueFromHireDate;
        private String linkUrl;
        private Boolean allowEmployeesToMarkComplete;

        private TypeAdditionRequestBuilder(String name, Boolean required, String companyDomain) {
            this.name = name;
            this.required = required;
            this.companyDomain = companyDomain;
        }

        /**
         * Set description
         * @param description Description for the training. (optional)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable. (optional)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder frequency(Integer frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set renewable
         * @param renewable Renewable is optional but if you are setting it to true you must pass a frequency which is the months between renewals. (optional)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder renewable(Boolean renewable) {
            this.renewable = renewable;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder category(TrainingTypeAdditionRequestCategory category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set dueFromHireDate
         * @param dueFromHireDate Number of days before the training is due for new hires. Not valid unless training is required. (optional)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder dueFromHireDate(Integer dueFromHireDate) {
            this.dueFromHireDate = dueFromHireDate;
            return this;
        }
        
        /**
         * Set linkUrl
         * @param linkUrl Optional URL that can be included with a training. (optional)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder linkUrl(String linkUrl) {
            this.linkUrl = linkUrl;
            return this;
        }
        
        /**
         * Set allowEmployeesToMarkComplete
         * @param allowEmployeesToMarkComplete Allows all employees who can view the training to be able to mark it complete. (optional, default to false)
         * @return TypeAdditionRequestBuilder
         */
        public TypeAdditionRequestBuilder allowEmployeesToMarkComplete(Boolean allowEmployeesToMarkComplete) {
            this.allowEmployeesToMarkComplete = allowEmployeesToMarkComplete;
            return this;
        }
        
        /**
         * Build call for typeAddition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingTypeAdditionRequest trainingTypeAdditionRequest = buildBodyParams();
            return typeAdditionCall(companyDomain, trainingTypeAdditionRequest, _callback);
        }

        private TrainingTypeAdditionRequest buildBodyParams() {
            TrainingTypeAdditionRequest trainingTypeAdditionRequest = new TrainingTypeAdditionRequest();
            trainingTypeAdditionRequest.description(this.description);
            trainingTypeAdditionRequest.name(this.name);
            trainingTypeAdditionRequest.frequency(this.frequency);
            trainingTypeAdditionRequest.renewable(this.renewable);
            trainingTypeAdditionRequest.category(this.category);
            trainingTypeAdditionRequest.required(this.required);
            trainingTypeAdditionRequest.dueFromHireDate(this.dueFromHireDate);
            trainingTypeAdditionRequest.linkUrl(this.linkUrl);
            trainingTypeAdditionRequest.allowEmployeesToMarkComplete(this.allowEmployeesToMarkComplete);
            return trainingTypeAdditionRequest;
        }

        /**
         * Execute typeAddition request
         * @return TrainingType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingType execute() throws ApiException {
            TrainingTypeAdditionRequest trainingTypeAdditionRequest = buildBodyParams();
            ApiResponse<TrainingType> localVarResp = typeAdditionWithHttpInfo(companyDomain, trainingTypeAdditionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute typeAddition request with HTTP info returned
         * @return ApiResponse&lt;TrainingType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingType> executeWithHttpInfo() throws ApiException {
            TrainingTypeAdditionRequest trainingTypeAdditionRequest = buildBodyParams();
            return typeAdditionWithHttpInfo(companyDomain, trainingTypeAdditionRequest);
        }

        /**
         * Execute typeAddition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingType> _callback) throws ApiException {
            TrainingTypeAdditionRequest trainingTypeAdditionRequest = buildBodyParams();
            return typeAdditionAsync(companyDomain, trainingTypeAdditionRequest, _callback);
        }
    }

    /**
     * Add Training Type
     * Add a training type. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param trainingTypeAdditionRequest Training object to post (required)
     * @return TypeAdditionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public TypeAdditionRequestBuilder typeAddition(String name, Boolean required, String companyDomain) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (required == null) throw new IllegalArgumentException("\"required\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new TypeAdditionRequestBuilder(name, required, companyDomain);
    }
    private okhttp3.Call updateCategoryCall(String companyDomain, Integer trainingCategoryId, TrainingUpdateCategoryRequest trainingUpdateCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingUpdateCategoryRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/category/{trainingCategoryId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "trainingCategoryId" + "}", localVarApiClient.escapeString(trainingCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryValidateBeforeCall(String companyDomain, Integer trainingCategoryId, TrainingUpdateCategoryRequest trainingUpdateCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateCategory(Async)");
        }

        // verify the required parameter 'trainingCategoryId' is set
        if (trainingCategoryId == null) {
            throw new ApiException("Missing the required parameter 'trainingCategoryId' when calling updateCategory(Async)");
        }

        // verify the required parameter 'trainingUpdateCategoryRequest' is set
        if (trainingUpdateCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingUpdateCategoryRequest' when calling updateCategory(Async)");
        }

        return updateCategoryCall(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest, _callback);

    }


    private ApiResponse<TrainingCategory> updateCategoryWithHttpInfo(String companyDomain, Integer trainingCategoryId, TrainingUpdateCategoryRequest trainingUpdateCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest, null);
        Type localVarReturnType = new TypeToken<TrainingCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCategoryAsync(String companyDomain, Integer trainingCategoryId, TrainingUpdateCategoryRequest trainingUpdateCategoryRequest, final ApiCallback<TrainingCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainingCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCategoryRequestBuilder {
        private final String name;
        private final String companyDomain;
        private final Integer trainingCategoryId;

        private UpdateCategoryRequestBuilder(String name, String companyDomain, Integer trainingCategoryId) {
            this.name = name;
            this.companyDomain = companyDomain;
            this.trainingCategoryId = trainingCategoryId;
        }

        /**
         * Build call for updateCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingUpdateCategoryRequest trainingUpdateCategoryRequest = buildBodyParams();
            return updateCategoryCall(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest, _callback);
        }

        private TrainingUpdateCategoryRequest buildBodyParams() {
            TrainingUpdateCategoryRequest trainingUpdateCategoryRequest = new TrainingUpdateCategoryRequest();
            trainingUpdateCategoryRequest.name(this.name);
            return trainingUpdateCategoryRequest;
        }

        /**
         * Execute updateCategory request
         * @return TrainingCategory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingCategory execute() throws ApiException {
            TrainingUpdateCategoryRequest trainingUpdateCategoryRequest = buildBodyParams();
            ApiResponse<TrainingCategory> localVarResp = updateCategoryWithHttpInfo(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCategory request with HTTP info returned
         * @return ApiResponse&lt;TrainingCategory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingCategory> executeWithHttpInfo() throws ApiException {
            TrainingUpdateCategoryRequest trainingUpdateCategoryRequest = buildBodyParams();
            return updateCategoryWithHttpInfo(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest);
        }

        /**
         * Execute updateCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingCategory> _callback) throws ApiException {
            TrainingUpdateCategoryRequest trainingUpdateCategoryRequest = buildBodyParams();
            return updateCategoryAsync(companyDomain, trainingCategoryId, trainingUpdateCategoryRequest, _callback);
        }
    }

    /**
     * Update Training Category
     * Update an existing training category. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param trainingCategoryId The ID of the training category to update. (required)
     * @param trainingUpdateCategoryRequest Training category to update (required)
     * @return UpdateCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCategoryRequestBuilder updateCategory(String name, String companyDomain, Integer trainingCategoryId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (trainingCategoryId == null) throw new IllegalArgumentException("\"trainingCategoryId\" is required but got null");
        return new UpdateCategoryRequestBuilder(name, companyDomain, trainingCategoryId);
    }
    private okhttp3.Call updateEmployeeTrainingRecordCall(String companyDomain, Integer employeeTrainingRecordId, TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingUpdateEmployeeTrainingRecordRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/record/{employeeTrainingRecordId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeTrainingRecordId" + "}", localVarApiClient.escapeString(employeeTrainingRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeTrainingRecordValidateBeforeCall(String companyDomain, Integer employeeTrainingRecordId, TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateEmployeeTrainingRecord(Async)");
        }

        // verify the required parameter 'employeeTrainingRecordId' is set
        if (employeeTrainingRecordId == null) {
            throw new ApiException("Missing the required parameter 'employeeTrainingRecordId' when calling updateEmployeeTrainingRecord(Async)");
        }

        // verify the required parameter 'trainingUpdateEmployeeTrainingRecordRequest' is set
        if (trainingUpdateEmployeeTrainingRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingUpdateEmployeeTrainingRecordRequest' when calling updateEmployeeTrainingRecord(Async)");
        }

        return updateEmployeeTrainingRecordCall(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest, _callback);

    }


    private ApiResponse<TrainingRecord> updateEmployeeTrainingRecordWithHttpInfo(String companyDomain, Integer employeeTrainingRecordId, TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeTrainingRecordValidateBeforeCall(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest, null);
        Type localVarReturnType = new TypeToken<TrainingRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeTrainingRecordAsync(String companyDomain, Integer employeeTrainingRecordId, TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest, final ApiCallback<TrainingRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeTrainingRecordValidateBeforeCall(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainingRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeTrainingRecordRequestBuilder {
        private final String completed;
        private final String companyDomain;
        private final Integer employeeTrainingRecordId;
        private TrainingAddEmployeeTrainingRecordRequestCost cost;
        private String instructor;
        private Double hours;
        private Double credits;
        private Double notes;

        private UpdateEmployeeTrainingRecordRequestBuilder(String completed, String companyDomain, Integer employeeTrainingRecordId) {
            this.completed = completed;
            this.companyDomain = companyDomain;
            this.employeeTrainingRecordId = employeeTrainingRecordId;
        }

        /**
         * Set cost
         * @param cost  (optional)
         * @return UpdateEmployeeTrainingRecordRequestBuilder
         */
        public UpdateEmployeeTrainingRecordRequestBuilder cost(TrainingAddEmployeeTrainingRecordRequestCost cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set instructor
         * @param instructor  (optional)
         * @return UpdateEmployeeTrainingRecordRequestBuilder
         */
        public UpdateEmployeeTrainingRecordRequestBuilder instructor(String instructor) {
            this.instructor = instructor;
            return this;
        }
        
        /**
         * Set hours
         * @param hours  (optional)
         * @return UpdateEmployeeTrainingRecordRequestBuilder
         */
        public UpdateEmployeeTrainingRecordRequestBuilder hours(Double hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set credits
         * @param credits  (optional)
         * @return UpdateEmployeeTrainingRecordRequestBuilder
         */
        public UpdateEmployeeTrainingRecordRequestBuilder credits(Double credits) {
            this.credits = credits;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateEmployeeTrainingRecordRequestBuilder
         */
        public UpdateEmployeeTrainingRecordRequestBuilder notes(Double notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateEmployeeTrainingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest = buildBodyParams();
            return updateEmployeeTrainingRecordCall(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest, _callback);
        }

        private TrainingUpdateEmployeeTrainingRecordRequest buildBodyParams() {
            TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest = new TrainingUpdateEmployeeTrainingRecordRequest();
            trainingUpdateEmployeeTrainingRecordRequest.completed(this.completed);
            trainingUpdateEmployeeTrainingRecordRequest.cost(this.cost);
            trainingUpdateEmployeeTrainingRecordRequest.instructor(this.instructor);
            trainingUpdateEmployeeTrainingRecordRequest.hours(this.hours);
            trainingUpdateEmployeeTrainingRecordRequest.credits(this.credits);
            trainingUpdateEmployeeTrainingRecordRequest.notes(this.notes);
            return trainingUpdateEmployeeTrainingRecordRequest;
        }

        /**
         * Execute updateEmployeeTrainingRecord request
         * @return TrainingRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingRecord execute() throws ApiException {
            TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest = buildBodyParams();
            ApiResponse<TrainingRecord> localVarResp = updateEmployeeTrainingRecordWithHttpInfo(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeTrainingRecord request with HTTP info returned
         * @return ApiResponse&lt;TrainingRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingRecord> executeWithHttpInfo() throws ApiException {
            TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest = buildBodyParams();
            return updateEmployeeTrainingRecordWithHttpInfo(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest);
        }

        /**
         * Execute updateEmployeeTrainingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingRecord> _callback) throws ApiException {
            TrainingUpdateEmployeeTrainingRecordRequest trainingUpdateEmployeeTrainingRecordRequest = buildBodyParams();
            return updateEmployeeTrainingRecordAsync(companyDomain, employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest, _callback);
        }
    }

    /**
     * Update Employee Training Record
     * Update an existing exmployee training record. The owner of the API key used must have permission to add trainings for the selected employee
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeTrainingRecordId The ID of the training record to update. (required)
     * @param trainingUpdateEmployeeTrainingRecordRequest Training object to update (required)
     * @return UpdateEmployeeTrainingRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeTrainingRecordRequestBuilder updateEmployeeTrainingRecord(String completed, String companyDomain, Integer employeeTrainingRecordId) throws IllegalArgumentException {
        if (completed == null) throw new IllegalArgumentException("\"completed\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeTrainingRecordId == null) throw new IllegalArgumentException("\"employeeTrainingRecordId\" is required but got null");
        return new UpdateEmployeeTrainingRecordRequestBuilder(completed, companyDomain, employeeTrainingRecordId);
    }
    private okhttp3.Call updateTypeCall(String companyDomain, Integer trainingTypeId, TrainingUpdateTypeRequest trainingUpdateTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingUpdateTypeRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/training/type/{trainingTypeId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "trainingTypeId" + "}", localVarApiClient.escapeString(trainingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTypeValidateBeforeCall(String companyDomain, Integer trainingTypeId, TrainingUpdateTypeRequest trainingUpdateTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateType(Async)");
        }

        // verify the required parameter 'trainingTypeId' is set
        if (trainingTypeId == null) {
            throw new ApiException("Missing the required parameter 'trainingTypeId' when calling updateType(Async)");
        }

        // verify the required parameter 'trainingUpdateTypeRequest' is set
        if (trainingUpdateTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingUpdateTypeRequest' when calling updateType(Async)");
        }

        return updateTypeCall(companyDomain, trainingTypeId, trainingUpdateTypeRequest, _callback);

    }


    private ApiResponse<TrainingType> updateTypeWithHttpInfo(String companyDomain, Integer trainingTypeId, TrainingUpdateTypeRequest trainingUpdateTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(companyDomain, trainingTypeId, trainingUpdateTypeRequest, null);
        Type localVarReturnType = new TypeToken<TrainingType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTypeAsync(String companyDomain, Integer trainingTypeId, TrainingUpdateTypeRequest trainingUpdateTypeRequest, final ApiCallback<TrainingType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(companyDomain, trainingTypeId, trainingUpdateTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainingType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTypeRequestBuilder {
        private final String name;
        private final Boolean required;
        private final String companyDomain;
        private final Integer trainingTypeId;
        private String description;
        private Integer frequency;
        private Boolean renewable;
        private TrainingUpdateTypeRequestCategory category;
        private Integer dueFromHireDate;
        private String linkUrl;
        private Boolean allowEmployeesToMarkComplete;

        private UpdateTypeRequestBuilder(String name, Boolean required, String companyDomain, Integer trainingTypeId) {
            this.name = name;
            this.required = required;
            this.companyDomain = companyDomain;
            this.trainingTypeId = trainingTypeId;
        }

        /**
         * Set description
         * @param description Description for the training. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder frequency(Integer frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set renewable
         * @param renewable Renewable is optional but if you are setting it to true you must pass a frequency. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder renewable(Boolean renewable) {
            this.renewable = renewable;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder category(TrainingUpdateTypeRequestCategory category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set dueFromHireDate
         * @param dueFromHireDate Number of days before the training is due for new hires. Not valid unless training is required. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder dueFromHireDate(Integer dueFromHireDate) {
            this.dueFromHireDate = dueFromHireDate;
            return this;
        }
        
        /**
         * Set linkUrl
         * @param linkUrl Optional URL that can be included with a training. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder linkUrl(String linkUrl) {
            this.linkUrl = linkUrl;
            return this;
        }
        
        /**
         * Set allowEmployeesToMarkComplete
         * @param allowEmployeesToMarkComplete Allows all employees who can view the training to be able to mark it complete. (optional, default to false)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder allowEmployeesToMarkComplete(Boolean allowEmployeesToMarkComplete) {
            this.allowEmployeesToMarkComplete = allowEmployeesToMarkComplete;
            return this;
        }
        
        /**
         * Build call for updateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingUpdateTypeRequest trainingUpdateTypeRequest = buildBodyParams();
            return updateTypeCall(companyDomain, trainingTypeId, trainingUpdateTypeRequest, _callback);
        }

        private TrainingUpdateTypeRequest buildBodyParams() {
            TrainingUpdateTypeRequest trainingUpdateTypeRequest = new TrainingUpdateTypeRequest();
            trainingUpdateTypeRequest.description(this.description);
            trainingUpdateTypeRequest.name(this.name);
            trainingUpdateTypeRequest.frequency(this.frequency);
            trainingUpdateTypeRequest.renewable(this.renewable);
            trainingUpdateTypeRequest.category(this.category);
            trainingUpdateTypeRequest.required(this.required);
            trainingUpdateTypeRequest.dueFromHireDate(this.dueFromHireDate);
            trainingUpdateTypeRequest.linkUrl(this.linkUrl);
            trainingUpdateTypeRequest.allowEmployeesToMarkComplete(this.allowEmployeesToMarkComplete);
            return trainingUpdateTypeRequest;
        }

        /**
         * Execute updateType request
         * @return TrainingType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingType execute() throws ApiException {
            TrainingUpdateTypeRequest trainingUpdateTypeRequest = buildBodyParams();
            ApiResponse<TrainingType> localVarResp = updateTypeWithHttpInfo(companyDomain, trainingTypeId, trainingUpdateTypeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateType request with HTTP info returned
         * @return ApiResponse&lt;TrainingType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingType> executeWithHttpInfo() throws ApiException {
            TrainingUpdateTypeRequest trainingUpdateTypeRequest = buildBodyParams();
            return updateTypeWithHttpInfo(companyDomain, trainingTypeId, trainingUpdateTypeRequest);
        }

        /**
         * Execute updateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingType> _callback) throws ApiException {
            TrainingUpdateTypeRequest trainingUpdateTypeRequest = buildBodyParams();
            return updateTypeAsync(companyDomain, trainingTypeId, trainingUpdateTypeRequest, _callback);
        }
    }

    /**
     * Update Training Type
     * Update an existing training type. The owner of the API key used must have access to training settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param trainingTypeId The ID of the training type to update. (required)
     * @param trainingUpdateTypeRequest Training type object to update to (required)
     * @return UpdateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTypeRequestBuilder updateType(String name, Boolean required, String companyDomain, Integer trainingTypeId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (required == null) throw new IllegalArgumentException("\"required\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (trainingTypeId == null) throw new IllegalArgumentException("\"trainingTypeId\" is required but got null");
        return new UpdateTypeRequestBuilder(name, required, companyDomain, trainingTypeId);
    }
}
