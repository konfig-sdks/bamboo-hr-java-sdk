/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TableRowUpdate;
import com.konfigthis.client.model.TabularDataDeleteRowResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TabularDataApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TabularDataApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TabularDataApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addRowCall(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableRowUpdate;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/employees/{id}/tables/{table}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRowValidateBeforeCall(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addRow(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRow(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling addRow(Async)");
        }

        // verify the required parameter 'tableRowUpdate' is set
        if (tableRowUpdate == null) {
            throw new ApiException("Missing the required parameter 'tableRowUpdate' when calling addRow(Async)");
        }

        return addRowCall(companyDomain, id, table, tableRowUpdate, _callback);

    }


    private ApiResponse<Void> addRowWithHttpInfo(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate) throws ApiException {
        okhttp3.Call localVarCall = addRowValidateBeforeCall(companyDomain, id, table, tableRowUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addRowAsync(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRowValidateBeforeCall(companyDomain, id, table, tableRowUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddRowRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String table;
        private String date;
        private String location;
        private String division;
        private String department;
        private String jobTitle;
        private String reportsTo;

        private AddRowRequestBuilder(String companyDomain, String id, String table) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.table = table;
        }

        /**
         * Set date
         * @param date  (optional)
         * @return AddRowRequestBuilder
         */
        public AddRowRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return AddRowRequestBuilder
         */
        public AddRowRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return AddRowRequestBuilder
         */
        public AddRowRequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set department
         * @param department  (optional)
         * @return AddRowRequestBuilder
         */
        public AddRowRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return AddRowRequestBuilder
         */
        public AddRowRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set reportsTo
         * @param reportsTo  (optional)
         * @return AddRowRequestBuilder
         */
        public AddRowRequestBuilder reportsTo(String reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }
        
        /**
         * Build call for addRow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return addRowCall(companyDomain, id, table, tableRowUpdate, _callback);
        }

        private TableRowUpdate buildBodyParams() {
            TableRowUpdate tableRowUpdate = new TableRowUpdate();
            tableRowUpdate.date(this.date);
            tableRowUpdate.location(this.location);
            tableRowUpdate.division(this.division);
            tableRowUpdate.department(this.department);
            tableRowUpdate.jobTitle(this.jobTitle);
            tableRowUpdate.reportsTo(this.reportsTo);
            return tableRowUpdate;
        }

        /**
         * Execute addRow request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            addRowWithHttpInfo(companyDomain, id, table, tableRowUpdate);
        }

        /**
         * Execute addRow request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return addRowWithHttpInfo(companyDomain, id, table, tableRowUpdate);
        }

        /**
         * Execute addRow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return addRowAsync(companyDomain, id, table, tableRowUpdate, _callback);
        }
    }

    /**
     * Adds a table row
     * Adds a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @param table Table name (required)
     * @param tableRowUpdate  (required)
     * @return AddRowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddRowRequestBuilder addRow(String companyDomain, String id, String table) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        return new AddRowRequestBuilder(companyDomain, id, table);
    }
    private okhttp3.Call addTableRowCall(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableRowUpdate;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/tables/{table}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTableRowValidateBeforeCall(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addTableRow(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addTableRow(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling addTableRow(Async)");
        }

        // verify the required parameter 'tableRowUpdate' is set
        if (tableRowUpdate == null) {
            throw new ApiException("Missing the required parameter 'tableRowUpdate' when calling addTableRow(Async)");
        }

        return addTableRowCall(companyDomain, id, table, tableRowUpdate, _callback);

    }


    private ApiResponse<Void> addTableRowWithHttpInfo(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate) throws ApiException {
        okhttp3.Call localVarCall = addTableRowValidateBeforeCall(companyDomain, id, table, tableRowUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTableRowAsync(String companyDomain, String id, String table, TableRowUpdate tableRowUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTableRowValidateBeforeCall(companyDomain, id, table, tableRowUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTableRowRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String table;
        private String date;
        private String location;
        private String division;
        private String department;
        private String jobTitle;
        private String reportsTo;

        private AddTableRowRequestBuilder(String companyDomain, String id, String table) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.table = table;
        }

        /**
         * Set date
         * @param date  (optional)
         * @return AddTableRowRequestBuilder
         */
        public AddTableRowRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return AddTableRowRequestBuilder
         */
        public AddTableRowRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return AddTableRowRequestBuilder
         */
        public AddTableRowRequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set department
         * @param department  (optional)
         * @return AddTableRowRequestBuilder
         */
        public AddTableRowRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return AddTableRowRequestBuilder
         */
        public AddTableRowRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set reportsTo
         * @param reportsTo  (optional)
         * @return AddTableRowRequestBuilder
         */
        public AddTableRowRequestBuilder reportsTo(String reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }
        
        /**
         * Build call for addTableRow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Row added successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return addTableRowCall(companyDomain, id, table, tableRowUpdate, _callback);
        }

        private TableRowUpdate buildBodyParams() {
            TableRowUpdate tableRowUpdate = new TableRowUpdate();
            tableRowUpdate.date(this.date);
            tableRowUpdate.location(this.location);
            tableRowUpdate.division(this.division);
            tableRowUpdate.department(this.department);
            tableRowUpdate.jobTitle(this.jobTitle);
            tableRowUpdate.reportsTo(this.reportsTo);
            return tableRowUpdate;
        }

        /**
         * Execute addTableRow request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Row added successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            addTableRowWithHttpInfo(companyDomain, id, table, tableRowUpdate);
        }

        /**
         * Execute addTableRow request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Row added successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return addTableRowWithHttpInfo(companyDomain, id, table, tableRowUpdate);
        }

        /**
         * Execute addTableRow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Row added successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return addTableRowAsync(companyDomain, id, table, tableRowUpdate, _callback);
        }
    }

    /**
     * Adds a table row
     * Adds a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is adding a row on the compensation table, the row cannot be added if they are missing any of the required employee fields (including fields not on that table).
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @param table Table name (required)
     * @param tableRowUpdate  (required)
     * @return AddTableRowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Row added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
     </table>
     */
    public AddTableRowRequestBuilder addTableRow(String companyDomain, String id, String table) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        return new AddTableRowRequestBuilder(companyDomain, id, table);
    }
    private okhttp3.Call deleteRowCall(String companyDomain, String id, String table, String rowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()))
            .replace("{" + "rowId" + "}", localVarApiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRowValidateBeforeCall(String companyDomain, String id, String table, String rowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteRow(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRow(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling deleteRow(Async)");
        }

        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling deleteRow(Async)");
        }

        return deleteRowCall(companyDomain, id, table, rowId, _callback);

    }


    private ApiResponse<TabularDataDeleteRowResponse> deleteRowWithHttpInfo(String companyDomain, String id, String table, String rowId) throws ApiException {
        okhttp3.Call localVarCall = deleteRowValidateBeforeCall(companyDomain, id, table, rowId, null);
        Type localVarReturnType = new TypeToken<TabularDataDeleteRowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRowAsync(String companyDomain, String id, String table, String rowId, final ApiCallback<TabularDataDeleteRowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRowValidateBeforeCall(companyDomain, id, table, rowId, _callback);
        Type localVarReturnType = new TypeToken<TabularDataDeleteRowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRowRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String table;
        private final String rowId;

        private DeleteRowRequestBuilder(String companyDomain, String id, String table, String rowId) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.table = table;
            this.rowId = rowId;
        }

        /**
         * Build call for deleteRow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Respond true if the row was deleted, false if the row was not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Invalid employee ID or table name. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRowCall(companyDomain, id, table, rowId, _callback);
        }


        /**
         * Execute deleteRow request
         * @return TabularDataDeleteRowResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Respond true if the row was deleted, false if the row was not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Invalid employee ID or table name. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
         </table>
         */
        public TabularDataDeleteRowResponse execute() throws ApiException {
            ApiResponse<TabularDataDeleteRowResponse> localVarResp = deleteRowWithHttpInfo(companyDomain, id, table, rowId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRow request with HTTP info returned
         * @return ApiResponse&lt;TabularDataDeleteRowResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Respond true if the row was deleted, false if the row was not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Invalid employee ID or table name. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TabularDataDeleteRowResponse> executeWithHttpInfo() throws ApiException {
            return deleteRowWithHttpInfo(companyDomain, id, table, rowId);
        }

        /**
         * Execute deleteRow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Respond true if the row was deleted, false if the row was not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Invalid employee ID or table name. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TabularDataDeleteRowResponse> _callback) throws ApiException {
            return deleteRowAsync(companyDomain, id, table, rowId, _callback);
        }
    }

    /**
     * Deletes a table row
     * Deletes a table row
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @param table Table name (required)
     * @param rowId Row ID (required)
     * @return DeleteRowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Respond true if the row was deleted, false if the row was not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid employee ID or table name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRowRequestBuilder deleteRow(String companyDomain, String id, String table, String rowId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        if (rowId == null) throw new IllegalArgumentException("\"rowId\" is required but got null");
            

        return new DeleteRowRequestBuilder(companyDomain, id, table, rowId);
    }
    private okhttp3.Call getChangedTableRowsCall(String companyDomain, String table, String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/changed/tables/{table}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangedTableRowsValidateBeforeCall(String companyDomain, String table, String since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getChangedTableRows(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling getChangedTableRows(Async)");
        }

        // verify the required parameter 'since' is set
        if (since == null) {
            throw new ApiException("Missing the required parameter 'since' when calling getChangedTableRows(Async)");
        }

        return getChangedTableRowsCall(companyDomain, table, since, _callback);

    }


    private ApiResponse<Void> getChangedTableRowsWithHttpInfo(String companyDomain, String table, String since) throws ApiException {
        okhttp3.Call localVarCall = getChangedTableRowsValidateBeforeCall(companyDomain, table, since, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getChangedTableRowsAsync(String companyDomain, String table, String since, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangedTableRowsValidateBeforeCall(companyDomain, table, since, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetChangedTableRowsRequestBuilder {
        private final String companyDomain;
        private final String table;
        private final String since;

        private GetChangedTableRowsRequestBuilder(String companyDomain, String table, String since) {
            this.companyDomain = companyDomain;
            this.table = table;
            this.since = since;
        }

        /**
         * Build call for getChangedTableRows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChangedTableRowsCall(companyDomain, table, since, _callback);
        }


        /**
         * Execute getChangedTableRows request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getChangedTableRowsWithHttpInfo(companyDomain, table, since);
        }

        /**
         * Execute getChangedTableRows request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getChangedTableRowsWithHttpInfo(companyDomain, table, since);
        }

        /**
         * Execute getChangedTableRows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getChangedTableRowsAsync(companyDomain, table, since, _callback);
        }
    }

    /**
     * Gets all updated employee table data
     * This API is merely an optimization to avoid downloading all table data for all employees. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY field in the employee record will cause ALL of that employees table rows to show up via this API.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param table Table name (required)
     * @param since URL encoded iso8601 timestamp (required)
     * @return GetChangedTableRowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetChangedTableRowsRequestBuilder getChangedTableRows(String companyDomain, String table, String since) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        if (since == null) throw new IllegalArgumentException("\"since\" is required but got null");
            

        return new GetChangedTableRowsRequestBuilder(companyDomain, table, since);
    }
    private okhttp3.Call getEmployeeTableRowsCall(String companyDomain, String id, String table, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/tables/{table}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeTableRowsValidateBeforeCall(String companyDomain, String id, String table, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeeTableRows(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeTableRows(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling getEmployeeTableRows(Async)");
        }

        return getEmployeeTableRowsCall(companyDomain, id, table, _callback);

    }


    private ApiResponse<Void> getEmployeeTableRowsWithHttpInfo(String companyDomain, String id, String table) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeTableRowsValidateBeforeCall(companyDomain, id, table, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmployeeTableRowsAsync(String companyDomain, String id, String table, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeTableRowsValidateBeforeCall(companyDomain, id, table, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmployeeTableRowsRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String table;

        private GetEmployeeTableRowsRequestBuilder(String companyDomain, String id, String table) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.table = table;
        }

        /**
         * Build call for getEmployeeTableRows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeTableRowsCall(companyDomain, id, table, _callback);
        }


        /**
         * Execute getEmployeeTableRows request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmployeeTableRowsWithHttpInfo(companyDomain, id, table);
        }

        /**
         * Execute getEmployeeTableRows request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmployeeTableRowsWithHttpInfo(companyDomain, id, table);
        }

        /**
         * Execute getEmployeeTableRows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmployeeTableRowsAsync(companyDomain, id, table, _callback);
        }
    }

    /**
     * Gets table rows for a given employee and table combination
     * Returns a data structure representing all the table rows for a given employee and table combination. The result is not sorted in any particular order.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @param table Table name (required)
     * @return GetEmployeeTableRowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeTableRowsRequestBuilder getEmployeeTableRows(String companyDomain, String id, String table) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        return new GetEmployeeTableRowsRequestBuilder(companyDomain, id, table);
    }
    private okhttp3.Call updateRowCall(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableRowUpdate;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()))
            .replace("{" + "rowId" + "}", localVarApiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRowValidateBeforeCall(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateRow(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRow(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling updateRow(Async)");
        }

        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling updateRow(Async)");
        }

        // verify the required parameter 'tableRowUpdate' is set
        if (tableRowUpdate == null) {
            throw new ApiException("Missing the required parameter 'tableRowUpdate' when calling updateRow(Async)");
        }

        return updateRowCall(companyDomain, id, table, rowId, tableRowUpdate, _callback);

    }


    private ApiResponse<Void> updateRowWithHttpInfo(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateRowValidateBeforeCall(companyDomain, id, table, rowId, tableRowUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRowAsync(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRowValidateBeforeCall(companyDomain, id, table, rowId, tableRowUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRowRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String table;
        private final String rowId;
        private String date;
        private String location;
        private String division;
        private String department;
        private String jobTitle;
        private String reportsTo;

        private UpdateRowRequestBuilder(String companyDomain, String id, String table, String rowId) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.table = table;
            this.rowId = rowId;
        }

        /**
         * Set date
         * @param date  (optional)
         * @return UpdateRowRequestBuilder
         */
        public UpdateRowRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateRowRequestBuilder
         */
        public UpdateRowRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return UpdateRowRequestBuilder
         */
        public UpdateRowRequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set department
         * @param department  (optional)
         * @return UpdateRowRequestBuilder
         */
        public UpdateRowRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return UpdateRowRequestBuilder
         */
        public UpdateRowRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set reportsTo
         * @param reportsTo  (optional)
         * @return UpdateRowRequestBuilder
         */
        public UpdateRowRequestBuilder reportsTo(String reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }
        
        /**
         * Build call for updateRow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return updateRowCall(companyDomain, id, table, rowId, tableRowUpdate, _callback);
        }

        private TableRowUpdate buildBodyParams() {
            TableRowUpdate tableRowUpdate = new TableRowUpdate();
            tableRowUpdate.date(this.date);
            tableRowUpdate.location(this.location);
            tableRowUpdate.division(this.division);
            tableRowUpdate.department(this.department);
            tableRowUpdate.jobTitle(this.jobTitle);
            tableRowUpdate.reportsTo(this.reportsTo);
            return tableRowUpdate;
        }

        /**
         * Execute updateRow request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            updateRowWithHttpInfo(companyDomain, id, table, rowId, tableRowUpdate);
        }

        /**
         * Execute updateRow request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return updateRowWithHttpInfo(companyDomain, id, table, rowId, tableRowUpdate);
        }

        /**
         * Execute updateRow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return updateRowAsync(companyDomain, id, table, rowId, tableRowUpdate, _callback);
        }
    }

    /**
     * Updates a table row.
     * Updates a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is updating a row on the compensation table, the row cannot be updated if they are missing any of the required employee fields (including fields not on that table).
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @param table Table name (required)
     * @param rowId Row ID (required)
     * @param tableRowUpdate  (required)
     * @return UpdateRowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRowRequestBuilder updateRow(String companyDomain, String id, String table, String rowId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        if (rowId == null) throw new IllegalArgumentException("\"rowId\" is required but got null");
            

        return new UpdateRowRequestBuilder(companyDomain, id, table, rowId);
    }
    private okhttp3.Call updateRow_0Call(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableRowUpdate;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/employees/{id}/tables/{table}/{rowId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()))
            .replace("{" + "rowId" + "}", localVarApiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRow_0ValidateBeforeCall(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateRow_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRow_0(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling updateRow_0(Async)");
        }

        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling updateRow_0(Async)");
        }

        // verify the required parameter 'tableRowUpdate' is set
        if (tableRowUpdate == null) {
            throw new ApiException("Missing the required parameter 'tableRowUpdate' when calling updateRow_0(Async)");
        }

        return updateRow_0Call(companyDomain, id, table, rowId, tableRowUpdate, _callback);

    }


    private ApiResponse<Void> updateRow_0WithHttpInfo(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateRow_0ValidateBeforeCall(companyDomain, id, table, rowId, tableRowUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRow_0Async(String companyDomain, String id, String table, String rowId, TableRowUpdate tableRowUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRow_0ValidateBeforeCall(companyDomain, id, table, rowId, tableRowUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRow0RequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String table;
        private final String rowId;
        private String date;
        private String location;
        private String division;
        private String department;
        private String jobTitle;
        private String reportsTo;

        private UpdateRow0RequestBuilder(String companyDomain, String id, String table, String rowId) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.table = table;
            this.rowId = rowId;
        }

        /**
         * Set date
         * @param date  (optional)
         * @return UpdateRow0RequestBuilder
         */
        public UpdateRow0RequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateRow0RequestBuilder
         */
        public UpdateRow0RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return UpdateRow0RequestBuilder
         */
        public UpdateRow0RequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set department
         * @param department  (optional)
         * @return UpdateRow0RequestBuilder
         */
        public UpdateRow0RequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return UpdateRow0RequestBuilder
         */
        public UpdateRow0RequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set reportsTo
         * @param reportsTo  (optional)
         * @return UpdateRow0RequestBuilder
         */
        public UpdateRow0RequestBuilder reportsTo(String reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }
        
        /**
         * Build call for updateRow_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return updateRow_0Call(companyDomain, id, table, rowId, tableRowUpdate, _callback);
        }

        private TableRowUpdate buildBodyParams() {
            TableRowUpdate tableRowUpdate = new TableRowUpdate();
            tableRowUpdate.date(this.date);
            tableRowUpdate.location(this.location);
            tableRowUpdate.division(this.division);
            tableRowUpdate.department(this.department);
            tableRowUpdate.jobTitle(this.jobTitle);
            tableRowUpdate.reportsTo(this.reportsTo);
            return tableRowUpdate;
        }

        /**
         * Execute updateRow_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            updateRow_0WithHttpInfo(companyDomain, id, table, rowId, tableRowUpdate);
        }

        /**
         * Execute updateRow_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return updateRow_0WithHttpInfo(companyDomain, id, table, rowId, tableRowUpdate);
        }

        /**
         * Execute updateRow_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TableRowUpdate tableRowUpdate = buildBodyParams();
            return updateRow_0Async(companyDomain, id, table, rowId, tableRowUpdate, _callback);
        }
    }

    /**
     * Updates a table row.
     * Updates a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @param table Table name (required)
     * @param rowId Row ID (required)
     * @param tableRowUpdate  (required)
     * @return UpdateRow0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> An error with one or more of the fields. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRow0RequestBuilder updateRow_0(String companyDomain, String id, String table, String rowId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (table == null) throw new IllegalArgumentException("\"table\" is required but got null");
            

        if (rowId == null) throw new IllegalArgumentException("\"rowId\" is required but got null");
            

        return new UpdateRow0RequestBuilder(companyDomain, id, table, rowId);
    }
}
