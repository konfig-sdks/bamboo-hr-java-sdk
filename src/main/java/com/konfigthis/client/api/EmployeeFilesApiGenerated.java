/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeFileUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeFilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeFilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeFilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCategoryCall(String companyDomain, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/files/categories"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryValidateBeforeCall(String companyDomain, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addCategory(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addCategory(Async)");
        }

        return addCategoryCall(companyDomain, requestBody, _callback);

    }


    private ApiResponse<Void> addCategoryWithHttpInfo(String companyDomain, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(companyDomain, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCategoryAsync(String companyDomain, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(companyDomain, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCategoryRequestBuilder {
        private final String companyDomain;
        private List<String> requestBody;

        private AddCategoryRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set requestBody
         * @param requestBody  (optional)
         * @return AddCategoryRequestBuilder
         */
        public AddCategoryRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for addCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The category was created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted XML is invalid or there was no category name given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to create employee categories. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> there was an unknown server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return addCategoryCall(companyDomain, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute addCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The category was created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted XML is invalid or there was no category name given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to create employee categories. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> there was an unknown server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            addCategoryWithHttpInfo(companyDomain, requestBody);
        }

        /**
         * Execute addCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The category was created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted XML is invalid or there was no category name given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to create employee categories. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> there was an unknown server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return addCategoryWithHttpInfo(companyDomain, requestBody);
        }

        /**
         * Execute addCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The category was created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted XML is invalid or there was no category name given. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to create employee categories. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> there was an unknown server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return addCategoryAsync(companyDomain, requestBody, _callback);
        }
    }

    /**
     * Add Employee File Category
     * Add an employee file category.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param requestBody  (required)
     * @return AddCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The category was created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if the posted XML is invalid or there was no category name given. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to create employee categories. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> there was an unknown server error. </td><td>  -  </td></tr>
     </table>
     */
    public AddCategoryRequestBuilder addCategory(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddCategoryRequestBuilder(companyDomain);
    }
    private okhttp3.Call getEmployeeFileCall(String companyDomain, String id, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/files/{fileId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeFileValidateBeforeCall(String companyDomain, String id, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeeFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getEmployeeFile(Async)");
        }

        return getEmployeeFileCall(companyDomain, id, fileId, _callback);

    }


    private ApiResponse<Void> getEmployeeFileWithHttpInfo(String companyDomain, String id, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeFileValidateBeforeCall(companyDomain, id, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmployeeFileAsync(String companyDomain, String id, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeFileValidateBeforeCall(companyDomain, id, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmployeeFileRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String fileId;

        private GetEmployeeFileRequestBuilder(String companyDomain, String id, String fileId) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.fileId = fileId;
        }

        /**
         * Build call for getEmployeeFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeFileCall(companyDomain, id, fileId, _callback);
        }


        /**
         * Execute getEmployeeFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmployeeFileWithHttpInfo(companyDomain, id, fileId);
        }

        /**
         * Execute getEmployeeFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmployeeFileWithHttpInfo(companyDomain, id, fileId);
        }

        /**
         * Execute getEmployeeFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmployeeFileAsync(companyDomain, id, fileId, _callback);
        }
    }

    /**
     * Get an Employee File
     * Gets an employee file
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param fileId {fileId} is the ID of the employee file being retrieved. (required)
     * @return GetEmployeeFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee file was successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeFileRequestBuilder getEmployeeFile(String companyDomain, String id, String fileId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetEmployeeFileRequestBuilder(companyDomain, id, fileId);
    }
    private okhttp3.Call listFilesAndCategoriesCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/files/view"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesAndCategoriesValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listFilesAndCategories(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listFilesAndCategories(Async)");
        }

        return listFilesAndCategoriesCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> listFilesAndCategoriesWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = listFilesAndCategoriesValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listFilesAndCategoriesAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesAndCategoriesValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListFilesAndCategoriesRequestBuilder {
        private final String companyDomain;
        private final String id;

        private ListFilesAndCategoriesRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for listFilesAndCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file and category list </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if no files are found for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFilesAndCategoriesCall(companyDomain, id, _callback);
        }


        /**
         * Execute listFilesAndCategories request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file and category list </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if no files are found for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listFilesAndCategoriesWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute listFilesAndCategories request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file and category list </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if no files are found for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listFilesAndCategoriesWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute listFilesAndCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file and category list </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if no files are found for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listFilesAndCategoriesAsync(companyDomain, id, _callback);
        }
    }

    /**
     * List employee files and categories
     * Lists employee files and categories
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @return ListFilesAndCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee file and category list </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no files are found for this employee. </td><td>  -  </td></tr>
     </table>
     */
    public ListFilesAndCategoriesRequestBuilder listFilesAndCategories(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListFilesAndCategoriesRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call removeFileCall(String companyDomain, String id, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/files/{fileId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileValidateBeforeCall(String companyDomain, String id, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling removeFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeFile(Async)");
        }

        return removeFileCall(companyDomain, id, fileId, _callback);

    }


    private ApiResponse<Void> removeFileWithHttpInfo(String companyDomain, String id, String fileId) throws ApiException {
        okhttp3.Call localVarCall = removeFileValidateBeforeCall(companyDomain, id, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFileAsync(String companyDomain, String id, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileValidateBeforeCall(companyDomain, id, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFileRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String fileId;

        private RemoveFileRequestBuilder(String companyDomain, String id, String fileId) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.fileId = fileId;
        }

        /**
         * Build call for removeFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFileCall(companyDomain, id, fileId, _callback);
        }


        /**
         * Execute removeFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFileWithHttpInfo(companyDomain, id, fileId);
        }

        /**
         * Execute removeFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFileWithHttpInfo(companyDomain, id, fileId);
        }

        /**
         * Execute removeFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee file was deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFileAsync(companyDomain, id, fileId, _callback);
        }
    }

    /**
     * Delete Employee File
     * Delete an employee file
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param fileId {fileId} is the ID of the employee file being deleted. (required)
     * @return RemoveFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee file was deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the employee file was not found. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFileRequestBuilder removeFile(String companyDomain, String id, String fileId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new RemoveFileRequestBuilder(companyDomain, id, fileId);
    }
    private okhttp3.Call updateEmployeeFileCall(String companyDomain, String id, String fileId, EmployeeFileUpdate employeeFileUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeFileUpdate;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/files/{fileId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeFileValidateBeforeCall(String companyDomain, String id, String fileId, EmployeeFileUpdate employeeFileUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateEmployeeFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmployeeFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateEmployeeFile(Async)");
        }

        // verify the required parameter 'employeeFileUpdate' is set
        if (employeeFileUpdate == null) {
            throw new ApiException("Missing the required parameter 'employeeFileUpdate' when calling updateEmployeeFile(Async)");
        }

        return updateEmployeeFileCall(companyDomain, id, fileId, employeeFileUpdate, _callback);

    }


    private ApiResponse<Void> updateEmployeeFileWithHttpInfo(String companyDomain, String id, String fileId, EmployeeFileUpdate employeeFileUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeFileValidateBeforeCall(companyDomain, id, fileId, employeeFileUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmployeeFileAsync(String companyDomain, String id, String fileId, EmployeeFileUpdate employeeFileUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeFileValidateBeforeCall(companyDomain, id, fileId, employeeFileUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeFileRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String fileId;
        private String name;
        private String categoryId;
        private String shareWithEmployee;

        private UpdateEmployeeFileRequestBuilder(String companyDomain, String id, String fileId) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.fileId = fileId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateEmployeeFileRequestBuilder
         */
        public UpdateEmployeeFileRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId  (optional)
         * @return UpdateEmployeeFileRequestBuilder
         */
        public UpdateEmployeeFileRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set shareWithEmployee
         * @param shareWithEmployee  (optional)
         * @return UpdateEmployeeFileRequestBuilder
         */
        public UpdateEmployeeFileRequestBuilder shareWithEmployee(String shareWithEmployee) {
            this.shareWithEmployee = shareWithEmployee;
            return this;
        }
        
        /**
         * Build call for updateEmployeeFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The employee file was updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file or category was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeFileUpdate employeeFileUpdate = buildBodyParams();
            return updateEmployeeFileCall(companyDomain, id, fileId, employeeFileUpdate, _callback);
        }

        private EmployeeFileUpdate buildBodyParams() {
            EmployeeFileUpdate employeeFileUpdate = new EmployeeFileUpdate();
            employeeFileUpdate.name(this.name);
            employeeFileUpdate.categoryId(this.categoryId);
            employeeFileUpdate.shareWithEmployee(this.shareWithEmployee);
            return employeeFileUpdate;
        }

        /**
         * Execute updateEmployeeFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The employee file was updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file or category was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeFileUpdate employeeFileUpdate = buildBodyParams();
            updateEmployeeFileWithHttpInfo(companyDomain, id, fileId, employeeFileUpdate);
        }

        /**
         * Execute updateEmployeeFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The employee file was updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file or category was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeFileUpdate employeeFileUpdate = buildBodyParams();
            return updateEmployeeFileWithHttpInfo(companyDomain, id, fileId, employeeFileUpdate);
        }

        /**
         * Execute updateEmployeeFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The employee file was updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee file or category was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeFileUpdate employeeFileUpdate = buildBodyParams();
            return updateEmployeeFileAsync(companyDomain, id, fileId, employeeFileUpdate, _callback);
        }
    }

    /**
     * Update Employee File
     * Update an employee file
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param fileId {fileId} is the ID of the employee file being updated. (required)
     * @param employeeFileUpdate  (required)
     * @return UpdateEmployeeFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The employee file was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the employee file or category was not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeFileRequestBuilder updateEmployeeFile(String companyDomain, String id, String fileId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new UpdateEmployeeFileRequestBuilder(companyDomain, id, fileId);
    }
    private okhttp3.Call uploadFileCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{id}/files"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling uploadFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadFile(Async)");
        }

        return uploadFileCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> uploadFileWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadFileAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadFileRequestBuilder {
        private final String companyDomain;
        private final String id;

        private UploadFileRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for uploadFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The employee file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the category ID was not found. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file size exceeds 20MB or the storage limit for the company. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadFileCall(companyDomain, id, _callback);
        }


        /**
         * Execute uploadFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The employee file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the category ID was not found. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file size exceeds 20MB or the storage limit for the company. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            uploadFileWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute uploadFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The employee file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the category ID was not found. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file size exceeds 20MB or the storage limit for the company. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return uploadFileWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute uploadFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The employee file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the category ID was not found. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file size exceeds 20MB or the storage limit for the company. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return uploadFileAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Upload Employee File
     * Upload an employee file
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @return UploadFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The employee file was successfully uploaded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the API user does not have permission to see the requested employee or the employee&#39;s files. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the category ID was not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> if the file size exceeds 20MB or the storage limit for the company. </td><td>  -  </td></tr>
     </table>
     */
    public UploadFileRequestBuilder uploadFile(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UploadFileRequestBuilder(companyDomain, id);
    }
}
