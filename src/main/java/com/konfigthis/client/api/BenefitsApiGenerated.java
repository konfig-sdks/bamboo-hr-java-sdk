/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BenefitGroupEmployee;
import com.konfigthis.client.model.BenefitsAddEmployeeBenefitRequest;
import com.konfigthis.client.model.BenefitsAddNewCompanyBenefitRequest;
import com.konfigthis.client.model.BenefitsUpdateCompanyBenefitRequest;
import com.konfigthis.client.model.CompanyBenefitResponse;
import com.konfigthis.client.model.CompanyBenefitType;
import com.konfigthis.client.model.EmployeeBenefit;
import com.konfigthis.client.model.EmployeeBenefitFilters;
import com.konfigthis.client.model.EmployeeBenefitFiltersFilters;
import com.konfigthis.client.model.EmployeeDependent;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BenefitsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BenefitsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BenefitsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBenefitGroupEmployeeCall(String companyDomain, BenefitGroupEmployee benefitGroupEmployee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = benefitGroupEmployee;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitgroupemployees"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBenefitGroupEmployeeValidateBeforeCall(String companyDomain, BenefitGroupEmployee benefitGroupEmployee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addBenefitGroupEmployee(Async)");
        }

        // verify the required parameter 'benefitGroupEmployee' is set
        if (benefitGroupEmployee == null) {
            throw new ApiException("Missing the required parameter 'benefitGroupEmployee' when calling addBenefitGroupEmployee(Async)");
        }

        return addBenefitGroupEmployeeCall(companyDomain, benefitGroupEmployee, _callback);

    }


    private ApiResponse<Void> addBenefitGroupEmployeeWithHttpInfo(String companyDomain, BenefitGroupEmployee benefitGroupEmployee) throws ApiException {
        okhttp3.Call localVarCall = addBenefitGroupEmployeeValidateBeforeCall(companyDomain, benefitGroupEmployee, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addBenefitGroupEmployeeAsync(String companyDomain, BenefitGroupEmployee benefitGroupEmployee, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBenefitGroupEmployeeValidateBeforeCall(companyDomain, benefitGroupEmployee, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddBenefitGroupEmployeeRequestBuilder {
        private final String companyDomain;
        private String benefitGroupId;
        private String employeeId;
        private String startDate;
        private String endDate;

        private AddBenefitGroupEmployeeRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set benefitGroupId
         * @param benefitGroupId  (optional)
         * @return AddBenefitGroupEmployeeRequestBuilder
         */
        public AddBenefitGroupEmployeeRequestBuilder benefitGroupId(String benefitGroupId) {
            this.benefitGroupId = benefitGroupId;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return AddBenefitGroupEmployeeRequestBuilder
         */
        public AddBenefitGroupEmployeeRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return AddBenefitGroupEmployeeRequestBuilder
         */
        public AddBenefitGroupEmployeeRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return AddBenefitGroupEmployeeRequestBuilder
         */
        public AddBenefitGroupEmployeeRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for addBenefitGroupEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit group employee added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the benefit group employee. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BenefitGroupEmployee benefitGroupEmployee = buildBodyParams();
            return addBenefitGroupEmployeeCall(companyDomain, benefitGroupEmployee, _callback);
        }

        private BenefitGroupEmployee buildBodyParams() {
            BenefitGroupEmployee benefitGroupEmployee = new BenefitGroupEmployee();
            benefitGroupEmployee.benefitGroupId(this.benefitGroupId);
            benefitGroupEmployee.employeeId(this.employeeId);
            benefitGroupEmployee.startDate(this.startDate);
            benefitGroupEmployee.endDate(this.endDate);
            return benefitGroupEmployee;
        }

        /**
         * Execute addBenefitGroupEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit group employee added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the benefit group employee. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BenefitGroupEmployee benefitGroupEmployee = buildBodyParams();
            addBenefitGroupEmployeeWithHttpInfo(companyDomain, benefitGroupEmployee);
        }

        /**
         * Execute addBenefitGroupEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit group employee added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the benefit group employee. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BenefitGroupEmployee benefitGroupEmployee = buildBodyParams();
            return addBenefitGroupEmployeeWithHttpInfo(companyDomain, benefitGroupEmployee);
        }

        /**
         * Execute addBenefitGroupEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit group employee added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the benefit group employee. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BenefitGroupEmployee benefitGroupEmployee = buildBodyParams();
            return addBenefitGroupEmployeeAsync(companyDomain, benefitGroupEmployee, _callback);
        }
    }

    /**
     * Add a benefit group employee
     * Add a benefit group employee
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param benefitGroupEmployee  (required)
     * @return AddBenefitGroupEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Benefit group employee added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the benefit group employee. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public AddBenefitGroupEmployeeRequestBuilder addBenefitGroupEmployee(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddBenefitGroupEmployeeRequestBuilder(companyDomain);
    }
    private okhttp3.Call addEmployeeBenefitCall(String companyDomain, BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = benefitsAddEmployeeBenefitRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/employee_benefit"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeeBenefitValidateBeforeCall(String companyDomain, BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addEmployeeBenefit(Async)");
        }

        // verify the required parameter 'benefitsAddEmployeeBenefitRequest' is set
        if (benefitsAddEmployeeBenefitRequest == null) {
            throw new ApiException("Missing the required parameter 'benefitsAddEmployeeBenefitRequest' when calling addEmployeeBenefit(Async)");
        }

        return addEmployeeBenefitCall(companyDomain, benefitsAddEmployeeBenefitRequest, _callback);

    }


    private ApiResponse<Void> addEmployeeBenefitWithHttpInfo(String companyDomain, BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest) throws ApiException {
        okhttp3.Call localVarCall = addEmployeeBenefitValidateBeforeCall(companyDomain, benefitsAddEmployeeBenefitRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addEmployeeBenefitAsync(String companyDomain, BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeeBenefitValidateBeforeCall(companyDomain, benefitsAddEmployeeBenefitRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddEmployeeBenefitRequestBuilder {
        private final String companyDomain;
        private Integer employeeId;
        private Integer companyBenefitId;
        private String companyBenefitName;
        private String coverageLevel;
        private LocalDate deductionEndDate;
        private LocalDate deductionStartDate;
        private String enrollmentStatus;
        private LocalDate effectiveDate;
        private String currencyCode;
        private Double employeeAmount;
        private String employeeAmountType;
        private String employeePercentBasedOn;
        private Double employeeCapAmount;
        private String employeeCapAmountType;
        private Double employeeAnnualMax;
        private Double companyAmount;
        private String companyAmountType;
        private String companyPercentBasedOn;
        private Double companyCapAmount;
        private String companyCapAmountType;
        private Double companyAnnualMax;
        private Double benefitPlanCoverageId;

        private AddEmployeeBenefitRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set employeeId
         * @param employeeId Employee ID (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set companyBenefitId
         * @param companyBenefitId Company benefit ID (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyBenefitId(Integer companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
            return this;
        }
        
        /**
         * Set companyBenefitName
         * @param companyBenefitName Company benefit name (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyBenefitName(String companyBenefitName) {
            this.companyBenefitName = companyBenefitName;
            return this;
        }
        
        /**
         * Set coverageLevel
         * @param coverageLevel Coverage level (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder coverageLevel(String coverageLevel) {
            this.coverageLevel = coverageLevel;
            return this;
        }
        
        /**
         * Set deductionEndDate
         * @param deductionEndDate Deduction end date (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder deductionEndDate(LocalDate deductionEndDate) {
            this.deductionEndDate = deductionEndDate;
            return this;
        }
        
        /**
         * Set deductionStartDate
         * @param deductionStartDate Deduction start date (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder deductionStartDate(LocalDate deductionStartDate) {
            this.deductionStartDate = deductionStartDate;
            return this;
        }
        
        /**
         * Set enrollmentStatus
         * @param enrollmentStatus Enrollment status (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder enrollmentStatus(String enrollmentStatus) {
            this.enrollmentStatus = enrollmentStatus;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Enrollment status effective date (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set currencyCode
         * @param currencyCode Currency code (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Set employeeAmount
         * @param employeeAmount Employee amount (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeeAmount(Double employeeAmount) {
            this.employeeAmount = employeeAmount;
            return this;
        }
        
        /**
         * Set employeeAmountType
         * @param employeeAmountType Employee amount type (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeeAmountType(String employeeAmountType) {
            this.employeeAmountType = employeeAmountType;
            return this;
        }
        
        /**
         * Set employeePercentBasedOn
         * @param employeePercentBasedOn Employee percent based on (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeePercentBasedOn(String employeePercentBasedOn) {
            this.employeePercentBasedOn = employeePercentBasedOn;
            return this;
        }
        
        /**
         * Set employeeCapAmount
         * @param employeeCapAmount Employee cap amount (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeeCapAmount(Double employeeCapAmount) {
            this.employeeCapAmount = employeeCapAmount;
            return this;
        }
        
        /**
         * Set employeeCapAmountType
         * @param employeeCapAmountType Employee cap amount type (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeeCapAmountType(String employeeCapAmountType) {
            this.employeeCapAmountType = employeeCapAmountType;
            return this;
        }
        
        /**
         * Set employeeAnnualMax
         * @param employeeAnnualMax Employee annual max (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder employeeAnnualMax(Double employeeAnnualMax) {
            this.employeeAnnualMax = employeeAnnualMax;
            return this;
        }
        
        /**
         * Set companyAmount
         * @param companyAmount Company amount (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyAmount(Double companyAmount) {
            this.companyAmount = companyAmount;
            return this;
        }
        
        /**
         * Set companyAmountType
         * @param companyAmountType Company amount type (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyAmountType(String companyAmountType) {
            this.companyAmountType = companyAmountType;
            return this;
        }
        
        /**
         * Set companyPercentBasedOn
         * @param companyPercentBasedOn Company percent based on (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyPercentBasedOn(String companyPercentBasedOn) {
            this.companyPercentBasedOn = companyPercentBasedOn;
            return this;
        }
        
        /**
         * Set companyCapAmount
         * @param companyCapAmount Company cap amount (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyCapAmount(Double companyCapAmount) {
            this.companyCapAmount = companyCapAmount;
            return this;
        }
        
        /**
         * Set companyCapAmountType
         * @param companyCapAmountType Company cap amount type (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyCapAmountType(String companyCapAmountType) {
            this.companyCapAmountType = companyCapAmountType;
            return this;
        }
        
        /**
         * Set companyAnnualMax
         * @param companyAnnualMax Company annual max (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder companyAnnualMax(Double companyAnnualMax) {
            this.companyAnnualMax = companyAnnualMax;
            return this;
        }
        
        /**
         * Set benefitPlanCoverageId
         * @param benefitPlanCoverageId Benefit Plan Coverage ID (optional)
         * @return AddEmployeeBenefitRequestBuilder
         */
        public AddEmployeeBenefitRequestBuilder benefitPlanCoverageId(Double benefitPlanCoverageId) {
            this.benefitPlanCoverageId = benefitPlanCoverageId;
            return this;
        }
        
        /**
         * Build call for addEmployeeBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee benefit created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest = buildBodyParams();
            return addEmployeeBenefitCall(companyDomain, benefitsAddEmployeeBenefitRequest, _callback);
        }

        private BenefitsAddEmployeeBenefitRequest buildBodyParams() {
            BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest = new BenefitsAddEmployeeBenefitRequest();
            return benefitsAddEmployeeBenefitRequest;
        }

        /**
         * Execute addEmployeeBenefit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee benefit created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest = buildBodyParams();
            addEmployeeBenefitWithHttpInfo(companyDomain, benefitsAddEmployeeBenefitRequest);
        }

        /**
         * Execute addEmployeeBenefit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee benefit created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest = buildBodyParams();
            return addEmployeeBenefitWithHttpInfo(companyDomain, benefitsAddEmployeeBenefitRequest);
        }

        /**
         * Execute addEmployeeBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee benefit created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BenefitsAddEmployeeBenefitRequest benefitsAddEmployeeBenefitRequest = buildBodyParams();
            return addEmployeeBenefitAsync(companyDomain, benefitsAddEmployeeBenefitRequest, _callback);
        }
    }

    /**
     * Add an employee benefit
     * Add an employee benefit
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param benefitsAddEmployeeBenefitRequest Employee Benefit (required)
     * @return AddEmployeeBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee benefit created </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeeBenefitRequestBuilder addEmployeeBenefit(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddEmployeeBenefitRequestBuilder(companyDomain);
    }
    private okhttp3.Call addNewCompanyBenefitCall(String companyDomain, BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest, String description, String companyBenefitName, String benefitVendorId, String benefitType, String deductionTypeId, LocalDate startDate, LocalDate endDate, String planUrl, String ssoLoginUrl, String ssoLoginUrlLinkText, Boolean safeHarbor, Boolean meetAcaMin, Double reimbursementAmount, String reimbursementFrequency, String reimbursementCurrencyCode, Boolean minEssentialCoverage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = benefitsAddNewCompanyBenefitRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/company_benefit"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (companyBenefitName != null) {
            localVarFormParams.put("companyBenefitName", companyBenefitName);
        }

        if (benefitVendorId != null) {
            localVarFormParams.put("benefitVendorId", benefitVendorId);
        }

        if (benefitType != null) {
            localVarFormParams.put("benefitType", benefitType);
        }

        if (deductionTypeId != null) {
            localVarFormParams.put("deductionTypeId", deductionTypeId);
        }

        if (startDate != null) {
            localVarFormParams.put("startDate", startDate);
        }

        if (endDate != null) {
            localVarFormParams.put("endDate", endDate);
        }

        if (planUrl != null) {
            localVarFormParams.put("planUrl", planUrl);
        }

        if (ssoLoginUrl != null) {
            localVarFormParams.put("ssoLoginUrl", ssoLoginUrl);
        }

        if (ssoLoginUrlLinkText != null) {
            localVarFormParams.put("ssoLoginUrlLinkText", ssoLoginUrlLinkText);
        }

        if (safeHarbor != null) {
            localVarFormParams.put("safeHarbor", safeHarbor);
        }

        if (meetAcaMin != null) {
            localVarFormParams.put("meetAcaMin", meetAcaMin);
        }

        if (reimbursementAmount != null) {
            localVarFormParams.put("reimbursementAmount", reimbursementAmount);
        }

        if (reimbursementFrequency != null) {
            localVarFormParams.put("reimbursementFrequency", reimbursementFrequency);
        }

        if (reimbursementCurrencyCode != null) {
            localVarFormParams.put("reimbursementCurrencyCode", reimbursementCurrencyCode);
        }

        if (minEssentialCoverage != null) {
            localVarFormParams.put("minEssentialCoverage", minEssentialCoverage);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCompanyBenefitValidateBeforeCall(String companyDomain, BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest, String description, String companyBenefitName, String benefitVendorId, String benefitType, String deductionTypeId, LocalDate startDate, LocalDate endDate, String planUrl, String ssoLoginUrl, String ssoLoginUrlLinkText, Boolean safeHarbor, Boolean meetAcaMin, Double reimbursementAmount, String reimbursementFrequency, String reimbursementCurrencyCode, Boolean minEssentialCoverage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addNewCompanyBenefit(Async)");
        }

        // verify the required parameter 'benefitsAddNewCompanyBenefitRequest' is set
        if (benefitsAddNewCompanyBenefitRequest == null) {
            throw new ApiException("Missing the required parameter 'benefitsAddNewCompanyBenefitRequest' when calling addNewCompanyBenefit(Async)");
        }

        return addNewCompanyBenefitCall(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage, _callback);

    }


    private ApiResponse<CompanyBenefitResponse> addNewCompanyBenefitWithHttpInfo(String companyDomain, BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest, String description, String companyBenefitName, String benefitVendorId, String benefitType, String deductionTypeId, LocalDate startDate, LocalDate endDate, String planUrl, String ssoLoginUrl, String ssoLoginUrlLinkText, Boolean safeHarbor, Boolean meetAcaMin, Double reimbursementAmount, String reimbursementFrequency, String reimbursementCurrencyCode, Boolean minEssentialCoverage) throws ApiException {
        okhttp3.Call localVarCall = addNewCompanyBenefitValidateBeforeCall(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage, null);
        Type localVarReturnType = new TypeToken<CompanyBenefitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCompanyBenefitAsync(String companyDomain, BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest, String description, String companyBenefitName, String benefitVendorId, String benefitType, String deductionTypeId, LocalDate startDate, LocalDate endDate, String planUrl, String ssoLoginUrl, String ssoLoginUrlLinkText, Boolean safeHarbor, Boolean meetAcaMin, Double reimbursementAmount, String reimbursementFrequency, String reimbursementCurrencyCode, Boolean minEssentialCoverage, final ApiCallback<CompanyBenefitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCompanyBenefitValidateBeforeCall(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCompanyBenefitRequestBuilder {
        private final String companyDomain;
        private String description;
        private String companyBenefitName;
        private String benefitVendorId;
        private String benefitType;
        private String deductionTypeId;
        private LocalDate startDate;
        private LocalDate endDate;
        private String planUrl;
        private String ssoLoginUrl;
        private String ssoLoginUrlLinkText;
        private Boolean safeHarbor;
        private Boolean meetAcaMin;
        private Double reimbursementAmount;
        private String reimbursementFrequency;
        private String reimbursementCurrencyCode;
        private Boolean minEssentialCoverage;

        private AddNewCompanyBenefitRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set description
         * @param description Description (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set companyBenefitName
         * @param companyBenefitName Name (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder companyBenefitName(String companyBenefitName) {
            this.companyBenefitName = companyBenefitName;
            return this;
        }
        
        /**
         * Set benefitVendorId
         * @param benefitVendorId Benefit vendor ID (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder benefitVendorId(String benefitVendorId) {
            this.benefitVendorId = benefitVendorId;
            return this;
        }
        
        /**
         * Set benefitType
         * @param benefitType Benefit type (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder benefitType(String benefitType) {
            this.benefitType = benefitType;
            return this;
        }
        
        /**
         * Set deductionTypeId
         * @param deductionTypeId Deduction type ID (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder deductionTypeId(String deductionTypeId) {
            this.deductionTypeId = deductionTypeId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Benefit start date (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Benefit end date (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set planUrl
         * @param planUrl Plan url (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder planUrl(String planUrl) {
            this.planUrl = planUrl;
            return this;
        }
        
        /**
         * Set ssoLoginUrl
         * @param ssoLoginUrl SSO login url (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder ssoLoginUrl(String ssoLoginUrl) {
            this.ssoLoginUrl = ssoLoginUrl;
            return this;
        }
        
        /**
         * Set ssoLoginUrlLinkText
         * @param ssoLoginUrlLinkText SSO login link text (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder ssoLoginUrlLinkText(String ssoLoginUrlLinkText) {
            this.ssoLoginUrlLinkText = ssoLoginUrlLinkText;
            return this;
        }
        
        /**
         * Set safeHarbor
         * @param safeHarbor Is a safe harbor (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder safeHarbor(Boolean safeHarbor) {
            this.safeHarbor = safeHarbor;
            return this;
        }
        
        /**
         * Set meetAcaMin
         * @param meetAcaMin Meets ACA minimum requirements (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder meetAcaMin(Boolean meetAcaMin) {
            this.meetAcaMin = meetAcaMin;
            return this;
        }
        
        /**
         * Set reimbursementAmount
         * @param reimbursementAmount Reimbursement amount (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder reimbursementAmount(Double reimbursementAmount) {
            this.reimbursementAmount = reimbursementAmount;
            return this;
        }
        
        /**
         * Set reimbursementFrequency
         * @param reimbursementFrequency Reimbursement frequency (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder reimbursementFrequency(String reimbursementFrequency) {
            this.reimbursementFrequency = reimbursementFrequency;
            return this;
        }
        
        /**
         * Set reimbursementCurrencyCode
         * @param reimbursementCurrencyCode Reimbursement currency code (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder reimbursementCurrencyCode(String reimbursementCurrencyCode) {
            this.reimbursementCurrencyCode = reimbursementCurrencyCode;
            return this;
        }
        
        /**
         * Set minEssentialCoverage
         * @param minEssentialCoverage Provides minimum essential coverage (optional)
         * @return AddNewCompanyBenefitRequestBuilder
         */
        public AddNewCompanyBenefitRequestBuilder minEssentialCoverage(Boolean minEssentialCoverage) {
            this.minEssentialCoverage = minEssentialCoverage;
            return this;
        }
        
        /**
         * Build call for addNewCompanyBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly created company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest = buildBodyParams();
            return addNewCompanyBenefitCall(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage, _callback);
        }

        private BenefitsAddNewCompanyBenefitRequest buildBodyParams() {
            BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest = new BenefitsAddNewCompanyBenefitRequest();
            return benefitsAddNewCompanyBenefitRequest;
        }

        /**
         * Execute addNewCompanyBenefit request
         * @return CompanyBenefitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly created company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefitResponse execute() throws ApiException {
            BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest = buildBodyParams();
            ApiResponse<CompanyBenefitResponse> localVarResp = addNewCompanyBenefitWithHttpInfo(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewCompanyBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly created company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefitResponse> executeWithHttpInfo() throws ApiException {
            BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest = buildBodyParams();
            return addNewCompanyBenefitWithHttpInfo(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage);
        }

        /**
         * Execute addNewCompanyBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly created company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefitResponse> _callback) throws ApiException {
            BenefitsAddNewCompanyBenefitRequest benefitsAddNewCompanyBenefitRequest = buildBodyParams();
            return addNewCompanyBenefitAsync(companyDomain, benefitsAddNewCompanyBenefitRequest, description, companyBenefitName, benefitVendorId, benefitType, deductionTypeId, startDate, endDate, planUrl, ssoLoginUrl, ssoLoginUrlLinkText, safeHarbor, meetAcaMin, reimbursementAmount, reimbursementFrequency, reimbursementCurrencyCode, minEssentialCoverage, _callback);
        }
    }

    /**
     * Add a new company benefit
     * Add a new company benefit
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param benefitsAddNewCompanyBenefitRequest  (required)
     * @return AddNewCompanyBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created company benefit. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCompanyBenefitRequestBuilder addNewCompanyBenefit(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddNewCompanyBenefitRequestBuilder(companyDomain);
    }
    private okhttp3.Call createEmployeeDependentCall(String companyDomain, EmployeeDependent employeeDependent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDependent;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employeedependents"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeDependentValidateBeforeCall(String companyDomain, EmployeeDependent employeeDependent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createEmployeeDependent(Async)");
        }

        // verify the required parameter 'employeeDependent' is set
        if (employeeDependent == null) {
            throw new ApiException("Missing the required parameter 'employeeDependent' when calling createEmployeeDependent(Async)");
        }

        return createEmployeeDependentCall(companyDomain, employeeDependent, _callback);

    }


    private ApiResponse<Void> createEmployeeDependentWithHttpInfo(String companyDomain, EmployeeDependent employeeDependent) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeDependentValidateBeforeCall(companyDomain, employeeDependent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createEmployeeDependentAsync(String companyDomain, EmployeeDependent employeeDependent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeDependentValidateBeforeCall(companyDomain, employeeDependent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateEmployeeDependentRequestBuilder {
        private final String companyDomain;
        private String employeeId;
        private String firstName;
        private String middleName;
        private String lastName;
        private String relationship;
        private String gender;
        private String ssn;
        private String dateOfBirth;
        private String addressLine1;
        private String addressLine2;
        private String city;
        private String state;
        private String zipCode;
        private String homePhone;
        private String country;
        private String isUsCitizen;
        private String isStudent;

        private CreateEmployeeDependentRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder relationship(String relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set addressLine1
         * @param addressLine1  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder addressLine1(String addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }
        
        /**
         * Set addressLine2
         * @param addressLine2  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder addressLine2(String addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set homePhone
         * @param homePhone  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder homePhone(String homePhone) {
            this.homePhone = homePhone;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set isUsCitizen
         * @param isUsCitizen  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder isUsCitizen(String isUsCitizen) {
            this.isUsCitizen = isUsCitizen;
            return this;
        }
        
        /**
         * Set isStudent
         * @param isStudent  (optional)
         * @return CreateEmployeeDependentRequestBuilder
         */
        public CreateEmployeeDependentRequestBuilder isStudent(String isStudent) {
            this.isStudent = isStudent;
            return this;
        }
        
        /**
         * Build call for createEmployeeDependent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dependent added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the dependent. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            return createEmployeeDependentCall(companyDomain, employeeDependent, _callback);
        }

        private EmployeeDependent buildBodyParams() {
            EmployeeDependent employeeDependent = new EmployeeDependent();
            employeeDependent.employeeId(this.employeeId);
            employeeDependent.firstName(this.firstName);
            employeeDependent.middleName(this.middleName);
            employeeDependent.lastName(this.lastName);
            employeeDependent.relationship(this.relationship);
            employeeDependent.gender(this.gender);
            employeeDependent.ssn(this.ssn);
            employeeDependent.dateOfBirth(this.dateOfBirth);
            employeeDependent.addressLine1(this.addressLine1);
            employeeDependent.addressLine2(this.addressLine2);
            employeeDependent.city(this.city);
            employeeDependent.state(this.state);
            employeeDependent.zipCode(this.zipCode);
            employeeDependent.homePhone(this.homePhone);
            employeeDependent.country(this.country);
            employeeDependent.isUsCitizen(this.isUsCitizen);
            employeeDependent.isStudent(this.isStudent);
            return employeeDependent;
        }

        /**
         * Execute createEmployeeDependent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dependent added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the dependent. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            createEmployeeDependentWithHttpInfo(companyDomain, employeeDependent);
        }

        /**
         * Execute createEmployeeDependent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dependent added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the dependent. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            return createEmployeeDependentWithHttpInfo(companyDomain, employeeDependent);
        }

        /**
         * Execute createEmployeeDependent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dependent added </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the dependent. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            return createEmployeeDependentAsync(companyDomain, employeeDependent, _callback);
        }
    }

    /**
     * Add an employee dependent
     * Adds an employee dependent
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeDependent  (required)
     * @return CreateEmployeeDependentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dependent added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to add the dependent. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeDependentRequestBuilder createEmployeeDependent(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CreateEmployeeDependentRequestBuilder(companyDomain);
    }
    private okhttp3.Call deleteCompanyBenefitCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/company_benefit/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompanyBenefitValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteCompanyBenefit(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCompanyBenefit(Async)");
        }

        return deleteCompanyBenefitCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> deleteCompanyBenefitWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCompanyBenefitValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCompanyBenefitAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompanyBenefitValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCompanyBenefitRequestBuilder {
        private final String companyDomain;
        private final String id;

        private DeleteCompanyBenefitRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for deleteCompanyBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCompanyBenefitCall(companyDomain, id, _callback);
        }


        /**
         * Execute deleteCompanyBenefit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCompanyBenefitWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteCompanyBenefit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCompanyBenefitWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteCompanyBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCompanyBenefitAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Delete a company benefit
     * Delete a company benefit
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the company benefit ID. (required)
     * @return DeleteCompanyBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted company benefit. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCompanyBenefitRequestBuilder deleteCompanyBenefit(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteCompanyBenefitRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getBenefitGroupEmployeesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitgroupemployees"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitGroupEmployeesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getBenefitGroupEmployees(Async)");
        }

        return getBenefitGroupEmployeesCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getBenefitGroupEmployeesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getBenefitGroupEmployeesValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBenefitGroupEmployeesAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitGroupEmployeesValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBenefitGroupEmployeesRequestBuilder {
        private final String companyDomain;

        private GetBenefitGroupEmployeesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getBenefitGroupEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitGroupEmployeesCall(companyDomain, _callback);
        }


        /**
         * Execute getBenefitGroupEmployees request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBenefitGroupEmployeesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getBenefitGroupEmployees request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBenefitGroupEmployeesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getBenefitGroupEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBenefitGroupEmployeesAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit group employees
     * Get benefit group employees
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetBenefitGroupEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitGroupEmployeesRequestBuilder getBenefitGroupEmployees(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetBenefitGroupEmployeesRequestBuilder(companyDomain);
    }
    private okhttp3.Call getBenefitGroupsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitgroups"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitGroupsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getBenefitGroups(Async)");
        }

        return getBenefitGroupsCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getBenefitGroupsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getBenefitGroupsValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBenefitGroupsAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitGroupsValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBenefitGroupsRequestBuilder {
        private final String companyDomain;

        private GetBenefitGroupsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getBenefitGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitGroupsCall(companyDomain, _callback);
        }


        /**
         * Execute getBenefitGroups request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBenefitGroupsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getBenefitGroups request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBenefitGroupsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getBenefitGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBenefitGroupsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit groups
     * Get benefit groups
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetBenefitGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitGroupsRequestBuilder getBenefitGroups(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetBenefitGroupsRequestBuilder(companyDomain);
    }
    private okhttp3.Call getBenefitPlanDeductionsByEmployeeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee/plans/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitPlanDeductionsByEmployeeValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getBenefitPlanDeductionsByEmployee(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBenefitPlanDeductionsByEmployee(Async)");
        }

        return getBenefitPlanDeductionsByEmployeeCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getBenefitPlanDeductionsByEmployeeWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getBenefitPlanDeductionsByEmployeeValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBenefitPlanDeductionsByEmployeeAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitPlanDeductionsByEmployeeValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBenefitPlanDeductionsByEmployeeRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetBenefitPlanDeductionsByEmployeeRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getBenefitPlanDeductionsByEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitPlanDeductionsByEmployeeCall(companyDomain, id, _callback);
        }


        /**
         * Execute getBenefitPlanDeductionsByEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBenefitPlanDeductionsByEmployeeWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getBenefitPlanDeductionsByEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBenefitPlanDeductionsByEmployeeWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getBenefitPlanDeductionsByEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBenefitPlanDeductionsByEmployeeAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get benefit plan deductions by employee
     * Get benefit plan deductions by employee
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @return GetBenefitPlanDeductionsByEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitPlanDeductionsByEmployeeRequestBuilder getBenefitPlanDeductionsByEmployee(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetBenefitPlanDeductionsByEmployeeRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getBenefitPlansCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitplans"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitPlansValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getBenefitPlans(Async)");
        }

        return getBenefitPlansCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getBenefitPlansWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getBenefitPlansValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBenefitPlansAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitPlansValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBenefitPlansRequestBuilder {
        private final String companyDomain;

        private GetBenefitPlansRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getBenefitPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitPlansCall(companyDomain, _callback);
        }


        /**
         * Execute getBenefitPlans request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBenefitPlansWithHttpInfo(companyDomain);
        }

        /**
         * Execute getBenefitPlans request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBenefitPlansWithHttpInfo(companyDomain);
        }

        /**
         * Execute getBenefitPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBenefitPlansAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit plans
     * Get benefit plans
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetBenefitPlansRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitPlansRequestBuilder getBenefitPlans(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetBenefitPlansRequestBuilder(companyDomain);
    }
    private okhttp3.Call getCompanyBenefitCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/company_benefit/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyBenefitValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getCompanyBenefit(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCompanyBenefit(Async)");
        }

        return getCompanyBenefitCall(companyDomain, id, _callback);

    }


    private ApiResponse<CompanyBenefitResponse> getCompanyBenefitWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getCompanyBenefitValidateBeforeCall(companyDomain, id, null);
        Type localVarReturnType = new TypeToken<CompanyBenefitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyBenefitAsync(String companyDomain, String id, final ApiCallback<CompanyBenefitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyBenefitValidateBeforeCall(companyDomain, id, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyBenefitRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetCompanyBenefitRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getCompanyBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyBenefitCall(companyDomain, id, _callback);
        }


        /**
         * Execute getCompanyBenefit request
         * @return CompanyBenefitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefitResponse execute() throws ApiException {
            ApiResponse<CompanyBenefitResponse> localVarResp = getCompanyBenefitWithHttpInfo(companyDomain, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefitResponse> executeWithHttpInfo() throws ApiException {
            return getCompanyBenefitWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getCompanyBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefitResponse> _callback) throws ApiException {
            return getCompanyBenefitAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get a company benefit
     * Get a company benefit
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the company benefit ID. (required)
     * @return GetCompanyBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested company benefit. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyBenefitRequestBuilder getCompanyBenefit(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCompanyBenefitRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getCoveragesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitcoverages"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoveragesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getCoverages(Async)");
        }

        return getCoveragesCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getCoveragesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getCoveragesValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCoveragesAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCoveragesValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCoveragesRequestBuilder {
        private final String companyDomain;

        private GetCoveragesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getCoverages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCoveragesCall(companyDomain, _callback);
        }


        /**
         * Execute getCoverages request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCoveragesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getCoverages request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCoveragesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getCoverages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCoveragesAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit coverages
     * Get benefit coverages
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetCoveragesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCoveragesRequestBuilder getCoverages(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetCoveragesRequestBuilder(companyDomain);
    }
    private okhttp3.Call getDeductionTypesAllCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefits/settings/deduction_types/all"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeductionTypesAllValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDeductionTypesAll(Async)");
        }

        return getDeductionTypesAllCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getDeductionTypesAllWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getDeductionTypesAllValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDeductionTypesAllAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeductionTypesAllValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDeductionTypesAllRequestBuilder {
        private final String companyDomain;

        private GetDeductionTypesAllRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getDeductionTypesAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeductionTypesAllCall(companyDomain, _callback);
        }


        /**
         * Execute getDeductionTypesAll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDeductionTypesAllWithHttpInfo(companyDomain);
        }

        /**
         * Execute getDeductionTypesAll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDeductionTypesAllWithHttpInfo(companyDomain);
        }

        /**
         * Execute getDeductionTypesAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDeductionTypesAllAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit deduction types
     * Get benefit deduction types
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetDeductionTypesAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDeductionTypesAllRequestBuilder getDeductionTypesAll(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetDeductionTypesAllRequestBuilder(companyDomain);
    }
    private okhttp3.Call getDeductionsByPlanCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employee/deductions/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeductionsByPlanValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDeductionsByPlan(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDeductionsByPlan(Async)");
        }

        return getDeductionsByPlanCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getDeductionsByPlanWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getDeductionsByPlanValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDeductionsByPlanAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeductionsByPlanValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDeductionsByPlanRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetDeductionsByPlanRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getDeductionsByPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeductionsByPlanCall(companyDomain, id, _callback);
        }


        /**
         * Execute getDeductionsByPlan request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDeductionsByPlanWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getDeductionsByPlan request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDeductionsByPlanWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getDeductionsByPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDeductionsByPlanAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get employee deductions by benefit plan
     * Get employee deductions by benefit plan
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the benefit plan ID. (required)
     * @return GetDeductionsByPlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDeductionsByPlanRequestBuilder getDeductionsByPlan(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDeductionsByPlanRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getEmployeeBenefitDeductionsCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/payroll/deductions/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeBenefitDeductionsValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeeBenefitDeductions(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeBenefitDeductions(Async)");
        }

        return getEmployeeBenefitDeductionsCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getEmployeeBenefitDeductionsWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeBenefitDeductionsValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmployeeBenefitDeductionsAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeBenefitDeductionsValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmployeeBenefitDeductionsRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetEmployeeBenefitDeductionsRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getEmployeeBenefitDeductions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeBenefitDeductionsCall(companyDomain, id, _callback);
        }


        /**
         * Execute getEmployeeBenefitDeductions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmployeeBenefitDeductionsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getEmployeeBenefitDeductions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmployeeBenefitDeductionsWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getEmployeeBenefitDeductions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmployeeBenefitDeductionsAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get benefit deductions for employee
     * Get benefit deductions for employee
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee ID. (required)
     * @return GetEmployeeBenefitDeductionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeBenefitDeductionsRequestBuilder getEmployeeBenefitDeductions(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEmployeeBenefitDeductionsRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getEmployeeDependentCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employeedependents/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeDependentValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeeDependent(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeDependent(Async)");
        }

        return getEmployeeDependentCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getEmployeeDependentWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeDependentValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmployeeDependentAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeDependentValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmployeeDependentRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetEmployeeDependentRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getEmployeeDependent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeDependentCall(companyDomain, id, _callback);
        }


        /**
         * Execute getEmployeeDependent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmployeeDependentWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getEmployeeDependent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmployeeDependentWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getEmployeeDependent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmployeeDependentAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get employee dependent
     * Get employee dependent
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee dependent ID. (required)
     * @return GetEmployeeDependentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeDependentRequestBuilder getEmployeeDependent(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEmployeeDependentRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call getGroupPlanCostsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitgroupplancosts"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupPlanCostsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getGroupPlanCosts(Async)");
        }

        return getGroupPlanCostsCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getGroupPlanCostsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getGroupPlanCostsValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getGroupPlanCostsAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupPlanCostsValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetGroupPlanCostsRequestBuilder {
        private final String companyDomain;

        private GetGroupPlanCostsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getGroupPlanCosts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupPlanCostsCall(companyDomain, _callback);
        }


        /**
         * Execute getGroupPlanCosts request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getGroupPlanCostsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getGroupPlanCosts request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getGroupPlanCostsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getGroupPlanCosts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getGroupPlanCostsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit group plan costs
     * Get benefit group plan costs
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetGroupPlanCostsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupPlanCostsRequestBuilder getGroupPlanCosts(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetGroupPlanCostsRequestBuilder(companyDomain);
    }
    private okhttp3.Call getGroupPlansCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitgroupplans"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupPlansValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getGroupPlans(Async)");
        }

        return getGroupPlansCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getGroupPlansWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getGroupPlansValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getGroupPlansAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupPlansValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetGroupPlansRequestBuilder {
        private final String companyDomain;

        private GetGroupPlansRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getGroupPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupPlansCall(companyDomain, _callback);
        }


        /**
         * Execute getGroupPlans request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getGroupPlansWithHttpInfo(companyDomain);
        }

        /**
         * Execute getGroupPlans request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getGroupPlansWithHttpInfo(companyDomain);
        }

        /**
         * Execute getGroupPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getGroupPlansAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit group plans
     * Get benefit group plans
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetGroupPlansRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupPlansRequestBuilder getGroupPlans(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetGroupPlansRequestBuilder(companyDomain);
    }
    private okhttp3.Call listBenefitPlanCoveragesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefitplancoverages"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBenefitPlanCoveragesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listBenefitPlanCoverages(Async)");
        }

        return listBenefitPlanCoveragesCall(companyDomain, _callback);

    }


    private ApiResponse<Void> listBenefitPlanCoveragesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = listBenefitPlanCoveragesValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listBenefitPlanCoveragesAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBenefitPlanCoveragesValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListBenefitPlanCoveragesRequestBuilder {
        private final String companyDomain;

        private ListBenefitPlanCoveragesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for listBenefitPlanCoverages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBenefitPlanCoveragesCall(companyDomain, _callback);
        }


        /**
         * Execute listBenefitPlanCoverages request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listBenefitPlanCoveragesWithHttpInfo(companyDomain);
        }

        /**
         * Execute listBenefitPlanCoverages request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listBenefitPlanCoveragesWithHttpInfo(companyDomain);
        }

        /**
         * Execute listBenefitPlanCoverages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listBenefitPlanCoveragesAsync(companyDomain, _callback);
        }
    }

    /**
     * Get benefit plan coverages
     * Get benefit plan coverages
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListBenefitPlanCoveragesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListBenefitPlanCoveragesRequestBuilder listBenefitPlanCoverages(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListBenefitPlanCoveragesRequestBuilder(companyDomain);
    }
    private okhttp3.Call listCompanyBenefitTypesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/company_benefit/type"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyBenefitTypesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listCompanyBenefitTypes(Async)");
        }

        return listCompanyBenefitTypesCall(companyDomain, _callback);

    }


    private ApiResponse<List<CompanyBenefitType>> listCompanyBenefitTypesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = listCompanyBenefitTypesValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<CompanyBenefitType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyBenefitTypesAsync(String companyDomain, final ApiCallback<List<CompanyBenefitType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyBenefitTypesValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<CompanyBenefitType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyBenefitTypesRequestBuilder {
        private final String companyDomain;

        private ListCompanyBenefitTypesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for listCompanyBenefitTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefit types. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyBenefitTypesCall(companyDomain, _callback);
        }


        /**
         * Execute listCompanyBenefitTypes request
         * @return List&lt;CompanyBenefitType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefit types. </td><td>  -  </td></tr>
         </table>
         */
        public List<CompanyBenefitType> execute() throws ApiException {
            ApiResponse<List<CompanyBenefitType>> localVarResp = listCompanyBenefitTypesWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyBenefitTypes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CompanyBenefitType&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefit types. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CompanyBenefitType>> executeWithHttpInfo() throws ApiException {
            return listCompanyBenefitTypesWithHttpInfo(companyDomain);
        }

        /**
         * Execute listCompanyBenefitTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefit types. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CompanyBenefitType>> _callback) throws ApiException {
            return listCompanyBenefitTypesAsync(companyDomain, _callback);
        }
    }

    /**
     * Get a list of company benefit types
     * Get a list of company benefit types
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListCompanyBenefitTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of company benefit types. </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyBenefitTypesRequestBuilder listCompanyBenefitTypes(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListCompanyBenefitTypesRequestBuilder(companyDomain);
    }
    private okhttp3.Call listCompanyBenefitsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/company_benefit"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyBenefitsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listCompanyBenefits(Async)");
        }

        return listCompanyBenefitsCall(companyDomain, _callback);

    }


    private ApiResponse<List<CompanyBenefitResponse>> listCompanyBenefitsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = listCompanyBenefitsValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<CompanyBenefitResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyBenefitsAsync(String companyDomain, final ApiCallback<List<CompanyBenefitResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyBenefitsValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<CompanyBenefitResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyBenefitsRequestBuilder {
        private final String companyDomain;

        private ListCompanyBenefitsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for listCompanyBenefits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefits. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyBenefitsCall(companyDomain, _callback);
        }


        /**
         * Execute listCompanyBenefits request
         * @return List&lt;CompanyBenefitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefits. </td><td>  -  </td></tr>
         </table>
         */
        public List<CompanyBenefitResponse> execute() throws ApiException {
            ApiResponse<List<CompanyBenefitResponse>> localVarResp = listCompanyBenefitsWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyBenefits request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CompanyBenefitResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefits. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CompanyBenefitResponse>> executeWithHttpInfo() throws ApiException {
            return listCompanyBenefitsWithHttpInfo(companyDomain);
        }

        /**
         * Execute listCompanyBenefits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of company benefits. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CompanyBenefitResponse>> _callback) throws ApiException {
            return listCompanyBenefitsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get a list of company benefits
     * Get a list of company benefits
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListCompanyBenefitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of company benefits. </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyBenefitsRequestBuilder listCompanyBenefits(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListCompanyBenefitsRequestBuilder(companyDomain);
    }
    private okhttp3.Call listEmployeeBenefitsCall(String companyDomain, EmployeeBenefitFilters employeeBenefitFilters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeBenefitFilters;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/employee_benefit"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeBenefitsValidateBeforeCall(String companyDomain, EmployeeBenefitFilters employeeBenefitFilters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeeBenefits(Async)");
        }

        return listEmployeeBenefitsCall(companyDomain, employeeBenefitFilters, _callback);

    }


    private ApiResponse<List<EmployeeBenefit>> listEmployeeBenefitsWithHttpInfo(String companyDomain, EmployeeBenefitFilters employeeBenefitFilters) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeBenefitsValidateBeforeCall(companyDomain, employeeBenefitFilters, null);
        Type localVarReturnType = new TypeToken<List<EmployeeBenefit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeBenefitsAsync(String companyDomain, EmployeeBenefitFilters employeeBenefitFilters, final ApiCallback<List<EmployeeBenefit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeBenefitsValidateBeforeCall(companyDomain, employeeBenefitFilters, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeBenefit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeBenefitsRequestBuilder {
        private final String companyDomain;
        private EmployeeBenefitFiltersFilters filters;

        private ListEmployeeBenefitsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set filters
         * @param filters  (optional)
         * @return ListEmployeeBenefitsRequestBuilder
         */
        public ListEmployeeBenefitsRequestBuilder filters(EmployeeBenefitFiltersFilters filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Build call for listEmployeeBenefits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee benefits. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeBenefitFilters employeeBenefitFilters = buildBodyParams();
            return listEmployeeBenefitsCall(companyDomain, employeeBenefitFilters, _callback);
        }

        private EmployeeBenefitFilters buildBodyParams() {
            EmployeeBenefitFilters employeeBenefitFilters = new EmployeeBenefitFilters();
            employeeBenefitFilters.filters(this.filters);
            return employeeBenefitFilters;
        }

        /**
         * Execute listEmployeeBenefits request
         * @return List&lt;EmployeeBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee benefits. </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeBenefit> execute() throws ApiException {
            EmployeeBenefitFilters employeeBenefitFilters = buildBodyParams();
            ApiResponse<List<EmployeeBenefit>> localVarResp = listEmployeeBenefitsWithHttpInfo(companyDomain, employeeBenefitFilters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeBenefits request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeBenefit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee benefits. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeBenefit>> executeWithHttpInfo() throws ApiException {
            EmployeeBenefitFilters employeeBenefitFilters = buildBodyParams();
            return listEmployeeBenefitsWithHttpInfo(companyDomain, employeeBenefitFilters);
        }

        /**
         * Execute listEmployeeBenefits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee benefits. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeBenefit>> _callback) throws ApiException {
            EmployeeBenefitFilters employeeBenefitFilters = buildBodyParams();
            return listEmployeeBenefitsAsync(companyDomain, employeeBenefitFilters, _callback);
        }
    }

    /**
     * Get a list of employee benefits
     * Get a list of employee benefits
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListEmployeeBenefitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of employee benefits. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeBenefitsRequestBuilder listEmployeeBenefits(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListEmployeeBenefitsRequestBuilder(companyDomain);
    }
    private okhttp3.Call listEmployeeDependentsCall(String companyDomain, String employeeid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employeedependents"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeid", employeeid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeDependentsValidateBeforeCall(String companyDomain, String employeeid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeeDependents(Async)");
        }

        // verify the required parameter 'employeeid' is set
        if (employeeid == null) {
            throw new ApiException("Missing the required parameter 'employeeid' when calling listEmployeeDependents(Async)");
        }

        return listEmployeeDependentsCall(companyDomain, employeeid, _callback);

    }


    private ApiResponse<Void> listEmployeeDependentsWithHttpInfo(String companyDomain, String employeeid) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeDependentsValidateBeforeCall(companyDomain, employeeid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listEmployeeDependentsAsync(String companyDomain, String employeeid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeDependentsValidateBeforeCall(companyDomain, employeeid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListEmployeeDependentsRequestBuilder {
        private final String companyDomain;
        private final String employeeid;

        private ListEmployeeDependentsRequestBuilder(String companyDomain, String employeeid) {
            this.companyDomain = companyDomain;
            this.employeeid = employeeid;
        }

        /**
         * Build call for listEmployeeDependents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeDependentsCall(companyDomain, employeeid, _callback);
        }


        /**
         * Execute listEmployeeDependents request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listEmployeeDependentsWithHttpInfo(companyDomain, employeeid);
        }

        /**
         * Execute listEmployeeDependents request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listEmployeeDependentsWithHttpInfo(companyDomain, employeeid);
        }

        /**
         * Execute listEmployeeDependents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listEmployeeDependentsAsync(companyDomain, employeeid, _callback);
        }
    }

    /**
     * Get all employee dependents
     * Get all employee dependents
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee. (required)
     * @return ListEmployeeDependentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeDependentsRequestBuilder listEmployeeDependents(String companyDomain, String employeeid) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeid == null) throw new IllegalArgumentException("\"employeeid\" is required but got null");
            

        return new ListEmployeeDependentsRequestBuilder(companyDomain, employeeid);
    }
    private okhttp3.Call updateCompanyBenefitCall(String companyDomain, String id, BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = benefitsUpdateCompanyBenefitRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/benefit/company_benefit/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyBenefitValidateBeforeCall(String companyDomain, String id, BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateCompanyBenefit(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCompanyBenefit(Async)");
        }

        // verify the required parameter 'benefitsUpdateCompanyBenefitRequest' is set
        if (benefitsUpdateCompanyBenefitRequest == null) {
            throw new ApiException("Missing the required parameter 'benefitsUpdateCompanyBenefitRequest' when calling updateCompanyBenefit(Async)");
        }

        return updateCompanyBenefitCall(companyDomain, id, benefitsUpdateCompanyBenefitRequest, _callback);

    }


    private ApiResponse<CompanyBenefitResponse> updateCompanyBenefitWithHttpInfo(String companyDomain, String id, BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyBenefitValidateBeforeCall(companyDomain, id, benefitsUpdateCompanyBenefitRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBenefitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompanyBenefitAsync(String companyDomain, String id, BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest, final ApiCallback<CompanyBenefitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyBenefitValidateBeforeCall(companyDomain, id, benefitsUpdateCompanyBenefitRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompanyBenefitRequestBuilder {
        private final String companyDomain;
        private final String id;
        private String description;
        private String companyBenefitName;
        private String benefitVendorId;
        private String benefitType;
        private String deductionTypeId;
        private LocalDate startDate;
        private LocalDate endDate;
        private String planUrl;
        private String ssoLoginUrl;
        private String ssoLoginUrlLinkText;
        private Boolean safeHarbor;
        private Boolean meetAcaMin;
        private Double reimbursementAmount;
        private String reimbursementFrequency;
        private String reimbursementCurrencyCode;
        private Boolean minEssentialCoverage;

        private UpdateCompanyBenefitRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Set description
         * @param description Description (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set companyBenefitName
         * @param companyBenefitName Name (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder companyBenefitName(String companyBenefitName) {
            this.companyBenefitName = companyBenefitName;
            return this;
        }
        
        /**
         * Set benefitVendorId
         * @param benefitVendorId Benefit vendor ID (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder benefitVendorId(String benefitVendorId) {
            this.benefitVendorId = benefitVendorId;
            return this;
        }
        
        /**
         * Set benefitType
         * @param benefitType Benefit type (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder benefitType(String benefitType) {
            this.benefitType = benefitType;
            return this;
        }
        
        /**
         * Set deductionTypeId
         * @param deductionTypeId Deduction type ID (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder deductionTypeId(String deductionTypeId) {
            this.deductionTypeId = deductionTypeId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Benefit start date (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Benefit end date (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set planUrl
         * @param planUrl Plan url (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder planUrl(String planUrl) {
            this.planUrl = planUrl;
            return this;
        }
        
        /**
         * Set ssoLoginUrl
         * @param ssoLoginUrl SSO login url (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder ssoLoginUrl(String ssoLoginUrl) {
            this.ssoLoginUrl = ssoLoginUrl;
            return this;
        }
        
        /**
         * Set ssoLoginUrlLinkText
         * @param ssoLoginUrlLinkText SSO login link text (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder ssoLoginUrlLinkText(String ssoLoginUrlLinkText) {
            this.ssoLoginUrlLinkText = ssoLoginUrlLinkText;
            return this;
        }
        
        /**
         * Set safeHarbor
         * @param safeHarbor Is a safe harbor (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder safeHarbor(Boolean safeHarbor) {
            this.safeHarbor = safeHarbor;
            return this;
        }
        
        /**
         * Set meetAcaMin
         * @param meetAcaMin Meets ACA minimum requirements (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder meetAcaMin(Boolean meetAcaMin) {
            this.meetAcaMin = meetAcaMin;
            return this;
        }
        
        /**
         * Set reimbursementAmount
         * @param reimbursementAmount Reimbursement amount (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder reimbursementAmount(Double reimbursementAmount) {
            this.reimbursementAmount = reimbursementAmount;
            return this;
        }
        
        /**
         * Set reimbursementFrequency
         * @param reimbursementFrequency Reimbursement frequency (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder reimbursementFrequency(String reimbursementFrequency) {
            this.reimbursementFrequency = reimbursementFrequency;
            return this;
        }
        
        /**
         * Set reimbursementCurrencyCode
         * @param reimbursementCurrencyCode Reimbursement currency code (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder reimbursementCurrencyCode(String reimbursementCurrencyCode) {
            this.reimbursementCurrencyCode = reimbursementCurrencyCode;
            return this;
        }
        
        /**
         * Set minEssentialCoverage
         * @param minEssentialCoverage Provides minimum essential coverage (optional)
         * @return UpdateCompanyBenefitRequestBuilder
         */
        public UpdateCompanyBenefitRequestBuilder minEssentialCoverage(Boolean minEssentialCoverage) {
            this.minEssentialCoverage = minEssentialCoverage;
            return this;
        }
        
        /**
         * Build call for updateCompanyBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest = buildBodyParams();
            return updateCompanyBenefitCall(companyDomain, id, benefitsUpdateCompanyBenefitRequest, _callback);
        }

        private BenefitsUpdateCompanyBenefitRequest buildBodyParams() {
            BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest = new BenefitsUpdateCompanyBenefitRequest();
            return benefitsUpdateCompanyBenefitRequest;
        }

        /**
         * Execute updateCompanyBenefit request
         * @return CompanyBenefitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefitResponse execute() throws ApiException {
            BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest = buildBodyParams();
            ApiResponse<CompanyBenefitResponse> localVarResp = updateCompanyBenefitWithHttpInfo(companyDomain, id, benefitsUpdateCompanyBenefitRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompanyBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefitResponse> executeWithHttpInfo() throws ApiException {
            BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest = buildBodyParams();
            return updateCompanyBenefitWithHttpInfo(companyDomain, id, benefitsUpdateCompanyBenefitRequest);
        }

        /**
         * Execute updateCompanyBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated company benefit. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefitResponse> _callback) throws ApiException {
            BenefitsUpdateCompanyBenefitRequest benefitsUpdateCompanyBenefitRequest = buildBodyParams();
            return updateCompanyBenefitAsync(companyDomain, id, benefitsUpdateCompanyBenefitRequest, _callback);
        }
    }

    /**
     * Update a company benefit
     * Update a company benefit
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the company benefit ID. (required)
     * @param benefitsUpdateCompanyBenefitRequest  (required)
     * @return UpdateCompanyBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated company benefit. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompanyBenefitRequestBuilder updateCompanyBenefit(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateCompanyBenefitRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call updateDependentInformationCall(String companyDomain, String id, EmployeeDependent employeeDependent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDependent;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employeedependents/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDependentInformationValidateBeforeCall(String companyDomain, String id, EmployeeDependent employeeDependent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateDependentInformation(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDependentInformation(Async)");
        }

        // verify the required parameter 'employeeDependent' is set
        if (employeeDependent == null) {
            throw new ApiException("Missing the required parameter 'employeeDependent' when calling updateDependentInformation(Async)");
        }

        return updateDependentInformationCall(companyDomain, id, employeeDependent, _callback);

    }


    private ApiResponse<Void> updateDependentInformationWithHttpInfo(String companyDomain, String id, EmployeeDependent employeeDependent) throws ApiException {
        okhttp3.Call localVarCall = updateDependentInformationValidateBeforeCall(companyDomain, id, employeeDependent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDependentInformationAsync(String companyDomain, String id, EmployeeDependent employeeDependent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDependentInformationValidateBeforeCall(companyDomain, id, employeeDependent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDependentInformationRequestBuilder {
        private final String companyDomain;
        private final String id;
        private String employeeId;
        private String firstName;
        private String middleName;
        private String lastName;
        private String relationship;
        private String gender;
        private String ssn;
        private String dateOfBirth;
        private String addressLine1;
        private String addressLine2;
        private String city;
        private String state;
        private String zipCode;
        private String homePhone;
        private String country;
        private String isUsCitizen;
        private String isStudent;

        private UpdateDependentInformationRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder relationship(String relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set addressLine1
         * @param addressLine1  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder addressLine1(String addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }
        
        /**
         * Set addressLine2
         * @param addressLine2  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder addressLine2(String addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set homePhone
         * @param homePhone  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder homePhone(String homePhone) {
            this.homePhone = homePhone;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set isUsCitizen
         * @param isUsCitizen  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder isUsCitizen(String isUsCitizen) {
            this.isUsCitizen = isUsCitizen;
            return this;
        }
        
        /**
         * Set isStudent
         * @param isStudent  (optional)
         * @return UpdateDependentInformationRequestBuilder
         */
        public UpdateDependentInformationRequestBuilder isStudent(String isStudent) {
            this.isStudent = isStudent;
            return this;
        }
        
        /**
         * Build call for updateDependentInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dependent updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to change the dependent in this way. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            return updateDependentInformationCall(companyDomain, id, employeeDependent, _callback);
        }

        private EmployeeDependent buildBodyParams() {
            EmployeeDependent employeeDependent = new EmployeeDependent();
            employeeDependent.employeeId(this.employeeId);
            employeeDependent.firstName(this.firstName);
            employeeDependent.middleName(this.middleName);
            employeeDependent.lastName(this.lastName);
            employeeDependent.relationship(this.relationship);
            employeeDependent.gender(this.gender);
            employeeDependent.ssn(this.ssn);
            employeeDependent.dateOfBirth(this.dateOfBirth);
            employeeDependent.addressLine1(this.addressLine1);
            employeeDependent.addressLine2(this.addressLine2);
            employeeDependent.city(this.city);
            employeeDependent.state(this.state);
            employeeDependent.zipCode(this.zipCode);
            employeeDependent.homePhone(this.homePhone);
            employeeDependent.country(this.country);
            employeeDependent.isUsCitizen(this.isUsCitizen);
            employeeDependent.isStudent(this.isStudent);
            return employeeDependent;
        }

        /**
         * Execute updateDependentInformation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dependent updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to change the dependent in this way. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            updateDependentInformationWithHttpInfo(companyDomain, id, employeeDependent);
        }

        /**
         * Execute updateDependentInformation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dependent updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to change the dependent in this way. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            return updateDependentInformationWithHttpInfo(companyDomain, id, employeeDependent);
        }

        /**
         * Execute updateDependentInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dependent updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> if the current user doesn&#39;t have access to change the dependent in this way. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeDependent employeeDependent = buildBodyParams();
            return updateDependentInformationAsync(companyDomain, id, employeeDependent, _callback);
        }
    }

    /**
     * Update an employee dependent
     * This API allows you to change the information for a given dependent ID.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the employee dependent ID. (required)
     * @param employeeDependent  (required)
     * @return UpdateDependentInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dependent updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if the posted JSON is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if the current user doesn&#39;t have access to change the dependent in this way. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDependentInformationRequestBuilder updateDependentInformation(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateDependentInformationRequestBuilder(companyDomain, id);
    }
}
