/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdjustTimeOffBalance;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Request;
import com.konfigthis.client.model.TimeOffHistory;
import com.konfigthis.client.model.TimeOffPoliciesInner;
import com.konfigthis.client.model.TimeOffRequest;
import com.konfigthis.client.model.TimeOffRequestDatesInner;
import com.konfigthis.client.model.TimeOffRequestNotesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTimeOffHistoryItemCall(String companyDomain, Integer employeeId, TimeOffHistory timeOffHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffHistory;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/time_off/history"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTimeOffHistoryItemValidateBeforeCall(String companyDomain, Integer employeeId, TimeOffHistory timeOffHistory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addTimeOffHistoryItem(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addTimeOffHistoryItem(Async)");
        }

        // verify the required parameter 'timeOffHistory' is set
        if (timeOffHistory == null) {
            throw new ApiException("Missing the required parameter 'timeOffHistory' when calling addTimeOffHistoryItem(Async)");
        }

        return addTimeOffHistoryItemCall(companyDomain, employeeId, timeOffHistory, _callback);

    }


    private ApiResponse<Void> addTimeOffHistoryItemWithHttpInfo(String companyDomain, Integer employeeId, TimeOffHistory timeOffHistory) throws ApiException {
        okhttp3.Call localVarCall = addTimeOffHistoryItemValidateBeforeCall(companyDomain, employeeId, timeOffHistory, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTimeOffHistoryItemAsync(String companyDomain, Integer employeeId, TimeOffHistory timeOffHistory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTimeOffHistoryItemValidateBeforeCall(companyDomain, employeeId, timeOffHistory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTimeOffHistoryItemRequestBuilder {
        private final String date;
        private final Integer timeOffRequestId;
        private final String companyDomain;
        private final Integer employeeId;
        private String note;

        private AddTimeOffHistoryItemRequestBuilder(String date, Integer timeOffRequestId, String companyDomain, Integer employeeId) {
            this.date = date;
            this.timeOffRequestId = timeOffRequestId;
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set note
         * @param note This is an optional note to show in history. (optional)
         * @return AddTimeOffHistoryItemRequestBuilder
         */
        public AddTimeOffHistoryItemRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for addTimeOffHistoryItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The history item has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the time off request already has a history item. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffHistory timeOffHistory = buildBodyParams();
            return addTimeOffHistoryItemCall(companyDomain, employeeId, timeOffHistory, _callback);
        }

        private TimeOffHistory buildBodyParams() {
            TimeOffHistory timeOffHistory = new TimeOffHistory();
            timeOffHistory.date(this.date);
            timeOffHistory.timeOffRequestId(this.timeOffRequestId);
            timeOffHistory.note(this.note);
            return timeOffHistory;
        }

        /**
         * Execute addTimeOffHistoryItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The history item has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the time off request already has a history item. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeOffHistory timeOffHistory = buildBodyParams();
            addTimeOffHistoryItemWithHttpInfo(companyDomain, employeeId, timeOffHistory);
        }

        /**
         * Execute addTimeOffHistoryItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The history item has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the time off request already has a history item. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeOffHistory timeOffHistory = buildBodyParams();
            return addTimeOffHistoryItemWithHttpInfo(companyDomain, employeeId, timeOffHistory);
        }

        /**
         * Execute addTimeOffHistoryItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The history item has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the time off request already has a history item. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeOffHistory timeOffHistory = buildBodyParams();
            return addTimeOffHistoryItemAsync(companyDomain, employeeId, timeOffHistory, _callback);
        }
    }

    /**
     * Add a Time Off History Item For Time Off Request
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \&quot;Location\&quot; header of the response will contain a URL that identifies the new history item.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId The ID of the employee. (required)
     * @param timeOffHistory  (required)
     * @return AddTimeOffHistoryItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The history item has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If the time off request already has a history item. </td><td>  -  </td></tr>
     </table>
     */
    public AddTimeOffHistoryItemRequestBuilder addTimeOffHistoryItem(String date, Integer timeOffRequestId, String companyDomain, Integer employeeId) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        if (timeOffRequestId == null) throw new IllegalArgumentException("\"timeOffRequestId\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new AddTimeOffHistoryItemRequestBuilder(date, timeOffRequestId, companyDomain, employeeId);
    }
    private okhttp3.Call assignEmployeePoliciesCall(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesInner;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/time_off/policies"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignEmployeePoliciesValidateBeforeCall(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling assignEmployeePolicies(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling assignEmployeePolicies(Async)");
        }

        // verify the required parameter 'timeOffPoliciesInner' is set
        if (timeOffPoliciesInner == null) {
            throw new ApiException("Missing the required parameter 'timeOffPoliciesInner' when calling assignEmployeePolicies(Async)");
        }

        return assignEmployeePoliciesCall(companyDomain, employeeId, timeOffPoliciesInner, _callback);

    }


    private ApiResponse<Void> assignEmployeePoliciesWithHttpInfo(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner) throws ApiException {
        okhttp3.Call localVarCall = assignEmployeePoliciesValidateBeforeCall(companyDomain, employeeId, timeOffPoliciesInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call assignEmployeePoliciesAsync(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignEmployeePoliciesValidateBeforeCall(companyDomain, employeeId, timeOffPoliciesInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssignEmployeePoliciesRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private List<TimeOffPoliciesInner> timeOffPoliciesInner;

        private AssignEmployeePoliciesRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set timeOffPoliciesInner
         * @param timeOffPoliciesInner  (optional)
         * @return AssignEmployeePoliciesRequestBuilder
         */
        public AssignEmployeePoliciesRequestBuilder timeOffPoliciesInner(List<TimeOffPoliciesInner> timeOffPoliciesInner) {
            this.timeOffPoliciesInner = timeOffPoliciesInner;
            return this;
        }

        /**
         * Build call for assignEmployeePolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            return assignEmployeePoliciesCall(companyDomain, employeeId, timeOffPoliciesInner, _callback);
        }

        private List<TimeOffPoliciesInner> buildBodyParams() {
            return this.timeOffPoliciesInner;
        }

        /**
         * Execute assignEmployeePolicies request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            assignEmployeePoliciesWithHttpInfo(companyDomain, employeeId, timeOffPoliciesInner);
        }

        /**
         * Execute assignEmployeePolicies request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            return assignEmployeePoliciesWithHttpInfo(companyDomain, employeeId, timeOffPoliciesInner);
        }

        /**
         * Execute assignEmployeePolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            return assignEmployeePoliciesAsync(companyDomain, employeeId, timeOffPoliciesInner, _callback);
        }
    }

    /**
     * Assign Time Off Policies for an Employee
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId  (required)
     * @param timeOffPoliciesInner  (required)
     * @return AssignEmployeePoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AssignEmployeePoliciesRequestBuilder assignEmployeePolicies(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AssignEmployeePoliciesRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call assignEmployeePoliciesV11Call(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesInner;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignEmployeePoliciesV11ValidateBeforeCall(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling assignEmployeePoliciesV11(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling assignEmployeePoliciesV11(Async)");
        }

        // verify the required parameter 'timeOffPoliciesInner' is set
        if (timeOffPoliciesInner == null) {
            throw new ApiException("Missing the required parameter 'timeOffPoliciesInner' when calling assignEmployeePoliciesV11(Async)");
        }

        return assignEmployeePoliciesV11Call(companyDomain, employeeId, timeOffPoliciesInner, _callback);

    }


    private ApiResponse<Void> assignEmployeePoliciesV11WithHttpInfo(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner) throws ApiException {
        okhttp3.Call localVarCall = assignEmployeePoliciesV11ValidateBeforeCall(companyDomain, employeeId, timeOffPoliciesInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call assignEmployeePoliciesV11Async(String companyDomain, String employeeId, List<TimeOffPoliciesInner> timeOffPoliciesInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignEmployeePoliciesV11ValidateBeforeCall(companyDomain, employeeId, timeOffPoliciesInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssignEmployeePoliciesV11RequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private List<TimeOffPoliciesInner> timeOffPoliciesInner;

        private AssignEmployeePoliciesV11RequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set timeOffPoliciesInner
         * @param timeOffPoliciesInner  (optional)
         * @return AssignEmployeePoliciesV11RequestBuilder
         */
        public AssignEmployeePoliciesV11RequestBuilder timeOffPoliciesInner(List<TimeOffPoliciesInner> timeOffPoliciesInner) {
            this.timeOffPoliciesInner = timeOffPoliciesInner;
            return this;
        }

        /**
         * Build call for assignEmployeePoliciesV11
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            return assignEmployeePoliciesV11Call(companyDomain, employeeId, timeOffPoliciesInner, _callback);
        }

        private List<TimeOffPoliciesInner> buildBodyParams() {
            return this.timeOffPoliciesInner;
        }

        /**
         * Execute assignEmployeePoliciesV11 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            assignEmployeePoliciesV11WithHttpInfo(companyDomain, employeeId, timeOffPoliciesInner);
        }

        /**
         * Execute assignEmployeePoliciesV11 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            return assignEmployeePoliciesV11WithHttpInfo(companyDomain, employeeId, timeOffPoliciesInner);
        }

        /**
         * Execute assignEmployeePoliciesV11 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<TimeOffPoliciesInner> timeOffPoliciesInner = buildBodyParams();
            return assignEmployeePoliciesV11Async(companyDomain, employeeId, timeOffPoliciesInner, _callback);
        }
    }

    /**
     * Assign Time Off Policies for an Employee, Version 1.1
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId  (required)
     * @param timeOffPoliciesInner  (required)
     * @return AssignEmployeePoliciesV11RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AssignEmployeePoliciesV11RequestBuilder assignEmployeePoliciesV11(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AssignEmployeePoliciesV11RequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call balanceAdjustmentPutCall(String companyDomain, Integer employeeId, AdjustTimeOffBalance adjustTimeOffBalance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustTimeOffBalance;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/time_off/balance_adjustment"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balanceAdjustmentPutValidateBeforeCall(String companyDomain, Integer employeeId, AdjustTimeOffBalance adjustTimeOffBalance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling balanceAdjustmentPut(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling balanceAdjustmentPut(Async)");
        }

        // verify the required parameter 'adjustTimeOffBalance' is set
        if (adjustTimeOffBalance == null) {
            throw new ApiException("Missing the required parameter 'adjustTimeOffBalance' when calling balanceAdjustmentPut(Async)");
        }

        return balanceAdjustmentPutCall(companyDomain, employeeId, adjustTimeOffBalance, _callback);

    }


    private ApiResponse<Void> balanceAdjustmentPutWithHttpInfo(String companyDomain, Integer employeeId, AdjustTimeOffBalance adjustTimeOffBalance) throws ApiException {
        okhttp3.Call localVarCall = balanceAdjustmentPutValidateBeforeCall(companyDomain, employeeId, adjustTimeOffBalance, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call balanceAdjustmentPutAsync(String companyDomain, Integer employeeId, AdjustTimeOffBalance adjustTimeOffBalance, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = balanceAdjustmentPutValidateBeforeCall(companyDomain, employeeId, adjustTimeOffBalance, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BalanceAdjustmentPutRequestBuilder {
        private final String date;
        private final Integer timeOffTypeId;
        private final Float amount;
        private final String companyDomain;
        private final Integer employeeId;
        private String note;

        private BalanceAdjustmentPutRequestBuilder(String date, Integer timeOffTypeId, Float amount, String companyDomain, Integer employeeId) {
            this.date = date;
            this.timeOffTypeId = timeOffTypeId;
            this.amount = amount;
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set note
         * @param note This is an optional note to show in history. (optional)
         * @return BalanceAdjustmentPutRequestBuilder
         */
        public BalanceAdjustmentPutRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for balanceAdjustmentPut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The balance adjustment has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off type. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdjustTimeOffBalance adjustTimeOffBalance = buildBodyParams();
            return balanceAdjustmentPutCall(companyDomain, employeeId, adjustTimeOffBalance, _callback);
        }

        private AdjustTimeOffBalance buildBodyParams() {
            AdjustTimeOffBalance adjustTimeOffBalance = new AdjustTimeOffBalance();
            adjustTimeOffBalance.date(this.date);
            adjustTimeOffBalance.timeOffTypeId(this.timeOffTypeId);
            adjustTimeOffBalance.amount(this.amount);
            adjustTimeOffBalance.note(this.note);
            return adjustTimeOffBalance;
        }

        /**
         * Execute balanceAdjustmentPut request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The balance adjustment has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off type. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AdjustTimeOffBalance adjustTimeOffBalance = buildBodyParams();
            balanceAdjustmentPutWithHttpInfo(companyDomain, employeeId, adjustTimeOffBalance);
        }

        /**
         * Execute balanceAdjustmentPut request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The balance adjustment has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off type. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AdjustTimeOffBalance adjustTimeOffBalance = buildBodyParams();
            return balanceAdjustmentPutWithHttpInfo(companyDomain, employeeId, adjustTimeOffBalance);
        }

        /**
         * Execute balanceAdjustmentPut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The balance adjustment has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off type. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AdjustTimeOffBalance adjustTimeOffBalance = buildBodyParams();
            return balanceAdjustmentPutAsync(companyDomain, employeeId, adjustTimeOffBalance, _callback);
        }
    }

    /**
     * Adjust Time Off Balance
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \&quot;Location\&quot; header of the response will contain a URL that identifies the new history item.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId The ID of the employee. (required)
     * @param adjustTimeOffBalance  (required)
     * @return BalanceAdjustmentPutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The balance adjustment has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> For empty or malformed JSON, an invalid date format, or an invalid time off type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid permissions to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public BalanceAdjustmentPutRequestBuilder balanceAdjustmentPut(String date, Integer timeOffTypeId, Float amount, String companyDomain, Integer employeeId) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        if (timeOffTypeId == null) throw new IllegalArgumentException("\"timeOffTypeId\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new BalanceAdjustmentPutRequestBuilder(date, timeOffTypeId, amount, companyDomain, employeeId);
    }
    private okhttp3.Call changeRequestStatusCall(String companyDomain, String requestId, Request request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_off/requests/{requestId}/status"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeRequestStatusValidateBeforeCall(String companyDomain, String requestId, Request request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling changeRequestStatus(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling changeRequestStatus(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changeRequestStatus(Async)");
        }

        return changeRequestStatusCall(companyDomain, requestId, request, _callback);

    }


    private ApiResponse<Void> changeRequestStatusWithHttpInfo(String companyDomain, String requestId, Request request) throws ApiException {
        okhttp3.Call localVarCall = changeRequestStatusValidateBeforeCall(companyDomain, requestId, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changeRequestStatusAsync(String companyDomain, String requestId, Request request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeRequestStatusValidateBeforeCall(companyDomain, requestId, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangeRequestStatusRequestBuilder {
        private final String companyDomain;
        private final String requestId;
        private String status;
        private String note;

        private ChangeRequestStatusRequestBuilder(String companyDomain, String requestId) {
            this.companyDomain = companyDomain;
            this.requestId = requestId;
        }

        /**
         * Set status
         * @param status One of approved, cancelled, denied (optional)
         * @return ChangeRequestStatusRequestBuilder
         */
        public ChangeRequestStatusRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set note
         * @param note A note to attach to the change in status (optional)
         * @return ChangeRequestStatusRequestBuilder
         */
        public ChangeRequestStatusRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for changeRequestStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML is invalid or the status is not \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;canceled\&quot;, or \&quot;declined\&quot;. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the current user doesn&#39;t have access to change the status in this way. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the time off request ID doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Request request = buildBodyParams();
            return changeRequestStatusCall(companyDomain, requestId, request, _callback);
        }

        private Request buildBodyParams() {
            Request request = new Request();
            request.status(this.status);
            request.note(this.note);
            return request;
        }

        /**
         * Execute changeRequestStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML is invalid or the status is not \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;canceled\&quot;, or \&quot;declined\&quot;. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the current user doesn&#39;t have access to change the status in this way. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the time off request ID doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Request request = buildBodyParams();
            changeRequestStatusWithHttpInfo(companyDomain, requestId, request);
        }

        /**
         * Execute changeRequestStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML is invalid or the status is not \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;canceled\&quot;, or \&quot;declined\&quot;. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the current user doesn&#39;t have access to change the status in this way. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the time off request ID doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Request request = buildBodyParams();
            return changeRequestStatusWithHttpInfo(companyDomain, requestId, request);
        }

        /**
         * Execute changeRequestStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML is invalid or the status is not \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;canceled\&quot;, or \&quot;declined\&quot;. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the current user doesn&#39;t have access to change the status in this way. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the time off request ID doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Request request = buildBodyParams();
            return changeRequestStatusAsync(companyDomain, requestId, request, _callback);
        }
    }

    /**
     * Change a Request Status
     * This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param requestId  (required)
     * @param request  (required)
     * @return ChangeRequestStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the posted XML is invalid or the status is not \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;canceled\&quot;, or \&quot;declined\&quot;. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the current user doesn&#39;t have access to change the status in this way. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the time off request ID doesn&#39;t exist. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeRequestStatusRequestBuilder changeRequestStatus(String companyDomain, String requestId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new ChangeRequestStatusRequestBuilder(companyDomain, requestId);
    }
    private okhttp3.Call estimateFutureTimeOffBalancesCall(String companyDomain, OffsetDateTime end, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/time_off/calculator"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call estimateFutureTimeOffBalancesValidateBeforeCall(String companyDomain, OffsetDateTime end, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling estimateFutureTimeOffBalances(Async)");
        }

        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling estimateFutureTimeOffBalances(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling estimateFutureTimeOffBalances(Async)");
        }

        return estimateFutureTimeOffBalancesCall(companyDomain, end, employeeId, _callback);

    }


    private ApiResponse<Void> estimateFutureTimeOffBalancesWithHttpInfo(String companyDomain, OffsetDateTime end, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = estimateFutureTimeOffBalancesValidateBeforeCall(companyDomain, end, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call estimateFutureTimeOffBalancesAsync(String companyDomain, OffsetDateTime end, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = estimateFutureTimeOffBalancesValidateBeforeCall(companyDomain, end, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EstimateFutureTimeOffBalancesRequestBuilder {
        private final String companyDomain;
        private final OffsetDateTime end;
        private final String employeeId;

        private EstimateFutureTimeOffBalancesRequestBuilder(String companyDomain, OffsetDateTime end, String employeeId) {
            this.companyDomain = companyDomain;
            this.end = end;
            this.employeeId = employeeId;
        }

        /**
         * Build call for estimateFutureTimeOffBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return estimateFutureTimeOffBalancesCall(companyDomain, end, employeeId, _callback);
        }


        /**
         * Execute estimateFutureTimeOffBalances request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            estimateFutureTimeOffBalancesWithHttpInfo(companyDomain, end, employeeId);
        }

        /**
         * Execute estimateFutureTimeOffBalances request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return estimateFutureTimeOffBalancesWithHttpInfo(companyDomain, end, employeeId);
        }

        /**
         * Execute estimateFutureTimeOffBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return estimateFutureTimeOffBalancesAsync(companyDomain, end, employeeId, _callback);
        }
    }

    /**
     * Estimate Future Time Off Balances
     * This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param end  (required)
     * @param employeeId  (required)
     * @return EstimateFutureTimeOffBalancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EstimateFutureTimeOffBalancesRequestBuilder estimateFutureTimeOffBalances(String companyDomain, OffsetDateTime end, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new EstimateFutureTimeOffBalancesRequestBuilder(companyDomain, end, employeeId);
    }
    private okhttp3.Call getPoliciesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/time_off/policies"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliciesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getPolicies(Async)");
        }

        return getPoliciesCall(companyDomain, _callback);

    }


    private ApiResponse<Void> getPoliciesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getPoliciesValidateBeforeCall(companyDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getPoliciesAsync(String companyDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliciesValidateBeforeCall(companyDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetPoliciesRequestBuilder {
        private final String companyDomain;

        private GetPoliciesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPoliciesCall(companyDomain, _callback);
        }


        /**
         * Execute getPolicies request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getPoliciesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getPolicies request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getPoliciesWithHttpInfo(companyDomain);
        }

        /**
         * Execute getPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getPoliciesAsync(companyDomain, _callback);
        }
    }

    /**
     * Get Time Off Policies
     * This endpoint gets a list of time off policies.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetPoliciesRequestBuilder getPolicies(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetPoliciesRequestBuilder(companyDomain);
    }
    private okhttp3.Call getTimeOffRequestsCall(String companyDomain, String start, String end, Integer id, String action, String employeeId, String type, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_off/requests"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffRequestsValidateBeforeCall(String companyDomain, String start, String end, Integer id, String action, String employeeId, String type, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getTimeOffRequests(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getTimeOffRequests(Async)");
        }

        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getTimeOffRequests(Async)");
        }

        return getTimeOffRequestsCall(companyDomain, start, end, id, action, employeeId, type, status, _callback);

    }


    private ApiResponse<Void> getTimeOffRequestsWithHttpInfo(String companyDomain, String start, String end, Integer id, String action, String employeeId, String type, String status) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffRequestsValidateBeforeCall(companyDomain, start, end, id, action, employeeId, type, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getTimeOffRequestsAsync(String companyDomain, String start, String end, Integer id, String action, String employeeId, String type, String status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffRequestsValidateBeforeCall(companyDomain, start, end, id, action, employeeId, type, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetTimeOffRequestsRequestBuilder {
        private final String companyDomain;
        private final String start;
        private final String end;
        private Integer id;
        private String action;
        private String employeeId;
        private String type;
        private String status;

        private GetTimeOffRequestsRequestBuilder(String companyDomain, String start, String end) {
            this.companyDomain = companyDomain;
            this.start = start;
            this.end = end;
        }

        /**
         * Set id
         * @param id A particular request ID to limit the response to. (optional)
         * @return GetTimeOffRequestsRequestBuilder
         */
        public GetTimeOffRequestsRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set action
         * @param action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
         * @return GetTimeOffRequestsRequestBuilder
         */
        public GetTimeOffRequestsRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId A particular employee ID to limit the response to. (optional)
         * @return GetTimeOffRequestsRequestBuilder
         */
        public GetTimeOffRequestsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set type
         * @param type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
         * @return GetTimeOffRequestsRequestBuilder
         */
        public GetTimeOffRequestsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set status
         * @param status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
         * @return GetTimeOffRequestsRequestBuilder
         */
        public GetTimeOffRequestsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getTimeOffRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffRequestsCall(companyDomain, start, end, id, action, employeeId, type, status, _callback);
        }


        /**
         * Execute getTimeOffRequests request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getTimeOffRequestsWithHttpInfo(companyDomain, start, end, id, action, employeeId, type, status);
        }

        /**
         * Execute getTimeOffRequests request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getTimeOffRequestsWithHttpInfo(companyDomain, start, end, id, action, employeeId, type, status);
        }

        /**
         * Execute getTimeOffRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getTimeOffRequestsAsync(companyDomain, start, end, id, action, employeeId, type, status, _callback);
        }
    }

    /**
     * Get Time Off Requests
     * 
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @return GetTimeOffRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed request </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffRequestsRequestBuilder getTimeOffRequests(String companyDomain, String start, String end) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
            

        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
            

        return new GetTimeOffRequestsRequestBuilder(companyDomain, start, end);
    }
    private okhttp3.Call getTimeOffTypesCall(String companyDomain, String mode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/meta/time_off/types"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffTypesValidateBeforeCall(String companyDomain, String mode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getTimeOffTypes(Async)");
        }

        return getTimeOffTypesCall(companyDomain, mode, _callback);

    }


    private ApiResponse<Void> getTimeOffTypesWithHttpInfo(String companyDomain, String mode) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffTypesValidateBeforeCall(companyDomain, mode, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getTimeOffTypesAsync(String companyDomain, String mode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffTypesValidateBeforeCall(companyDomain, mode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetTimeOffTypesRequestBuilder {
        private final String companyDomain;
        private String mode;

        private GetTimeOffTypesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set mode
         * @param mode set to &#39;request&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don&#39;t have permission to view balances and requests for. (optional)
         * @return GetTimeOffTypesRequestBuilder
         */
        public GetTimeOffTypesRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Build call for getTimeOffTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off types </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffTypesCall(companyDomain, mode, _callback);
        }


        /**
         * Execute getTimeOffTypes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off types </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getTimeOffTypesWithHttpInfo(companyDomain, mode);
        }

        /**
         * Execute getTimeOffTypes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off types </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getTimeOffTypesWithHttpInfo(companyDomain, mode);
        }

        /**
         * Execute getTimeOffTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off types </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getTimeOffTypesAsync(companyDomain, mode, _callback);
        }
    }

    /**
     * Get Time Off Types
     * This endpoint gets a list of time off types.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetTimeOffTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time off types </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffTypesRequestBuilder getTimeOffTypes(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetTimeOffTypesRequestBuilder(companyDomain);
    }
    private okhttp3.Call getWhosOutListCall(String companyDomain, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/time_off/whos_out"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhosOutListValidateBeforeCall(String companyDomain, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getWhosOutList(Async)");
        }

        return getWhosOutListCall(companyDomain, start, end, _callback);

    }


    private ApiResponse<Void> getWhosOutListWithHttpInfo(String companyDomain, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = getWhosOutListValidateBeforeCall(companyDomain, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getWhosOutListAsync(String companyDomain, String start, String end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhosOutListValidateBeforeCall(companyDomain, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetWhosOutListRequestBuilder {
        private final String companyDomain;
        private String start;
        private String end;

        private GetWhosOutListRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set start
         * @param start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
         * @return GetWhosOutListRequestBuilder
         */
        public GetWhosOutListRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
         * @return GetWhosOutListRequestBuilder
         */
        public GetWhosOutListRequestBuilder end(String end) {
            this.end = end;
            return this;
        }
        
        /**
         * Build call for getWhosOutList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWhosOutListCall(companyDomain, start, end, _callback);
        }


        /**
         * Execute getWhosOutList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getWhosOutListWithHttpInfo(companyDomain, start, end);
        }

        /**
         * Execute getWhosOutList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getWhosOutListWithHttpInfo(companyDomain, start, end);
        }

        /**
         * Execute getWhosOutList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getWhosOutListAsync(companyDomain, start, end, _callback);
        }
    }

    /**
     * Get a list of Who&#39;s Out
     * This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetWhosOutListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetWhosOutListRequestBuilder getWhosOutList(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetWhosOutListRequestBuilder(companyDomain);
    }
    private okhttp3.Call listEmployeePoliciesCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeePoliciesValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeePolicies(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeePolicies(Async)");
        }

        return listEmployeePoliciesCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<Void> listEmployeePoliciesWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listEmployeePoliciesValidateBeforeCall(companyDomain, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listEmployeePoliciesAsync(String companyDomain, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeePoliciesValidateBeforeCall(companyDomain, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListEmployeePoliciesRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private ListEmployeePoliciesRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for listEmployeePolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeePoliciesCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute listEmployeePolicies request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listEmployeePoliciesWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeePolicies request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listEmployeePoliciesWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeePolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listEmployeePoliciesAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * List Time Off Policies for Employee, Version 1.1
     * 
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId  (required)
     * @return ListEmployeePoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeePoliciesRequestBuilder listEmployeePolicies(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListEmployeePoliciesRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call listEmployeeTimeOffPoliciesCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/time_off/policies"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeTimeOffPoliciesValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listEmployeeTimeOffPolicies(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeeTimeOffPolicies(Async)");
        }

        return listEmployeeTimeOffPoliciesCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<Void> listEmployeeTimeOffPoliciesWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeTimeOffPoliciesValidateBeforeCall(companyDomain, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listEmployeeTimeOffPoliciesAsync(String companyDomain, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeTimeOffPoliciesValidateBeforeCall(companyDomain, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListEmployeeTimeOffPoliciesRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private ListEmployeeTimeOffPoliciesRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for listEmployeeTimeOffPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeTimeOffPoliciesCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute listEmployeeTimeOffPolicies request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listEmployeeTimeOffPoliciesWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeeTimeOffPolicies request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listEmployeeTimeOffPoliciesWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute listEmployeeTimeOffPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listEmployeeTimeOffPoliciesAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * List Time Off Policies for Employee
     * 
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId  (required)
     * @return ListEmployeeTimeOffPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeTimeOffPoliciesRequestBuilder listEmployeeTimeOffPolicies(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListEmployeeTimeOffPoliciesRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call requestCreationCall(String companyDomain, String employeeId, TimeOffRequest timeOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/time_off/request"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestCreationValidateBeforeCall(String companyDomain, String employeeId, TimeOffRequest timeOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling requestCreation(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling requestCreation(Async)");
        }

        // verify the required parameter 'timeOffRequest' is set
        if (timeOffRequest == null) {
            throw new ApiException("Missing the required parameter 'timeOffRequest' when calling requestCreation(Async)");
        }

        return requestCreationCall(companyDomain, employeeId, timeOffRequest, _callback);

    }


    private ApiResponse<Void> requestCreationWithHttpInfo(String companyDomain, String employeeId, TimeOffRequest timeOffRequest) throws ApiException {
        okhttp3.Call localVarCall = requestCreationValidateBeforeCall(companyDomain, employeeId, timeOffRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call requestCreationAsync(String companyDomain, String employeeId, TimeOffRequest timeOffRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestCreationValidateBeforeCall(companyDomain, employeeId, timeOffRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RequestCreationRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String status;
        private String start;
        private String end;
        private Integer timeOffTypeId;
        private Integer amount;
        private List<TimeOffRequestNotesInner> notes;
        private List<TimeOffRequestDatesInner> dates;
        private Integer previousRequest;

        private RequestCreationRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set status
         * @param status  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set start
         * @param start  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder end(String end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set timeOffTypeId
         * @param timeOffTypeId  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder timeOffTypeId(Integer timeOffTypeId) {
            this.timeOffTypeId = timeOffTypeId;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder amount(Integer amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder notes(List<TimeOffRequestNotesInner> notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set dates
         * @param dates  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder dates(List<TimeOffRequestDatesInner> dates) {
            this.dates = dates;
            return this;
        }
        
        /**
         * Set previousRequest
         * @param previousRequest  (optional)
         * @return RequestCreationRequestBuilder
         */
        public RequestCreationRequestBuilder previousRequest(Integer previousRequest) {
            this.previousRequest = previousRequest;
            return this;
        }
        
        /**
         * Build call for requestCreation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Cannot change past approved requests. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Employee not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return requestCreationCall(companyDomain, employeeId, timeOffRequest, _callback);
        }

        private TimeOffRequest buildBodyParams() {
            TimeOffRequest timeOffRequest = new TimeOffRequest();
            timeOffRequest.status(this.status);
            timeOffRequest.start(this.start);
            timeOffRequest.end(this.end);
            timeOffRequest.timeOffTypeId(this.timeOffTypeId);
            timeOffRequest.amount(this.amount);
            timeOffRequest.notes(this.notes);
            timeOffRequest.dates(this.dates);
            timeOffRequest.previousRequest(this.previousRequest);
            return timeOffRequest;
        }

        /**
         * Execute requestCreation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Cannot change past approved requests. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Employee not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            requestCreationWithHttpInfo(companyDomain, employeeId, timeOffRequest);
        }

        /**
         * Execute requestCreation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Cannot change past approved requests. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Employee not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return requestCreationWithHttpInfo(companyDomain, employeeId, timeOffRequest);
        }

        /**
         * Execute requestCreation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Malformed request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Cannot change past approved requests. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Employee not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return requestCreationAsync(companyDomain, employeeId, timeOffRequest, _callback);
        }
    }

    /**
     * Add a Time Off Request
     * A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId  (required)
     * @param timeOffRequest  (required)
     * @return RequestCreationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Cannot change past approved requests. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Employee not found </td><td>  -  </td></tr>
     </table>
     */
    public RequestCreationRequestBuilder requestCreation(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new RequestCreationRequestBuilder(companyDomain, employeeId);
    }
}
