/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.HoursEditHourRecordRequest;
import com.konfigthis.client.model.TimeTrackingRecord;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HoursApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HoursApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HoursApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkRecordEditCall(String companyDomain, List<TimeTrackingRecord> timeTrackingRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingRecord;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/timetracking/record"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkRecordEditValidateBeforeCall(String companyDomain, List<TimeTrackingRecord> timeTrackingRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling bulkRecordEdit(Async)");
        }

        // verify the required parameter 'timeTrackingRecord' is set
        if (timeTrackingRecord == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingRecord' when calling bulkRecordEdit(Async)");
        }

        return bulkRecordEditCall(companyDomain, timeTrackingRecord, _callback);

    }


    private ApiResponse<Void> bulkRecordEditWithHttpInfo(String companyDomain, List<TimeTrackingRecord> timeTrackingRecord) throws ApiException {
        okhttp3.Call localVarCall = bulkRecordEditValidateBeforeCall(companyDomain, timeTrackingRecord, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkRecordEditAsync(String companyDomain, List<TimeTrackingRecord> timeTrackingRecord, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkRecordEditValidateBeforeCall(companyDomain, timeTrackingRecord, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkRecordEditRequestBuilder {
        private final String companyDomain;
        private List<TimeTrackingRecord> timeTrackingRecord;

        private BulkRecordEditRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set timeTrackingRecord
         * @param timeTrackingRecord  (optional)
         * @return BulkRecordEditRequestBuilder
         */
        public BulkRecordEditRequestBuilder timeTrackingRecord(List<TimeTrackingRecord> timeTrackingRecord) {
            this.timeTrackingRecord = timeTrackingRecord;
            return this;
        }

        /**
         * Build call for bulkRecordEdit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An array of objects with success as true or false depending on the success of each time tracking object in the request along with the successful IDs or the reason of the error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<TimeTrackingRecord> timeTrackingRecord = buildBodyParams();
            return bulkRecordEditCall(companyDomain, timeTrackingRecord, _callback);
        }

        private List<TimeTrackingRecord> buildBodyParams() {
            return this.timeTrackingRecord;
        }

        /**
         * Execute bulkRecordEdit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An array of objects with success as true or false depending on the success of each time tracking object in the request along with the successful IDs or the reason of the error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<TimeTrackingRecord> timeTrackingRecord = buildBodyParams();
            bulkRecordEditWithHttpInfo(companyDomain, timeTrackingRecord);
        }

        /**
         * Execute bulkRecordEdit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An array of objects with success as true or false depending on the success of each time tracking object in the request along with the successful IDs or the reason of the error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<TimeTrackingRecord> timeTrackingRecord = buildBodyParams();
            return bulkRecordEditWithHttpInfo(companyDomain, timeTrackingRecord);
        }

        /**
         * Execute bulkRecordEdit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An array of objects with success as true or false depending on the success of each time tracking object in the request along with the successful IDs or the reason of the error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<TimeTrackingRecord> timeTrackingRecord = buildBodyParams();
            return bulkRecordEditAsync(companyDomain, timeTrackingRecord, _callback);
        }
    }

    /**
     * Bulk add/edit hour records
     * Bulk add/edit hour records
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param timeTrackingRecord  (required)
     * @return BulkRecordEditRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of objects with success as true or false depending on the success of each time tracking object in the request along with the successful IDs or the reason of the error. </td><td>  -  </td></tr>
     </table>
     */
    public BulkRecordEditRequestBuilder bulkRecordEdit(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new BulkRecordEditRequestBuilder(companyDomain);
    }
    private okhttp3.Call deleteHourRecordCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/timetracking/delete/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHourRecordValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteHourRecord(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteHourRecord(Async)");
        }

        return deleteHourRecordCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> deleteHourRecordWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteHourRecordValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteHourRecordAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHourRecordValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteHourRecordRequestBuilder {
        private final String companyDomain;
        private final String id;

        private DeleteHourRecordRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for deleteHourRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Record removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the time tracking ID cannot be found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteHourRecordCall(companyDomain, id, _callback);
        }


        /**
         * Execute deleteHourRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Record removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the time tracking ID cannot be found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteHourRecordWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteHourRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Record removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the time tracking ID cannot be found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteHourRecordWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute deleteHourRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Record removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the time tracking ID cannot be found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteHourRecordAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Delete an hour record
     * Delete an hour record
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID). (required)
     * @return DeleteHourRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Record removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the time tracking ID cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHourRecordRequestBuilder deleteHourRecord(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteHourRecordRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call editHourRecordCall(String companyDomain, HoursEditHourRecordRequest hoursEditHourRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hoursEditHourRecordRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/timetracking/adjust"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editHourRecordValidateBeforeCall(String companyDomain, HoursEditHourRecordRequest hoursEditHourRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling editHourRecord(Async)");
        }

        // verify the required parameter 'hoursEditHourRecordRequest' is set
        if (hoursEditHourRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'hoursEditHourRecordRequest' when calling editHourRecord(Async)");
        }

        return editHourRecordCall(companyDomain, hoursEditHourRecordRequest, _callback);

    }


    private ApiResponse<Void> editHourRecordWithHttpInfo(String companyDomain, HoursEditHourRecordRequest hoursEditHourRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = editHourRecordValidateBeforeCall(companyDomain, hoursEditHourRecordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call editHourRecordAsync(String companyDomain, HoursEditHourRecordRequest hoursEditHourRecordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editHourRecordValidateBeforeCall(companyDomain, hoursEditHourRecordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EditHourRecordRequestBuilder {
        private final String timeTrackingId;
        private final Float hoursWorked;
        private final String companyDomain;

        private EditHourRecordRequestBuilder(String timeTrackingId, Float hoursWorked, String companyDomain) {
            this.timeTrackingId = timeTrackingId;
            this.hoursWorked = hoursWorked;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for editHourRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if any required field is missing, any of the IDs are invalid, or the posted JSON is not valid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HoursEditHourRecordRequest hoursEditHourRecordRequest = buildBodyParams();
            return editHourRecordCall(companyDomain, hoursEditHourRecordRequest, _callback);
        }

        private HoursEditHourRecordRequest buildBodyParams() {
            HoursEditHourRecordRequest hoursEditHourRecordRequest = new HoursEditHourRecordRequest();
            hoursEditHourRecordRequest.timeTrackingId(this.timeTrackingId);
            hoursEditHourRecordRequest.hoursWorked(this.hoursWorked);
            return hoursEditHourRecordRequest;
        }

        /**
         * Execute editHourRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if any required field is missing, any of the IDs are invalid, or the posted JSON is not valid </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            HoursEditHourRecordRequest hoursEditHourRecordRequest = buildBodyParams();
            editHourRecordWithHttpInfo(companyDomain, hoursEditHourRecordRequest);
        }

        /**
         * Execute editHourRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if any required field is missing, any of the IDs are invalid, or the posted JSON is not valid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            HoursEditHourRecordRequest hoursEditHourRecordRequest = buildBodyParams();
            return editHourRecordWithHttpInfo(companyDomain, hoursEditHourRecordRequest);
        }

        /**
         * Execute editHourRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> if any required field is missing, any of the IDs are invalid, or the posted JSON is not valid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            HoursEditHourRecordRequest hoursEditHourRecordRequest = buildBodyParams();
            return editHourRecordAsync(companyDomain, hoursEditHourRecordRequest, _callback);
        }
    }

    /**
     * Edit an hour record
     * Edit an hour record
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param hoursEditHourRecordRequest  (required)
     * @return EditHourRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any required field is missing, any of the IDs are invalid, or the posted JSON is not valid </td><td>  -  </td></tr>
     </table>
     */
    public EditHourRecordRequestBuilder editHourRecord(String timeTrackingId, Float hoursWorked, String companyDomain) throws IllegalArgumentException {
        if (timeTrackingId == null) throw new IllegalArgumentException("\"timeTrackingId\" is required but got null");
            

        if (hoursWorked == null) throw new IllegalArgumentException("\"hoursWorked\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new EditHourRecordRequestBuilder(timeTrackingId, hoursWorked, companyDomain);
    }
    private okhttp3.Call getHourRecordCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/timetracking/record/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHourRecordValidateBeforeCall(String companyDomain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getHourRecord(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHourRecord(Async)");
        }

        return getHourRecordCall(companyDomain, id, _callback);

    }


    private ApiResponse<Void> getHourRecordWithHttpInfo(String companyDomain, String id) throws ApiException {
        okhttp3.Call localVarCall = getHourRecordValidateBeforeCall(companyDomain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getHourRecordAsync(String companyDomain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHourRecordValidateBeforeCall(companyDomain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetHourRecordRequestBuilder {
        private final String companyDomain;
        private final String id;

        private GetHourRecordRequestBuilder(String companyDomain, String id) {
            this.companyDomain = companyDomain;
            this.id = id;
        }

        /**
         * Build call for getHourRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHourRecordCall(companyDomain, id, _callback);
        }


        /**
         * Execute getHourRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getHourRecordWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getHourRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getHourRecordWithHttpInfo(companyDomain, id);
        }

        /**
         * Execute getHourRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getHourRecordAsync(companyDomain, id, _callback);
        }
    }

    /**
     * Get an hour record
     * Get an hour record
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is the time tracking ID used to originally create the record. (required)
     * @return GetHourRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing argument. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetHourRecordRequestBuilder getHourRecord(String companyDomain, String id) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetHourRecordRequestBuilder(companyDomain, id);
    }
    private okhttp3.Call recordAdditionCall(String companyDomain, TimeTrackingRecord timeTrackingRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingRecord;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/timetracking/add"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordAdditionValidateBeforeCall(String companyDomain, TimeTrackingRecord timeTrackingRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling recordAddition(Async)");
        }

        // verify the required parameter 'timeTrackingRecord' is set
        if (timeTrackingRecord == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingRecord' when calling recordAddition(Async)");
        }

        return recordAdditionCall(companyDomain, timeTrackingRecord, _callback);

    }


    private ApiResponse<Void> recordAdditionWithHttpInfo(String companyDomain, TimeTrackingRecord timeTrackingRecord) throws ApiException {
        okhttp3.Call localVarCall = recordAdditionValidateBeforeCall(companyDomain, timeTrackingRecord, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recordAdditionAsync(String companyDomain, TimeTrackingRecord timeTrackingRecord, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordAdditionValidateBeforeCall(companyDomain, timeTrackingRecord, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RecordAdditionRequestBuilder {
        private final String timeTrackingId;
        private final Integer employeeId;
        private final String dateHoursWorked;
        private final String rateType;
        private final Float hoursWorked;
        private final String companyDomain;
        private Integer divisionId;
        private Integer departmentId;
        private Integer jobTitleId;
        private String payCode;
        private Float payRate;
        private Integer jobCode;
        private String jobData;

        private RecordAdditionRequestBuilder(String timeTrackingId, Integer employeeId, String dateHoursWorked, String rateType, Float hoursWorked, String companyDomain) {
            this.timeTrackingId = timeTrackingId;
            this.employeeId = employeeId;
            this.dateHoursWorked = dateHoursWorked;
            this.rateType = rateType;
            this.hoursWorked = hoursWorked;
            this.companyDomain = companyDomain;
        }

        /**
         * Set divisionId
         * @param divisionId [Optional] The ID of the division for the employee. (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder divisionId(Integer divisionId) {
            this.divisionId = divisionId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId [Optional] The ID of the department for the employee. (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set jobTitleId
         * @param jobTitleId [Optional] The ID of the job title for the employee. (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder jobTitleId(Integer jobTitleId) {
            this.jobTitleId = jobTitleId;
            return this;
        }
        
        /**
         * Set payCode
         * @param payCode [Optional] Only necessary if the payroll provider requires a pay code (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder payCode(String payCode) {
            this.payCode = payCode;
            return this;
        }
        
        /**
         * Set payRate
         * @param payRate [Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate. (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder payRate(Float payRate) {
            this.payRate = payRate;
            return this;
        }
        
        /**
         * Set jobCode
         * @param jobCode [Optional] A job code. (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder jobCode(Integer jobCode) {
            this.jobCode = jobCode;
            return this;
        }
        
        /**
         * Set jobData
         * @param jobData [Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces. (optional)
         * @return RecordAdditionRequestBuilder
         */
        public RecordAdditionRequestBuilder jobData(String jobData) {
            this.jobData = jobData;
            return this;
        }
        
        /**
         * Build call for recordAddition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If any required field is missing, any of the IDs are invalid, or the posted JSON is not valid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingRecord timeTrackingRecord = buildBodyParams();
            return recordAdditionCall(companyDomain, timeTrackingRecord, _callback);
        }

        private TimeTrackingRecord buildBodyParams() {
            TimeTrackingRecord timeTrackingRecord = new TimeTrackingRecord();
            timeTrackingRecord.timeTrackingId(this.timeTrackingId);
            timeTrackingRecord.employeeId(this.employeeId);
            timeTrackingRecord.divisionId(this.divisionId);
            timeTrackingRecord.departmentId(this.departmentId);
            timeTrackingRecord.jobTitleId(this.jobTitleId);
            timeTrackingRecord.payCode(this.payCode);
            timeTrackingRecord.dateHoursWorked(this.dateHoursWorked);
            timeTrackingRecord.payRate(this.payRate);
            timeTrackingRecord.rateType(this.rateType);
            timeTrackingRecord.hoursWorked(this.hoursWorked);
            timeTrackingRecord.jobCode(this.jobCode);
            timeTrackingRecord.jobData(this.jobData);
            return timeTrackingRecord;
        }

        /**
         * Execute recordAddition request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If any required field is missing, any of the IDs are invalid, or the posted JSON is not valid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeTrackingRecord timeTrackingRecord = buildBodyParams();
            recordAdditionWithHttpInfo(companyDomain, timeTrackingRecord);
        }

        /**
         * Execute recordAddition request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If any required field is missing, any of the IDs are invalid, or the posted JSON is not valid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeTrackingRecord timeTrackingRecord = buildBodyParams();
            return recordAdditionWithHttpInfo(companyDomain, timeTrackingRecord);
        }

        /**
         * Execute recordAddition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If any required field is missing, any of the IDs are invalid, or the posted JSON is not valid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeTrackingRecord timeTrackingRecord = buildBodyParams();
            return recordAdditionAsync(companyDomain, timeTrackingRecord, _callback);
        }
    }

    /**
     * Add an hour record
     * Add an hour record
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param timeTrackingRecord  (required)
     * @return RecordAdditionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The time tracking ID will be returned in JSON. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any required field is missing, any of the IDs are invalid, or the posted JSON is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public RecordAdditionRequestBuilder recordAddition(String timeTrackingId, Integer employeeId, String dateHoursWorked, String rateType, Float hoursWorked, String companyDomain) throws IllegalArgumentException {
        if (timeTrackingId == null) throw new IllegalArgumentException("\"timeTrackingId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (dateHoursWorked == null) throw new IllegalArgumentException("\"dateHoursWorked\" is required but got null");
            

        if (rateType == null) throw new IllegalArgumentException("\"rateType\" is required but got null");
            

        if (hoursWorked == null) throw new IllegalArgumentException("\"hoursWorked\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new RecordAdditionRequestBuilder(timeTrackingId, employeeId, dateHoursWorked, rateType, hoursWorked, companyDomain);
    }
}
