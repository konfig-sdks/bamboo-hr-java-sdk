/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Goal;
import com.konfigthis.client.model.GoalsCloseGoalResponse;
import com.konfigthis.client.model.GoalsCountPerStatusResponse;
import com.konfigthis.client.model.GoalsGetAllAggregateInfo200Response;
import com.konfigthis.client.model.GoalsGetAllAggregateInfo200Response1;
import com.konfigthis.client.model.GoalsGetAllAggregateInfoResponse;
import com.konfigthis.client.model.GoalsGetEmployeeGoalsResponse;
import com.konfigthis.client.model.GoalsGetGoalAggregateInfoResponse;
import com.konfigthis.client.model.GoalsStatusCountResponse;
import com.konfigthis.client.model.GoalsUpdateGoalSharingRequest;
import com.konfigthis.client.model.GoalsUpdateGoalSharingResponse;
import com.konfigthis.client.model.GoalsUpdateProgressResponse;
import com.konfigthis.client.model.Milestone;
import com.konfigthis.client.model.NewGoal;
import com.konfigthis.client.model.UpdateGoalV11;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GoalsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GoalsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call closeGoalCall(String companyDomain, String employeeId, String goalId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/close"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeGoalValidateBeforeCall(String companyDomain, String employeeId, String goalId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling closeGoal(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling closeGoal(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling closeGoal(Async)");
        }

        return closeGoalCall(companyDomain, employeeId, goalId, body, _callback);

    }


    private ApiResponse<GoalsCloseGoalResponse> closeGoalWithHttpInfo(String companyDomain, String employeeId, String goalId, String body) throws ApiException {
        okhttp3.Call localVarCall = closeGoalValidateBeforeCall(companyDomain, employeeId, goalId, body, null);
        Type localVarReturnType = new TypeToken<GoalsCloseGoalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call closeGoalAsync(String companyDomain, String employeeId, String goalId, String body, final ApiCallback<GoalsCloseGoalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeGoalValidateBeforeCall(companyDomain, employeeId, goalId, body, _callback);
        Type localVarReturnType = new TypeToken<GoalsCloseGoalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloseGoalRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private String body;

        private CloseGoalRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Set body
         * @param body Comment field is optional. (optional)
         * @return CloseGoalRequestBuilder
         */
        public CloseGoalRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for closeGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was closed. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return closeGoalCall(companyDomain, employeeId, goalId, body, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute closeGoal request
         * @return GoalsCloseGoalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was closed. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsCloseGoalResponse execute() throws ApiException {
            String body = buildBodyParams();
            ApiResponse<GoalsCloseGoalResponse> localVarResp = closeGoalWithHttpInfo(companyDomain, employeeId, goalId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute closeGoal request with HTTP info returned
         * @return ApiResponse&lt;GoalsCloseGoalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was closed. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsCloseGoalResponse> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return closeGoalWithHttpInfo(companyDomain, employeeId, goalId, body);
        }

        /**
         * Execute closeGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was closed. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsCloseGoalResponse> _callback) throws ApiException {
            String body = buildBodyParams();
            return closeGoalAsync(companyDomain, employeeId, goalId, body, _callback);
        }
    }

    /**
     * Close Goal
     * Close a goal.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @return CloseGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response indicates that all the goal was closed. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public CloseGoalRequestBuilder closeGoal(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new CloseGoalRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call countPerStatusCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/filters"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countPerStatusValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling countPerStatus(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling countPerStatus(Async)");
        }

        return countPerStatusCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<GoalsCountPerStatusResponse> countPerStatusWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = countPerStatusValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<GoalsCountPerStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call countPerStatusAsync(String companyDomain, String employeeId, final ApiCallback<GoalsCountPerStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = countPerStatusValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<GoalsCountPerStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CountPerStatusRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private CountPerStatusRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for countPerStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return countPerStatusCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute countPerStatus request
         * @return GoalsCountPerStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsCountPerStatusResponse execute() throws ApiException {
            ApiResponse<GoalsCountPerStatusResponse> localVarResp = countPerStatusWithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute countPerStatus request with HTTP info returned
         * @return ApiResponse&lt;GoalsCountPerStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsCountPerStatusResponse> executeWithHttpInfo() throws ApiException {
            return countPerStatusWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute countPerStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsCountPerStatusResponse> _callback) throws ApiException {
            return countPerStatusAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get Goal Status Counts, Version 1.1
     * Get the number of goals per status for an employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID to whom the goals are assigned. (required)
     * @return CountPerStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public CountPerStatusRequestBuilder countPerStatus(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CountPerStatusRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call createCommentCall(String companyDomain, String employeeId, String goalId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentValidateBeforeCall(String companyDomain, String employeeId, String goalId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createComment(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createComment(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling createComment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createComment(Async)");
        }

        return createCommentCall(companyDomain, employeeId, goalId, body, _callback);

    }


    private ApiResponse<Void> createCommentWithHttpInfo(String companyDomain, String employeeId, String goalId, String body) throws ApiException {
        okhttp3.Call localVarCall = createCommentValidateBeforeCall(companyDomain, employeeId, goalId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCommentAsync(String companyDomain, String employeeId, String goalId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentValidateBeforeCall(companyDomain, employeeId, goalId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCommentRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private String body;

        private CreateCommentRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CreateCommentRequestBuilder
         */
        public CreateCommentRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for createComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal comment object with the new goal comment ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add a comment to the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return createCommentCall(companyDomain, employeeId, goalId, body, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createComment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal comment object with the new goal comment ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add a comment to the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            String body = buildBodyParams();
            createCommentWithHttpInfo(companyDomain, employeeId, goalId, body);
        }

        /**
         * Execute createComment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal comment object with the new goal comment ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add a comment to the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return createCommentWithHttpInfo(companyDomain, employeeId, goalId, body);
        }

        /**
         * Execute createComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal comment object with the new goal comment ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to add a comment to the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            String body = buildBodyParams();
            return createCommentAsync(companyDomain, employeeId, goalId, body, _callback);
        }
    }

    /**
     * Create Goal Comment
     * Create a new goal comment.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param body  (required)
     * @return CreateCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A goal comment object with the new goal comment ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the API user does not have permission to add a comment to the specified goal. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCommentRequestBuilder createComment(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new CreateCommentRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call createEmployeeGoalCall(String companyDomain, String employeeId, NewGoal newGoal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newGoal;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeGoalValidateBeforeCall(String companyDomain, String employeeId, NewGoal newGoal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createEmployeeGoal(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createEmployeeGoal(Async)");
        }

        // verify the required parameter 'newGoal' is set
        if (newGoal == null) {
            throw new ApiException("Missing the required parameter 'newGoal' when calling createEmployeeGoal(Async)");
        }

        return createEmployeeGoalCall(companyDomain, employeeId, newGoal, _callback);

    }


    private ApiResponse<Object> createEmployeeGoalWithHttpInfo(String companyDomain, String employeeId, NewGoal newGoal) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeGoalValidateBeforeCall(companyDomain, employeeId, newGoal, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmployeeGoalAsync(String companyDomain, String employeeId, NewGoal newGoal, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeGoalValidateBeforeCall(companyDomain, employeeId, newGoal, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmployeeGoalRequestBuilder {
        private final String title;
        private final List<Integer> sharedWithEmployeeIds;
        private final String dueDate;
        private final String companyDomain;
        private final String employeeId;
        private String description;
        private Integer percentComplete;
        private String alignsWithOptionId;
        private Float completionDate;
        private List<Milestone> milestones;

        private CreateEmployeeGoalRequestBuilder(String title, List<Integer> sharedWithEmployeeIds, String dueDate, String companyDomain, String employeeId) {
            this.title = title;
            this.sharedWithEmployeeIds = sharedWithEmployeeIds;
            this.dueDate = dueDate;
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set description
         * @param description [Optional] The goal description. (optional)
         * @return CreateEmployeeGoalRequestBuilder
         */
        public CreateEmployeeGoalRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set percentComplete
         * @param percentComplete [Optional] The goal completion percentage (0 - 100). If completionDate is set, this value must be 100. (optional)
         * @return CreateEmployeeGoalRequestBuilder
         */
        public CreateEmployeeGoalRequestBuilder percentComplete(Integer percentComplete) {
            this.percentComplete = percentComplete;
            return this;
        }
        
        /**
         * Set alignsWithOptionId
         * @param alignsWithOptionId [Optional] The option ID that aligns with this goal. (optional)
         * @return CreateEmployeeGoalRequestBuilder
         */
        public CreateEmployeeGoalRequestBuilder alignsWithOptionId(String alignsWithOptionId) {
            this.alignsWithOptionId = alignsWithOptionId;
            return this;
        }
        
        /**
         * Set completionDate
         * @param completionDate [Optional] The date the goal was completed. If date is set, and no milestones are contained within this goal, percentComplete must be set to 100. If this goal does contain milestones, completion date cannot be set. (optional)
         * @return CreateEmployeeGoalRequestBuilder
         */
        public CreateEmployeeGoalRequestBuilder completionDate(Float completionDate) {
            this.completionDate = completionDate;
            return this;
        }
        
        /**
         * Set milestones
         * @param milestones [Optional] Milestones for the goal. (optional)
         * @return CreateEmployeeGoalRequestBuilder
         */
        public CreateEmployeeGoalRequestBuilder milestones(List<Milestone> milestones) {
            this.milestones = milestones;
            return this;
        }
        
        /**
         * Build call for createEmployeeGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal object that includes the new goal ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to create a goal for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewGoal newGoal = buildBodyParams();
            return createEmployeeGoalCall(companyDomain, employeeId, newGoal, _callback);
        }

        private NewGoal buildBodyParams() {
            NewGoal newGoal = new NewGoal();
            newGoal.title(this.title);
            newGoal.description(this.description);
            newGoal.percentComplete(this.percentComplete);
            newGoal.alignsWithOptionId(this.alignsWithOptionId);
            newGoal.sharedWithEmployeeIds(this.sharedWithEmployeeIds);
            newGoal.dueDate(this.dueDate);
            newGoal.completionDate(this.completionDate);
            newGoal.milestones(this.milestones);
            return newGoal;
        }

        /**
         * Execute createEmployeeGoal request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal object that includes the new goal ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to create a goal for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            NewGoal newGoal = buildBodyParams();
            ApiResponse<Object> localVarResp = createEmployeeGoalWithHttpInfo(companyDomain, employeeId, newGoal);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployeeGoal request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal object that includes the new goal ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to create a goal for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            NewGoal newGoal = buildBodyParams();
            return createEmployeeGoalWithHttpInfo(companyDomain, employeeId, newGoal);
        }

        /**
         * Execute createEmployeeGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A goal object that includes the new goal ID. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> If the API user does not have permission to create a goal for this employee. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            NewGoal newGoal = buildBodyParams();
            return createEmployeeGoalAsync(companyDomain, employeeId, newGoal, _callback);
        }
    }

    /**
     * Create Goal
     * Create a new goal for an employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param newGoal  (required)
     * @return CreateEmployeeGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A goal object that includes the new goal ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the posted XML or JSON is invalid or the minimum fields are not provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the API user does not have permission to create a goal for this employee. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeGoalRequestBuilder createEmployeeGoal(String title, List<Integer> sharedWithEmployeeIds, String dueDate, String companyDomain, String employeeId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (sharedWithEmployeeIds == null) throw new IllegalArgumentException("\"sharedWithEmployeeIds\" is required but got null");
        if (dueDate == null) throw new IllegalArgumentException("\"dueDate\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateEmployeeGoalRequestBuilder(title, sharedWithEmployeeIds, dueDate, companyDomain, employeeId);
    }
    private okhttp3.Call deleteByIdCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteById(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteById(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling deleteById(Async)");
        }

        return deleteByIdCall(companyDomain, employeeId, goalId, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String companyDomain, String employeeId, String goalId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(companyDomain, employeeId, goalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String companyDomain, String employeeId, String goalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(companyDomain, employeeId, goalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;

        private DeleteByIdRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(companyDomain, employeeId, goalId, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(companyDomain, employeeId, goalId);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(companyDomain, employeeId, goalId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(companyDomain, employeeId, goalId, _callback);
        }
    }

    /**
     * Delete Goal
     * Delete a goal.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call deleteCommentCall(String companyDomain, String employeeId, String goalId, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(String companyDomain, String employeeId, String goalId, String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteComment(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteComment(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling deleteComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }

        return deleteCommentCall(companyDomain, employeeId, goalId, commentId, _callback);

    }


    private ApiResponse<Void> deleteCommentWithHttpInfo(String companyDomain, String employeeId, String goalId, String commentId) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(companyDomain, employeeId, goalId, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCommentAsync(String companyDomain, String employeeId, String goalId, String commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(companyDomain, employeeId, goalId, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCommentRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private final String commentId;

        private DeleteCommentRequestBuilder(String companyDomain, String employeeId, String goalId, String commentId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
            this.commentId = commentId;
        }

        /**
         * Build call for deleteComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCommentCall(companyDomain, employeeId, goalId, commentId, _callback);
        }


        /**
         * Execute deleteComment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCommentWithHttpInfo(companyDomain, employeeId, goalId, commentId);
        }

        /**
         * Execute deleteComment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCommentWithHttpInfo(companyDomain, employeeId, goalId, commentId);
        }

        /**
         * Execute deleteComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCommentAsync(companyDomain, employeeId, goalId, commentId, _callback);
        }
    }

    /**
     * Delete Goal Comment
     * Delete a goal comment.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param commentId commentId is the ID of a specific comment for the specified goal. (required)
     * @return DeleteCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion will return a 204 - No content response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCommentRequestBuilder deleteComment(String companyDomain, String employeeId, String goalId, String commentId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new DeleteCommentRequestBuilder(companyDomain, employeeId, goalId, commentId);
    }
    private okhttp3.Call determinePermissionCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/canCreateGoals"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call determinePermissionValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling determinePermission(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling determinePermission(Async)");
        }

        return determinePermissionCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<Void> determinePermissionWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = determinePermissionValidateBeforeCall(companyDomain, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call determinePermissionAsync(String companyDomain, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = determinePermissionValidateBeforeCall(companyDomain, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeterminePermissionRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private DeterminePermissionRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for determinePermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return determinePermissionCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute determinePermission request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            determinePermissionWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute determinePermission request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return determinePermissionWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute determinePermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return determinePermissionAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Can Create a Goal
     * Determine if the API user has permission to create a goal for this employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @return DeterminePermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public DeterminePermissionRequestBuilder determinePermission(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new DeterminePermissionRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call getAlignableOptionsCall(String companyDomain, String employeeId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/alignmentOptions"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlignableOptionsValidateBeforeCall(String companyDomain, String employeeId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getAlignableOptions(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAlignableOptions(Async)");
        }

        return getAlignableOptionsCall(companyDomain, employeeId, body, _callback);

    }


    private ApiResponse<Void> getAlignableOptionsWithHttpInfo(String companyDomain, String employeeId, String body) throws ApiException {
        okhttp3.Call localVarCall = getAlignableOptionsValidateBeforeCall(companyDomain, employeeId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAlignableOptionsAsync(String companyDomain, String employeeId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlignableOptionsValidateBeforeCall(companyDomain, employeeId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAlignableOptionsRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String body;

        private GetAlignableOptionsRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set body
         * @param body Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user. (optional)
         * @return GetAlignableOptionsRequestBuilder
         */
        public GetAlignableOptionsRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for getAlignableOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of goals that are available alignment options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return getAlignableOptionsCall(companyDomain, employeeId, body, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute getAlignableOptions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of goals that are available alignment options. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            String body = buildBodyParams();
            getAlignableOptionsWithHttpInfo(companyDomain, employeeId, body);
        }

        /**
         * Execute getAlignableOptions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of goals that are available alignment options. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return getAlignableOptionsWithHttpInfo(companyDomain, employeeId, body);
        }

        /**
         * Execute getAlignableOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of goals that are available alignment options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            String body = buildBodyParams();
            return getAlignableOptionsAsync(companyDomain, employeeId, body, _callback);
        }
    }

    /**
     * Alignable Goal Options
     * Get alignable goal options for an employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID to get alignable goal options for. (required)
     * @return GetAlignableOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with a list of goals that are available alignment options. </td><td>  -  </td></tr>
     </table>
     */
    public GetAlignableOptionsRequestBuilder getAlignableOptions(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAlignableOptionsRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call getAllAggregateInfoCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/aggregate"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAggregateInfoValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getAllAggregateInfo(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAllAggregateInfo(Async)");
        }

        return getAllAggregateInfoCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<GoalsGetAllAggregateInfoResponse> getAllAggregateInfoWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getAllAggregateInfoValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<GoalsGetAllAggregateInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAggregateInfoAsync(String companyDomain, String employeeId, final ApiCallback<GoalsGetAllAggregateInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAggregateInfoValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetAllAggregateInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAggregateInfoRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private GetAllAggregateInfoRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getAllAggregateInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAggregateInfoCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute getAllAggregateInfo request
         * @return GoalsGetAllAggregateInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetAllAggregateInfoResponse execute() throws ApiException {
            ApiResponse<GoalsGetAllAggregateInfoResponse> localVarResp = getAllAggregateInfoWithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAggregateInfo request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetAllAggregateInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetAllAggregateInfoResponse> executeWithHttpInfo() throws ApiException {
            return getAllAggregateInfoWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute getAllAggregateInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetAllAggregateInfoResponse> _callback) throws ApiException {
            return getAllAggregateInfoAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get All Aggregate Goal Info
     * Provides a list of all goals, type counts, goal comment counts, and employees shared with goals for the given employee. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID used to generate the aggregate information. (required)
     * @return GetAllAggregateInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAggregateInfoRequestBuilder getAllAggregateInfo(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllAggregateInfoRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call getAllAggregateInfo_0Call(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/aggregate"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAggregateInfo_0ValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getAllAggregateInfo_0(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAllAggregateInfo_0(Async)");
        }

        return getAllAggregateInfo_0Call(companyDomain, employeeId, _callback);

    }


    private ApiResponse<GoalsGetAllAggregateInfo200Response> getAllAggregateInfo_0WithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getAllAggregateInfo_0ValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<GoalsGetAllAggregateInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAggregateInfo_0Async(String companyDomain, String employeeId, final ApiCallback<GoalsGetAllAggregateInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAggregateInfo_0ValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetAllAggregateInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAggregateInfo0RequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private GetAllAggregateInfo0RequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getAllAggregateInfo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAggregateInfo_0Call(companyDomain, employeeId, _callback);
        }


        /**
         * Execute getAllAggregateInfo_0 request
         * @return GoalsGetAllAggregateInfo200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetAllAggregateInfo200Response execute() throws ApiException {
            ApiResponse<GoalsGetAllAggregateInfo200Response> localVarResp = getAllAggregateInfo_0WithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAggregateInfo_0 request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetAllAggregateInfo200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetAllAggregateInfo200Response> executeWithHttpInfo() throws ApiException {
            return getAllAggregateInfo_0WithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute getAllAggregateInfo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetAllAggregateInfo200Response> _callback) throws ApiException {
            return getAllAggregateInfo_0Async(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get All Aggregate Goal Info, Version 1.1
     * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID used to generate the aggregate information. (required)
     * @return GetAllAggregateInfo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAggregateInfo0RequestBuilder getAllAggregateInfo_0(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllAggregateInfo0RequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call getAllAggregateInfo_1Call(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_2/performance/employees/{employeeId}/goals/aggregate"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAggregateInfo_1ValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getAllAggregateInfo_1(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAllAggregateInfo_1(Async)");
        }

        return getAllAggregateInfo_1Call(companyDomain, employeeId, _callback);

    }


    private ApiResponse<GoalsGetAllAggregateInfo200Response1> getAllAggregateInfo_1WithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getAllAggregateInfo_1ValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<GoalsGetAllAggregateInfo200Response1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAggregateInfo_1Async(String companyDomain, String employeeId, final ApiCallback<GoalsGetAllAggregateInfo200Response1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAggregateInfo_1ValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetAllAggregateInfo200Response1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAggregateInfo1RequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private GetAllAggregateInfo1RequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getAllAggregateInfo_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAggregateInfo_1Call(companyDomain, employeeId, _callback);
        }


        /**
         * Execute getAllAggregateInfo_1 request
         * @return GoalsGetAllAggregateInfo200Response1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetAllAggregateInfo200Response1 execute() throws ApiException {
            ApiResponse<GoalsGetAllAggregateInfo200Response1> localVarResp = getAllAggregateInfo_1WithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAggregateInfo_1 request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetAllAggregateInfo200Response1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetAllAggregateInfo200Response1> executeWithHttpInfo() throws ApiException {
            return getAllAggregateInfo_1WithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute getAllAggregateInfo_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetAllAggregateInfo200Response1> _callback) throws ApiException {
            return getAllAggregateInfo_1Async(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get All Aggregate Goal Info, Version 1.2
     * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1.1: Returns all goals, including goals that contain milestones.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID used to generate the aggregate information. (required)
     * @return GetAllAggregateInfo1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAggregateInfo1RequestBuilder getAllAggregateInfo_1(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllAggregateInfo1RequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call getCommentsCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsValidateBeforeCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getComments(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getComments(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getComments(Async)");
        }

        return getCommentsCall(companyDomain, employeeId, goalId, _callback);

    }


    private ApiResponse<Void> getCommentsWithHttpInfo(String companyDomain, String employeeId, String goalId) throws ApiException {
        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(companyDomain, employeeId, goalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCommentsAsync(String companyDomain, String employeeId, String goalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(companyDomain, employeeId, goalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCommentsRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;

        private GetCommentsRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Build call for getComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of comments for the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentsCall(companyDomain, employeeId, goalId, _callback);
        }


        /**
         * Execute getComments request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of comments for the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCommentsWithHttpInfo(companyDomain, employeeId, goalId);
        }

        /**
         * Execute getComments request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of comments for the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCommentsWithHttpInfo(companyDomain, employeeId, goalId);
        }

        /**
         * Execute getComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of comments for the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCommentsAsync(companyDomain, employeeId, goalId, _callback);
        }
    }

    /**
     * Get Goal Comments
     * Get comments for a goal.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @return GetCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with a list of comments for the specified goal. </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentsRequestBuilder getComments(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new GetCommentsRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call getEmployeeGoalsCall(String companyDomain, String employeeId, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeGoalsValidateBeforeCall(String companyDomain, String employeeId, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeeGoals(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeGoals(Async)");
        }

        return getEmployeeGoalsCall(companyDomain, employeeId, filter, _callback);

    }


    private ApiResponse<GoalsGetEmployeeGoalsResponse> getEmployeeGoalsWithHttpInfo(String companyDomain, String employeeId, String filter) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeGoalsValidateBeforeCall(companyDomain, employeeId, filter, null);
        Type localVarReturnType = new TypeToken<GoalsGetEmployeeGoalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeGoalsAsync(String companyDomain, String employeeId, String filter, final ApiCallback<GoalsGetEmployeeGoalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeGoalsValidateBeforeCall(companyDomain, employeeId, filter, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetEmployeeGoalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeGoalsRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String filter;

        private GetEmployeeGoalsRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set filter
         * @param filter A filter that can be applied to only show the goals that are in a certain state. (optional)
         * @return GetEmployeeGoalsRequestBuilder
         */
        public GetEmployeeGoalsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getEmployeeGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeGoalsCall(companyDomain, employeeId, filter, _callback);
        }


        /**
         * Execute getEmployeeGoals request
         * @return GoalsGetEmployeeGoalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetEmployeeGoalsResponse execute() throws ApiException {
            ApiResponse<GoalsGetEmployeeGoalsResponse> localVarResp = getEmployeeGoalsWithHttpInfo(companyDomain, employeeId, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeGoals request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetEmployeeGoalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetEmployeeGoalsResponse> executeWithHttpInfo() throws ApiException {
            return getEmployeeGoalsWithHttpInfo(companyDomain, employeeId, filter);
        }

        /**
         * Execute getEmployeeGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetEmployeeGoalsResponse> _callback) throws ApiException {
            return getEmployeeGoalsAsync(companyDomain, employeeId, filter, _callback);
        }
    }

    /**
     * Get Goals
     * Get goals for an employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID to whom the goals are assigned. (required)
     * @return GetEmployeeGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeGoalsRequestBuilder getEmployeeGoals(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeeGoalsRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call getGoalAggregateInfoCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/aggregate"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalAggregateInfoValidateBeforeCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getGoalAggregateInfo(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getGoalAggregateInfo(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalAggregateInfo(Async)");
        }

        return getGoalAggregateInfoCall(companyDomain, employeeId, goalId, _callback);

    }


    private ApiResponse<GoalsGetGoalAggregateInfoResponse> getGoalAggregateInfoWithHttpInfo(String companyDomain, String employeeId, String goalId) throws ApiException {
        okhttp3.Call localVarCall = getGoalAggregateInfoValidateBeforeCall(companyDomain, employeeId, goalId, null);
        Type localVarReturnType = new TypeToken<GoalsGetGoalAggregateInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGoalAggregateInfoAsync(String companyDomain, String employeeId, String goalId, final ApiCallback<GoalsGetGoalAggregateInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalAggregateInfoValidateBeforeCall(companyDomain, employeeId, goalId, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetGoalAggregateInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGoalAggregateInfoRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;

        private GetGoalAggregateInfoRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Build call for getGoalAggregateInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGoalAggregateInfoCall(companyDomain, employeeId, goalId, _callback);
        }


        /**
         * Execute getGoalAggregateInfo request
         * @return GoalsGetGoalAggregateInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetGoalAggregateInfoResponse execute() throws ApiException {
            ApiResponse<GoalsGetGoalAggregateInfoResponse> localVarResp = getGoalAggregateInfoWithHttpInfo(companyDomain, employeeId, goalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGoalAggregateInfo request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetGoalAggregateInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetGoalAggregateInfoResponse> executeWithHttpInfo() throws ApiException {
            return getGoalAggregateInfoWithHttpInfo(companyDomain, employeeId, goalId);
        }

        /**
         * Execute getGoalAggregateInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetGoalAggregateInfoResponse> _callback) throws ApiException {
            return getGoalAggregateInfoAsync(companyDomain, employeeId, goalId, _callback);
        }
    }

    /**
     * Get Aggregate Goal Info
     * Provides goal information, goal comments, and employees shared with goals or who have commented on the given goal.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the Goal ID used to generate the aggregate information. (required)
     * @return GetGoalAggregateInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be an JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalAggregateInfoRequestBuilder getGoalAggregateInfo(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new GetGoalAggregateInfoRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call reopenGoalCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/reopen"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reopenGoalValidateBeforeCall(String companyDomain, String employeeId, String goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling reopenGoal(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling reopenGoal(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling reopenGoal(Async)");
        }

        return reopenGoalCall(companyDomain, employeeId, goalId, _callback);

    }


    private ApiResponse<Object> reopenGoalWithHttpInfo(String companyDomain, String employeeId, String goalId) throws ApiException {
        okhttp3.Call localVarCall = reopenGoalValidateBeforeCall(companyDomain, employeeId, goalId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reopenGoalAsync(String companyDomain, String employeeId, String goalId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reopenGoalValidateBeforeCall(companyDomain, employeeId, goalId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReopenGoalRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;

        private ReopenGoalRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Build call for reopenGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was reopened. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reopenGoalCall(companyDomain, employeeId, goalId, _callback);
        }


        /**
         * Execute reopenGoal request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was reopened. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = reopenGoalWithHttpInfo(companyDomain, employeeId, goalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reopenGoal request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was reopened. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return reopenGoalWithHttpInfo(companyDomain, employeeId, goalId);
        }

        /**
         * Execute reopenGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response indicates that all the goal was reopened. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return reopenGoalAsync(companyDomain, employeeId, goalId, _callback);
        }
    }

    /**
     * Reopen a Goal
     * Reopen a goal.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @return ReopenGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response indicates that all the goal was reopened. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ReopenGoalRequestBuilder reopenGoal(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new ReopenGoalRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call shareOptionsGetCall(String companyDomain, String employeeId, String search, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/shareOptions"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareOptionsGetValidateBeforeCall(String companyDomain, String employeeId, String search, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling shareOptionsGet(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling shareOptionsGet(Async)");
        }

        return shareOptionsGetCall(companyDomain, employeeId, search, limit, _callback);

    }


    private ApiResponse<Void> shareOptionsGetWithHttpInfo(String companyDomain, String employeeId, String search, String limit) throws ApiException {
        okhttp3.Call localVarCall = shareOptionsGetValidateBeforeCall(companyDomain, employeeId, search, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call shareOptionsGetAsync(String companyDomain, String employeeId, String search, String limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareOptionsGetValidateBeforeCall(companyDomain, employeeId, search, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ShareOptionsGetRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private String search;
        private String limit;

        private ShareOptionsGetRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Set search
         * @param search The search term used to filter employees returned. Will search name, employee ID and email. (optional)
         * @return ShareOptionsGetRequestBuilder
         */
        public ShareOptionsGetRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit will restrict results to specified number. (optional)
         * @return ShareOptionsGetRequestBuilder
         */
        public ShareOptionsGetRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for shareOptionsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of available employees with whom the goals can be shared. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shareOptionsGetCall(companyDomain, employeeId, search, limit, _callback);
        }


        /**
         * Execute shareOptionsGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of available employees with whom the goals can be shared. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            shareOptionsGetWithHttpInfo(companyDomain, employeeId, search, limit);
        }

        /**
         * Execute shareOptionsGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of available employees with whom the goals can be shared. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return shareOptionsGetWithHttpInfo(companyDomain, employeeId, search, limit);
        }

        /**
         * Execute shareOptionsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with a list of available employees with whom the goals can be shared. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return shareOptionsGetAsync(companyDomain, employeeId, search, limit, _callback);
        }
    }

    /**
     * Available Goal Sharing Options
     * Provides a list of employees with whom the specified employee&#39;s goals may be shared.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID to get sharing options for. (required)
     * @return ShareOptionsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with a list of available employees with whom the goals can be shared. </td><td>  -  </td></tr>
     </table>
     */
    public ShareOptionsGetRequestBuilder shareOptionsGet(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ShareOptionsGetRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call statusCountCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/filters"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCountValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling statusCount(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling statusCount(Async)");
        }

        return statusCountCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<GoalsStatusCountResponse> statusCountWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = statusCountValidateBeforeCall(companyDomain, employeeId, null);
        Type localVarReturnType = new TypeToken<GoalsStatusCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call statusCountAsync(String companyDomain, String employeeId, final ApiCallback<GoalsStatusCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCountValidateBeforeCall(companyDomain, employeeId, _callback);
        Type localVarReturnType = new TypeToken<GoalsStatusCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StatusCountRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private StatusCountRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for statusCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return statusCountCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute statusCount request
         * @return GoalsStatusCountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsStatusCountResponse execute() throws ApiException {
            ApiResponse<GoalsStatusCountResponse> localVarResp = statusCountWithHttpInfo(companyDomain, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute statusCount request with HTTP info returned
         * @return ApiResponse&lt;GoalsStatusCountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsStatusCountResponse> executeWithHttpInfo() throws ApiException {
            return statusCountWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute statusCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsStatusCountResponse> _callback) throws ApiException {
            return statusCountAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Get Goal Status Counts
     * Get the number of goals per status for an employee.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID to whom the goals are assigned. (required)
     * @return StatusCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response content will be a JSON document with the requested information. </td><td>  -  </td></tr>
     </table>
     */
    public StatusCountRequestBuilder statusCount(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new StatusCountRequestBuilder(companyDomain, employeeId);
    }
    private okhttp3.Call updateCommentCall(String companyDomain, String employeeId, String goalId, String commentId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(String companyDomain, String employeeId, String goalId, String commentId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateComment(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateComment(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateComment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }

        return updateCommentCall(companyDomain, employeeId, goalId, commentId, body, _callback);

    }


    private ApiResponse<Void> updateCommentWithHttpInfo(String companyDomain, String employeeId, String goalId, String commentId, String body) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(companyDomain, employeeId, goalId, commentId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateCommentAsync(String companyDomain, String employeeId, String goalId, String commentId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(companyDomain, employeeId, goalId, commentId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateCommentRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private final String commentId;
        private String body;

        private UpdateCommentRequestBuilder(String companyDomain, String employeeId, String goalId, String commentId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
            this.commentId = commentId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal comment response object for the specified commentId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return updateCommentCall(companyDomain, employeeId, goalId, commentId, body, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateComment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal comment response object for the specified commentId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            String body = buildBodyParams();
            updateCommentWithHttpInfo(companyDomain, employeeId, goalId, commentId, body);
        }

        /**
         * Execute updateComment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal comment response object for the specified commentId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return updateCommentWithHttpInfo(companyDomain, employeeId, goalId, commentId, body);
        }

        /**
         * Execute updateComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal comment response object for the specified commentId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            String body = buildBodyParams();
            return updateCommentAsync(companyDomain, employeeId, goalId, commentId, body, _callback);
        }
    }

    /**
     * Update Goal Comment
     * Update a goal comment.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param commentId commentId is the comment ID for the specified goal. (required)
     * @param body  (required)
     * @return UpdateCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal comment response object for the specified commentId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCommentRequestBuilder updateComment(String companyDomain, String employeeId, String goalId, String commentId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new UpdateCommentRequestBuilder(companyDomain, employeeId, goalId, commentId);
    }
    private okhttp3.Call updateEmployeeGoalCall(String companyDomain, String employeeId, String goalId, Goal goal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goal;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeGoalValidateBeforeCall(String companyDomain, String employeeId, String goalId, Goal goal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateEmployeeGoal(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployeeGoal(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateEmployeeGoal(Async)");
        }

        // verify the required parameter 'goal' is set
        if (goal == null) {
            throw new ApiException("Missing the required parameter 'goal' when calling updateEmployeeGoal(Async)");
        }

        return updateEmployeeGoalCall(companyDomain, employeeId, goalId, goal, _callback);

    }


    private ApiResponse<Object> updateEmployeeGoalWithHttpInfo(String companyDomain, String employeeId, String goalId, Goal goal) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeGoalValidateBeforeCall(companyDomain, employeeId, goalId, goal, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeGoalAsync(String companyDomain, String employeeId, String goalId, Goal goal, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeGoalValidateBeforeCall(companyDomain, employeeId, goalId, goal, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeGoalRequestBuilder {
        private final String title;
        private final Integer id;
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private String description;
        private Integer percentComplete;
        private String alignsWithOptionId;
        private List<Integer> sharedWithEmployeeIds;
        private String dueDate;
        private Float completionDate;

        private UpdateEmployeeGoalRequestBuilder(String title, Integer id, String companyDomain, String employeeId, String goalId) {
            this.title = title;
            this.id = id;
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Set description
         * @param description The goal description. (optional)
         * @return UpdateEmployeeGoalRequestBuilder
         */
        public UpdateEmployeeGoalRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set percentComplete
         * @param percentComplete The goal completion percentage (0 - 100). (optional)
         * @return UpdateEmployeeGoalRequestBuilder
         */
        public UpdateEmployeeGoalRequestBuilder percentComplete(Integer percentComplete) {
            this.percentComplete = percentComplete;
            return this;
        }
        
        /**
         * Set alignsWithOptionId
         * @param alignsWithOptionId The option ID that aligns with this goal. (optional)
         * @return UpdateEmployeeGoalRequestBuilder
         */
        public UpdateEmployeeGoalRequestBuilder alignsWithOptionId(String alignsWithOptionId) {
            this.alignsWithOptionId = alignsWithOptionId;
            return this;
        }
        
        /**
         * Set sharedWithEmployeeIds
         * @param sharedWithEmployeeIds Employee IDs of employees with whom the goal is shared. All goal owners are considered \\\&quot;shared with\\\&quot;. (optional)
         * @return UpdateEmployeeGoalRequestBuilder
         */
        public UpdateEmployeeGoalRequestBuilder sharedWithEmployeeIds(List<Integer> sharedWithEmployeeIds) {
            this.sharedWithEmployeeIds = sharedWithEmployeeIds;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate The goal due date in YYYY-mm-dd format. (optional)
         * @return UpdateEmployeeGoalRequestBuilder
         */
        public UpdateEmployeeGoalRequestBuilder dueDate(String dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set completionDate
         * @param completionDate The date the goal was completed. (optional)
         * @return UpdateEmployeeGoalRequestBuilder
         */
        public UpdateEmployeeGoalRequestBuilder completionDate(Float completionDate) {
            this.completionDate = completionDate;
            return this;
        }
        
        /**
         * Build call for updateEmployeeGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Goal goal = buildBodyParams();
            return updateEmployeeGoalCall(companyDomain, employeeId, goalId, goal, _callback);
        }

        private Goal buildBodyParams() {
            Goal goal = new Goal();
            goal.title(this.title);
            goal.description(this.description);
            goal.id(this.id);
            goal.percentComplete(this.percentComplete);
            goal.alignsWithOptionId(this.alignsWithOptionId);
            goal.sharedWithEmployeeIds(this.sharedWithEmployeeIds);
            goal.dueDate(this.dueDate);
            goal.completionDate(this.completionDate);
            return goal;
        }

        /**
         * Execute updateEmployeeGoal request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Goal goal = buildBodyParams();
            ApiResponse<Object> localVarResp = updateEmployeeGoalWithHttpInfo(companyDomain, employeeId, goalId, goal);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeGoal request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Goal goal = buildBodyParams();
            return updateEmployeeGoalWithHttpInfo(companyDomain, employeeId, goalId, goal);
        }

        /**
         * Execute updateEmployeeGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Goal goal = buildBodyParams();
            return updateEmployeeGoalAsync(companyDomain, employeeId, goalId, goal, _callback);
        }
    }

    /**
     * Update Goal
     * Update a goal. This version will not update a goal to contain milestones, that functionality is added in version 1.1
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @return UpdateEmployeeGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeGoalRequestBuilder updateEmployeeGoal(String title, Integer id, String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new UpdateEmployeeGoalRequestBuilder(title, id, companyDomain, employeeId, goalId);
    }
    private okhttp3.Call updateEmployeeGoalV11Call(String companyDomain, String employeeId, String goalId, UpdateGoalV11 updateGoalV11, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGoalV11;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/{goalId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeGoalV11ValidateBeforeCall(String companyDomain, String employeeId, String goalId, UpdateGoalV11 updateGoalV11, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateEmployeeGoalV11(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployeeGoalV11(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateEmployeeGoalV11(Async)");
        }

        // verify the required parameter 'updateGoalV11' is set
        if (updateGoalV11 == null) {
            throw new ApiException("Missing the required parameter 'updateGoalV11' when calling updateEmployeeGoalV11(Async)");
        }

        return updateEmployeeGoalV11Call(companyDomain, employeeId, goalId, updateGoalV11, _callback);

    }


    private ApiResponse<Object> updateEmployeeGoalV11WithHttpInfo(String companyDomain, String employeeId, String goalId, UpdateGoalV11 updateGoalV11) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeGoalV11ValidateBeforeCall(companyDomain, employeeId, goalId, updateGoalV11, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeGoalV11Async(String companyDomain, String employeeId, String goalId, UpdateGoalV11 updateGoalV11, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeGoalV11ValidateBeforeCall(companyDomain, employeeId, goalId, updateGoalV11, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeGoalV11RequestBuilder {
        private final String title;
        private final List<Integer> sharedWithEmployeeIds;
        private final String dueDate;
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private String description;
        private String alignsWithOptionId;
        private Boolean milestonesEnabled;
        private List<Integer> deletedMilestoneIds;
        private List<Milestone> milestones;

        private UpdateEmployeeGoalV11RequestBuilder(String title, List<Integer> sharedWithEmployeeIds, String dueDate, String companyDomain, String employeeId, String goalId) {
            this.title = title;
            this.sharedWithEmployeeIds = sharedWithEmployeeIds;
            this.dueDate = dueDate;
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Set description
         * @param description [Optional] The goal description. (optional)
         * @return UpdateEmployeeGoalV11RequestBuilder
         */
        public UpdateEmployeeGoalV11RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set alignsWithOptionId
         * @param alignsWithOptionId [Optional] The option ID that aligns with this goal. (optional)
         * @return UpdateEmployeeGoalV11RequestBuilder
         */
        public UpdateEmployeeGoalV11RequestBuilder alignsWithOptionId(String alignsWithOptionId) {
            this.alignsWithOptionId = alignsWithOptionId;
            return this;
        }
        
        /**
         * Set milestonesEnabled
         * @param milestonesEnabled [Optional] A flag indicating whether or not milestones are enabled for this goal. Setting this flag to false will delete all existing milestones for this goal. (optional)
         * @return UpdateEmployeeGoalV11RequestBuilder
         */
        public UpdateEmployeeGoalV11RequestBuilder milestonesEnabled(Boolean milestonesEnabled) {
            this.milestonesEnabled = milestonesEnabled;
            return this;
        }
        
        /**
         * Set deletedMilestoneIds
         * @param deletedMilestoneIds [Optional] Ids of all the milestones to be deleted with the update. (optional)
         * @return UpdateEmployeeGoalV11RequestBuilder
         */
        public UpdateEmployeeGoalV11RequestBuilder deletedMilestoneIds(List<Integer> deletedMilestoneIds) {
            this.deletedMilestoneIds = deletedMilestoneIds;
            return this;
        }
        
        /**
         * Set milestones
         * @param milestones [Optional] All milestones to be added to the goal with this update. (optional)
         * @return UpdateEmployeeGoalV11RequestBuilder
         */
        public UpdateEmployeeGoalV11RequestBuilder milestones(List<Milestone> milestones) {
            this.milestones = milestones;
            return this;
        }
        
        /**
         * Build call for updateEmployeeGoalV11
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateGoalV11 updateGoalV11 = buildBodyParams();
            return updateEmployeeGoalV11Call(companyDomain, employeeId, goalId, updateGoalV11, _callback);
        }

        private UpdateGoalV11 buildBodyParams() {
            UpdateGoalV11 updateGoalV11 = new UpdateGoalV11();
            updateGoalV11.title(this.title);
            updateGoalV11.description(this.description);
            updateGoalV11.alignsWithOptionId(this.alignsWithOptionId);
            updateGoalV11.sharedWithEmployeeIds(this.sharedWithEmployeeIds);
            updateGoalV11.dueDate(this.dueDate);
            updateGoalV11.milestonesEnabled(this.milestonesEnabled);
            updateGoalV11.deletedMilestoneIds(this.deletedMilestoneIds);
            updateGoalV11.milestones(this.milestones);
            return updateGoalV11;
        }

        /**
         * Execute updateEmployeeGoalV11 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateGoalV11 updateGoalV11 = buildBodyParams();
            ApiResponse<Object> localVarResp = updateEmployeeGoalV11WithHttpInfo(companyDomain, employeeId, goalId, updateGoalV11);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeGoalV11 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateGoalV11 updateGoalV11 = buildBodyParams();
            return updateEmployeeGoalV11WithHttpInfo(companyDomain, employeeId, goalId, updateGoalV11);
        }

        /**
         * Execute updateEmployeeGoalV11 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateGoalV11 updateGoalV11 = buildBodyParams();
            return updateEmployeeGoalV11Async(companyDomain, employeeId, goalId, updateGoalV11, _callback);
        }
    }

    /**
     * Update Goal, V1.1
     * Update a goal. Version 1.1 allows the updating of the milestones contained within the goal, unlike Version 1.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param updateGoalV11 Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @return UpdateEmployeeGoalV11RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The goal specified by the given goalId was not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeGoalV11RequestBuilder updateEmployeeGoalV11(String title, List<Integer> sharedWithEmployeeIds, String dueDate, String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (sharedWithEmployeeIds == null) throw new IllegalArgumentException("\"sharedWithEmployeeIds\" is required but got null");
        if (dueDate == null) throw new IllegalArgumentException("\"dueDate\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new UpdateEmployeeGoalV11RequestBuilder(title, sharedWithEmployeeIds, dueDate, companyDomain, employeeId, goalId);
    }
    private okhttp3.Call updateGoalSharingCall(String companyDomain, String employeeId, String goalId, GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsUpdateGoalSharingRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/sharedWith"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalSharingValidateBeforeCall(String companyDomain, String employeeId, String goalId, GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateGoalSharing(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateGoalSharing(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateGoalSharing(Async)");
        }

        // verify the required parameter 'goalsUpdateGoalSharingRequest' is set
        if (goalsUpdateGoalSharingRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsUpdateGoalSharingRequest' when calling updateGoalSharing(Async)");
        }

        return updateGoalSharingCall(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest, _callback);

    }


    private ApiResponse<GoalsUpdateGoalSharingResponse> updateGoalSharingWithHttpInfo(String companyDomain, String employeeId, String goalId, GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGoalSharingValidateBeforeCall(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest, null);
        Type localVarReturnType = new TypeToken<GoalsUpdateGoalSharingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGoalSharingAsync(String companyDomain, String employeeId, String goalId, GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest, final ApiCallback<GoalsUpdateGoalSharingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalSharingValidateBeforeCall(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest, _callback);
        Type localVarReturnType = new TypeToken<GoalsUpdateGoalSharingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGoalSharingRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String goalId;
        private List<Integer> sharedWithEmployeeIds;

        private UpdateGoalSharingRequestBuilder(String companyDomain, String employeeId, String goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Set sharedWithEmployeeIds
         * @param sharedWithEmployeeIds  (optional)
         * @return UpdateGoalSharingRequestBuilder
         */
        public UpdateGoalSharingRequestBuilder sharedWithEmployeeIds(List<Integer> sharedWithEmployeeIds) {
            this.sharedWithEmployeeIds = sharedWithEmployeeIds;
            return this;
        }
        
        /**
         * Build call for updateGoalSharing
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest = buildBodyParams();
            return updateGoalSharingCall(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest, _callback);
        }

        private GoalsUpdateGoalSharingRequest buildBodyParams() {
            GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest = new GoalsUpdateGoalSharingRequest();
            goalsUpdateGoalSharingRequest.sharedWithEmployeeIds(this.sharedWithEmployeeIds);
            return goalsUpdateGoalSharingRequest;
        }

        /**
         * Execute updateGoalSharing request
         * @return GoalsUpdateGoalSharingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsUpdateGoalSharingResponse execute() throws ApiException {
            GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest = buildBodyParams();
            ApiResponse<GoalsUpdateGoalSharingResponse> localVarResp = updateGoalSharingWithHttpInfo(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGoalSharing request with HTTP info returned
         * @return ApiResponse&lt;GoalsUpdateGoalSharingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsUpdateGoalSharingResponse> executeWithHttpInfo() throws ApiException {
            GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest = buildBodyParams();
            return updateGoalSharingWithHttpInfo(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest);
        }

        /**
         * Execute updateGoalSharing request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsUpdateGoalSharingResponse> _callback) throws ApiException {
            GoalsUpdateGoalSharingRequest goalsUpdateGoalSharingRequest = buildBodyParams();
            return updateGoalSharingAsync(companyDomain, employeeId, goalId, goalsUpdateGoalSharingRequest, _callback);
        }
    }

    /**
     * Update Goal Sharing
     * Updates which employees this goal is shared with.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param goalsUpdateGoalSharingRequest Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @return UpdateGoalSharingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGoalSharingRequestBuilder updateGoalSharing(String companyDomain, String employeeId, String goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new UpdateGoalSharingRequestBuilder(companyDomain, employeeId, goalId);
    }
    private okhttp3.Call updateProgressCall(String companyDomain, Integer employeeId, Integer goalId, Integer body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/progress"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProgressValidateBeforeCall(String companyDomain, Integer employeeId, Integer goalId, Integer body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateProgress(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateProgress(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateProgress(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProgress(Async)");
        }

        return updateProgressCall(companyDomain, employeeId, goalId, body, _callback);

    }


    private ApiResponse<GoalsUpdateProgressResponse> updateProgressWithHttpInfo(String companyDomain, Integer employeeId, Integer goalId, Integer body) throws ApiException {
        okhttp3.Call localVarCall = updateProgressValidateBeforeCall(companyDomain, employeeId, goalId, body, null);
        Type localVarReturnType = new TypeToken<GoalsUpdateProgressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProgressAsync(String companyDomain, Integer employeeId, Integer goalId, Integer body, final ApiCallback<GoalsUpdateProgressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProgressValidateBeforeCall(companyDomain, employeeId, goalId, body, _callback);
        Type localVarReturnType = new TypeToken<GoalsUpdateProgressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProgressRequestBuilder {
        private final String companyDomain;
        private final Integer employeeId;
        private final Integer goalId;
        private Integer body;

        private UpdateProgressRequestBuilder(String companyDomain, Integer employeeId, Integer goalId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.goalId = goalId;
        }

        /**
         * Set body
         * @param body Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (optional)
         * @return UpdateProgressRequestBuilder
         */
        public UpdateProgressRequestBuilder body(Integer body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateProgress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Integer body = buildBodyParams();
            return updateProgressCall(companyDomain, employeeId, goalId, body, _callback);
        }

        private Integer buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateProgress request
         * @return GoalsUpdateProgressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsUpdateProgressResponse execute() throws ApiException {
            Integer body = buildBodyParams();
            ApiResponse<GoalsUpdateProgressResponse> localVarResp = updateProgressWithHttpInfo(companyDomain, employeeId, goalId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProgress request with HTTP info returned
         * @return ApiResponse&lt;GoalsUpdateProgressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsUpdateProgressResponse> executeWithHttpInfo() throws ApiException {
            Integer body = buildBodyParams();
            return updateProgressWithHttpInfo(companyDomain, employeeId, goalId, body);
        }

        /**
         * Execute updateProgress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsUpdateProgressResponse> _callback) throws ApiException {
            Integer body = buildBodyParams();
            return updateProgressAsync(companyDomain, employeeId, goalId, body, _callback);
        }
    }

    /**
     * Update Goal Progress
     * 
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId employeeId is the employee ID with whom the goal is associated. (required)
     * @param goalId goalId is the goal ID for the specified employee. (required)
     * @param body Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @return UpdateProgressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The posted JSON is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Goal is not editable or insufficient permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No goal found for the given goalId. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProgressRequestBuilder updateProgress(String companyDomain, Integer employeeId, Integer goalId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
        return new UpdateProgressRequestBuilder(companyDomain, employeeId, goalId);
    }
}
