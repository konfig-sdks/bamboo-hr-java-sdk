/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicantTrackingAddApplicationCommentRequest;
import com.konfigthis.client.model.ApplicantTrackingChangeApplicantStatusRequest;
import com.konfigthis.client.model.ApplicantTrackingCreateNewApplicationRequest;
import com.konfigthis.client.model.ApplicantTrackingCreateNewApplicationResponseInner;
import com.konfigthis.client.model.ApplicantTrackingCreateNewJobOpeningRequest;
import com.konfigthis.client.model.ApplicantTrackingCreateNewJobOpeningResponseInner;
import com.konfigthis.client.model.ApplicantTrackingGetApplicationDetailsResponse;
import com.konfigthis.client.model.ApplicantTrackingGetCompanyLocationsResponseInner;
import com.konfigthis.client.model.ApplicantTrackingGetHiringLeadsResponseInner;
import com.konfigthis.client.model.ApplicantTrackingGetJobSummariesResponseInner;
import com.konfigthis.client.model.ApplicantTrackingListApplicationsResponse;
import com.konfigthis.client.model.ApplicantTrackingListStatusesResponseInner;
import java.io.File;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicantTrackingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicantTrackingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicantTrackingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addApplicationCommentCall(String companyDomain, Integer applicationId, ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantTrackingAddApplicationCommentRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/comments"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addApplicationCommentValidateBeforeCall(String companyDomain, Integer applicationId, ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addApplicationComment(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling addApplicationComment(Async)");
        }

        // verify the required parameter 'applicantTrackingAddApplicationCommentRequest' is set
        if (applicantTrackingAddApplicationCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'applicantTrackingAddApplicationCommentRequest' when calling addApplicationComment(Async)");
        }

        return addApplicationCommentCall(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest, _callback);

    }


    private ApiResponse<Void> addApplicationCommentWithHttpInfo(String companyDomain, Integer applicationId, ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = addApplicationCommentValidateBeforeCall(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addApplicationCommentAsync(String companyDomain, Integer applicationId, ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addApplicationCommentValidateBeforeCall(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddApplicationCommentRequestBuilder {
        private final String type;
        private final String comment;
        private final String companyDomain;
        private final Integer applicationId;

        private AddApplicationCommentRequestBuilder(String type, String comment, String companyDomain, Integer applicationId) {
            this.type = type;
            this.comment = comment;
            this.companyDomain = companyDomain;
            this.applicationId = applicationId;
        }

        /**
         * Build call for addApplicationComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest = buildBodyParams();
            return addApplicationCommentCall(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest, _callback);
        }

        private ApplicantTrackingAddApplicationCommentRequest buildBodyParams() {
            ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest = new ApplicantTrackingAddApplicationCommentRequest();
            applicantTrackingAddApplicationCommentRequest.type(this.type);
            applicantTrackingAddApplicationCommentRequest.comment(this.comment);
            return applicantTrackingAddApplicationCommentRequest;
        }

        /**
         * Execute addApplicationComment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest = buildBodyParams();
            addApplicationCommentWithHttpInfo(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest);
        }

        /**
         * Execute addApplicationComment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest = buildBodyParams();
            return addApplicationCommentWithHttpInfo(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest);
        }

        /**
         * Execute addApplicationComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantTrackingAddApplicationCommentRequest applicantTrackingAddApplicationCommentRequest = buildBodyParams();
            return addApplicationCommentAsync(companyDomain, applicationId, applicantTrackingAddApplicationCommentRequest, _callback);
        }
    }

    /**
     * Add Application Comment
     * Add a comment to an application. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param applicationId The ID of the application to add a comment to. (required)
     * @param applicantTrackingAddApplicationCommentRequest Comment object to post (required)
     * @return AddApplicationCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public AddApplicationCommentRequestBuilder addApplicationComment(String type, String comment, String companyDomain, Integer applicationId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (comment == null) throw new IllegalArgumentException("\"comment\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
        return new AddApplicationCommentRequestBuilder(type, comment, companyDomain, applicationId);
    }
    private okhttp3.Call changeApplicantStatusCall(String companyDomain, Integer applicationId, ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantTrackingChangeApplicantStatusRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/status"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeApplicantStatusValidateBeforeCall(String companyDomain, Integer applicationId, ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling changeApplicantStatus(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling changeApplicantStatus(Async)");
        }

        // verify the required parameter 'applicantTrackingChangeApplicantStatusRequest' is set
        if (applicantTrackingChangeApplicantStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'applicantTrackingChangeApplicantStatusRequest' when calling changeApplicantStatus(Async)");
        }

        return changeApplicantStatusCall(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest, _callback);

    }


    private ApiResponse<Void> changeApplicantStatusWithHttpInfo(String companyDomain, Integer applicationId, ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = changeApplicantStatusValidateBeforeCall(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changeApplicantStatusAsync(String companyDomain, Integer applicationId, ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeApplicantStatusValidateBeforeCall(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangeApplicantStatusRequestBuilder {
        private final Integer status;
        private final String companyDomain;
        private final Integer applicationId;

        private ChangeApplicantStatusRequestBuilder(Integer status, String companyDomain, Integer applicationId) {
            this.status = status;
            this.companyDomain = companyDomain;
            this.applicationId = applicationId;
        }

        /**
         * Build call for changeApplicantStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest = buildBodyParams();
            return changeApplicantStatusCall(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest, _callback);
        }

        private ApplicantTrackingChangeApplicantStatusRequest buildBodyParams() {
            ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest = new ApplicantTrackingChangeApplicantStatusRequest();
            applicantTrackingChangeApplicantStatusRequest.status(this.status);
            return applicantTrackingChangeApplicantStatusRequest;
        }

        /**
         * Execute changeApplicantStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest = buildBodyParams();
            changeApplicantStatusWithHttpInfo(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest);
        }

        /**
         * Execute changeApplicantStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest = buildBodyParams();
            return changeApplicantStatusWithHttpInfo(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest);
        }

        /**
         * Execute changeApplicantStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantTrackingChangeApplicantStatusRequest applicantTrackingChangeApplicantStatusRequest = buildBodyParams();
            return changeApplicantStatusAsync(companyDomain, applicationId, applicantTrackingChangeApplicantStatusRequest, _callback);
        }
    }

    /**
     * Change Applicant&#39;s Status
     * Change applicant&#39;s status. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param applicationId The ID of the application to add a comment to. (required)
     * @param applicantTrackingChangeApplicantStatusRequest Sample Post Data. (required)
     * @return ChangeApplicantStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeApplicantStatusRequestBuilder changeApplicantStatus(Integer status, String companyDomain, Integer applicationId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
        return new ChangeApplicantStatusRequestBuilder(status, companyDomain, applicationId);
    }
    private okhttp3.Call createNewApplicationCall(String companyDomain, String firstName, String lastName, Integer jobId, ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest, String email, String phoneNumber, String source, String address, String city, String state, String zip, String country, String linkedinUrl, String dateAvailable, String desiredSalary, String referredBy, String websiteUrl, String highestEducation, String collegeName, String references, File resume, File coverLetter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantTrackingCreateNewApplicationRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/application"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstName != null) {
            localVarFormParams.put("firstName", firstName);
        }

        if (lastName != null) {
            localVarFormParams.put("lastName", lastName);
        }

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (phoneNumber != null) {
            localVarFormParams.put("phoneNumber", phoneNumber);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        if (jobId != null) {
            localVarFormParams.put("jobId", jobId);
        }

        if (address != null) {
            localVarFormParams.put("address", address);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (zip != null) {
            localVarFormParams.put("zip", zip);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedinUrl", linkedinUrl);
        }

        if (dateAvailable != null) {
            localVarFormParams.put("dateAvailable", dateAvailable);
        }

        if (desiredSalary != null) {
            localVarFormParams.put("desiredSalary", desiredSalary);
        }

        if (referredBy != null) {
            localVarFormParams.put("referredBy", referredBy);
        }

        if (websiteUrl != null) {
            localVarFormParams.put("websiteUrl", websiteUrl);
        }

        if (highestEducation != null) {
            localVarFormParams.put("highestEducation", highestEducation);
        }

        if (collegeName != null) {
            localVarFormParams.put("collegeName", collegeName);
        }

        if (references != null) {
            localVarFormParams.put("references", references);
        }

        if (resume != null) {
            localVarFormParams.put("resume", resume);
        }

        if (coverLetter != null) {
            localVarFormParams.put("coverLetter", coverLetter);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewApplicationValidateBeforeCall(String companyDomain, String firstName, String lastName, Integer jobId, ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest, String email, String phoneNumber, String source, String address, String city, String state, String zip, String country, String linkedinUrl, String dateAvailable, String desiredSalary, String referredBy, String websiteUrl, String highestEducation, String collegeName, String references, File resume, File coverLetter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createNewApplication(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling createNewApplication(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling createNewApplication(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling createNewApplication(Async)");
        }

        // verify the required parameter 'applicantTrackingCreateNewApplicationRequest' is set
        if (applicantTrackingCreateNewApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'applicantTrackingCreateNewApplicationRequest' when calling createNewApplication(Async)");
        }

        return createNewApplicationCall(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter, _callback);

    }


    private ApiResponse<List<ApplicantTrackingCreateNewApplicationResponseInner>> createNewApplicationWithHttpInfo(String companyDomain, String firstName, String lastName, Integer jobId, ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest, String email, String phoneNumber, String source, String address, String city, String state, String zip, String country, String linkedinUrl, String dateAvailable, String desiredSalary, String referredBy, String websiteUrl, String highestEducation, String collegeName, String references, File resume, File coverLetter) throws ApiException {
        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter, null);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingCreateNewApplicationResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewApplicationAsync(String companyDomain, String firstName, String lastName, Integer jobId, ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest, String email, String phoneNumber, String source, String address, String city, String state, String zip, String country, String linkedinUrl, String dateAvailable, String desiredSalary, String referredBy, String websiteUrl, String highestEducation, String collegeName, String references, File resume, File coverLetter, final ApiCallback<List<ApplicantTrackingCreateNewApplicationResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingCreateNewApplicationResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewApplicationRequestBuilder {
        private final String companyDomain;
        private final String firstName;
        private final String lastName;
        private final Integer jobId;
        private String email;
        private String phoneNumber;
        private String source;
        private String address;
        private String city;
        private String state;
        private String zip;
        private String country;
        private String linkedinUrl;
        private String dateAvailable;
        private String desiredSalary;
        private String referredBy;
        private String websiteUrl;
        private String highestEducation;
        private String collegeName;
        private String references;
        private File resume;
        private File coverLetter;

        private CreateNewApplicationRequestBuilder(String companyDomain, String firstName, String lastName, Integer jobId) {
            this.companyDomain = companyDomain;
            this.firstName = firstName;
            this.lastName = lastName;
            this.jobId = jobId;
        }

        /**
         * Set email
         * @param email The email address of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber The phone number of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set source
         * @param source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set address
         * @param address The street address of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city The city of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip The zip code or postal code of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country The country of the candidate. Accepts country name or ISO code. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set linkedinUrl
         * @param linkedinUrl The LinkedIn profile url of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder linkedinUrl(String linkedinUrl) {
            this.linkedinUrl = linkedinUrl;
            return this;
        }
        
        /**
         * Set dateAvailable
         * @param dateAvailable The available start date of the candidate with the format YYYY-MM-DD. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder dateAvailable(String dateAvailable) {
            this.dateAvailable = dateAvailable;
            return this;
        }
        
        /**
         * Set desiredSalary
         * @param desiredSalary The desired salary of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder desiredSalary(String desiredSalary) {
            this.desiredSalary = desiredSalary;
            return this;
        }
        
        /**
         * Set referredBy
         * @param referredBy The person or entity that referred the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder referredBy(String referredBy) {
            this.referredBy = referredBy;
            return this;
        }
        
        /**
         * Set websiteUrl
         * @param websiteUrl The personal website, blog, or online portfolio of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder websiteUrl(String websiteUrl) {
            this.websiteUrl = websiteUrl;
            return this;
        }
        
        /**
         * Set highestEducation
         * @param highestEducation The highest completed education level of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder highestEducation(String highestEducation) {
            this.highestEducation = highestEducation;
            return this;
        }
        
        /**
         * Set collegeName
         * @param collegeName The college or university of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder collegeName(String collegeName) {
            this.collegeName = collegeName;
            return this;
        }
        
        /**
         * Set references
         * @param references A list of references supplied by the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder references(String references) {
            this.references = references;
            return this;
        }
        
        /**
         * Set resume
         * @param resume Resume of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder resume(File resume) {
            this.resume = resume;
            return this;
        }
        
        /**
         * Set coverLetter
         * @param coverLetter Cover letter of the candidate. (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder coverLetter(File coverLetter) {
            this.coverLetter = coverLetter;
            return this;
        }
        
        /**
         * Build call for createNewApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest = buildBodyParams();
            return createNewApplicationCall(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter, _callback);
        }

        private ApplicantTrackingCreateNewApplicationRequest buildBodyParams() {
            ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest = new ApplicantTrackingCreateNewApplicationRequest();
            applicantTrackingCreateNewApplicationRequest.firstName(this.firstName);
            applicantTrackingCreateNewApplicationRequest.lastName(this.lastName);
            applicantTrackingCreateNewApplicationRequest.email(this.email);
            applicantTrackingCreateNewApplicationRequest.phoneNumber(this.phoneNumber);
            applicantTrackingCreateNewApplicationRequest.source(this.source);
            applicantTrackingCreateNewApplicationRequest.jobId(this.jobId);
            applicantTrackingCreateNewApplicationRequest.address(this.address);
            applicantTrackingCreateNewApplicationRequest.city(this.city);
            applicantTrackingCreateNewApplicationRequest.state(this.state);
            applicantTrackingCreateNewApplicationRequest.zip(this.zip);
            applicantTrackingCreateNewApplicationRequest.country(this.country);
            applicantTrackingCreateNewApplicationRequest.linkedinUrl(this.linkedinUrl);
            applicantTrackingCreateNewApplicationRequest.dateAvailable(this.dateAvailable);
            applicantTrackingCreateNewApplicationRequest.desiredSalary(this.desiredSalary);
            applicantTrackingCreateNewApplicationRequest.referredBy(this.referredBy);
            applicantTrackingCreateNewApplicationRequest.websiteUrl(this.websiteUrl);
            if (this.highestEducation != null)
            applicantTrackingCreateNewApplicationRequest.highestEducation(ApplicantTrackingCreateNewApplicationRequest.HighestEducationEnum.fromValue(this.highestEducation));
            applicantTrackingCreateNewApplicationRequest.collegeName(this.collegeName);
            applicantTrackingCreateNewApplicationRequest.references(this.references);
            applicantTrackingCreateNewApplicationRequest.resume(this.resume);
            applicantTrackingCreateNewApplicationRequest.coverLetter(this.coverLetter);
            return applicantTrackingCreateNewApplicationRequest;
        }

        /**
         * Execute createNewApplication request
         * @return List&lt;ApplicantTrackingCreateNewApplicationResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicantTrackingCreateNewApplicationResponseInner> execute() throws ApiException {
            ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest = buildBodyParams();
            ApiResponse<List<ApplicantTrackingCreateNewApplicationResponseInner>> localVarResp = createNewApplicationWithHttpInfo(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewApplication request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicantTrackingCreateNewApplicationResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicantTrackingCreateNewApplicationResponseInner>> executeWithHttpInfo() throws ApiException {
            ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest = buildBodyParams();
            return createNewApplicationWithHttpInfo(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter);
        }

        /**
         * Execute createNewApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicantTrackingCreateNewApplicationResponseInner>> _callback) throws ApiException {
            ApplicantTrackingCreateNewApplicationRequest applicantTrackingCreateNewApplicationRequest = buildBodyParams();
            return createNewApplicationAsync(companyDomain, firstName, lastName, jobId, applicantTrackingCreateNewApplicationRequest, email, phoneNumber, source, address, city, state, zip, country, linkedinUrl, dateAvailable, desiredSalary, referredBy, websiteUrl, highestEducation, collegeName, references, resume, coverLetter, _callback);
        }
    }

    /**
     * Add New Candidate
     * Add a new candidate application to a job opening. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param firstName The first name of the candidate. (required)
     * @param lastName The last name of the candidate. (required)
     * @param jobId The id of the job opening for the candidate application. (required)
     * @param applicantTrackingCreateNewApplicationRequest  (required)
     * @return CreateNewApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewApplicationRequestBuilder createNewApplication(String companyDomain, String firstName, String lastName, Integer jobId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
        return new CreateNewApplicationRequestBuilder(companyDomain, firstName, lastName, jobId);
    }
    private okhttp3.Call createNewJobOpeningCall(String companyDomain, String postingTitle, String jobStatus, Integer hiringLead, String employmentType, String jobDescription, ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest, String department, String minimumExperience, String compensation, Integer jobLocation, String applicationQuestionResume, String applicationQuestionAddress, String applicationQuestionLinkedinUrl, String applicationQuestionDateAvailable, String applicationQuestionDesiredSalary, String applicationQuestionCoverLetter, String applicationQuestionReferredBy, String applicationQuestionWebsiteUrl, String applicationQuestionHighestEducation, String applicationQuestionCollege, String applicationQuestionReferences, String internalJobCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantTrackingCreateNewJobOpeningRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/job_opening"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (postingTitle != null) {
            localVarFormParams.put("postingTitle", postingTitle);
        }

        if (jobStatus != null) {
            localVarFormParams.put("jobStatus", jobStatus);
        }

        if (hiringLead != null) {
            localVarFormParams.put("hiringLead", hiringLead);
        }

        if (department != null) {
            localVarFormParams.put("department", department);
        }

        if (employmentType != null) {
            localVarFormParams.put("employmentType", employmentType);
        }

        if (minimumExperience != null) {
            localVarFormParams.put("minimumExperience", minimumExperience);
        }

        if (compensation != null) {
            localVarFormParams.put("compensation", compensation);
        }

        if (jobLocation != null) {
            localVarFormParams.put("jobLocation", jobLocation);
        }

        if (jobDescription != null) {
            localVarFormParams.put("jobDescription", jobDescription);
        }

        if (applicationQuestionResume != null) {
            localVarFormParams.put("applicationQuestionResume", applicationQuestionResume);
        }

        if (applicationQuestionAddress != null) {
            localVarFormParams.put("applicationQuestionAddress", applicationQuestionAddress);
        }

        if (applicationQuestionLinkedinUrl != null) {
            localVarFormParams.put("applicationQuestionLinkedinUrl", applicationQuestionLinkedinUrl);
        }

        if (applicationQuestionDateAvailable != null) {
            localVarFormParams.put("applicationQuestionDateAvailable", applicationQuestionDateAvailable);
        }

        if (applicationQuestionDesiredSalary != null) {
            localVarFormParams.put("applicationQuestionDesiredSalary", applicationQuestionDesiredSalary);
        }

        if (applicationQuestionCoverLetter != null) {
            localVarFormParams.put("applicationQuestionCoverLetter", applicationQuestionCoverLetter);
        }

        if (applicationQuestionReferredBy != null) {
            localVarFormParams.put("applicationQuestionReferredBy", applicationQuestionReferredBy);
        }

        if (applicationQuestionWebsiteUrl != null) {
            localVarFormParams.put("applicationQuestionWebsiteUrl", applicationQuestionWebsiteUrl);
        }

        if (applicationQuestionHighestEducation != null) {
            localVarFormParams.put("applicationQuestionHighestEducation", applicationQuestionHighestEducation);
        }

        if (applicationQuestionCollege != null) {
            localVarFormParams.put("applicationQuestionCollege", applicationQuestionCollege);
        }

        if (applicationQuestionReferences != null) {
            localVarFormParams.put("applicationQuestionReferences", applicationQuestionReferences);
        }

        if (internalJobCode != null) {
            localVarFormParams.put("internalJobCode", internalJobCode);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewJobOpeningValidateBeforeCall(String companyDomain, String postingTitle, String jobStatus, Integer hiringLead, String employmentType, String jobDescription, ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest, String department, String minimumExperience, String compensation, Integer jobLocation, String applicationQuestionResume, String applicationQuestionAddress, String applicationQuestionLinkedinUrl, String applicationQuestionDateAvailable, String applicationQuestionDesiredSalary, String applicationQuestionCoverLetter, String applicationQuestionReferredBy, String applicationQuestionWebsiteUrl, String applicationQuestionHighestEducation, String applicationQuestionCollege, String applicationQuestionReferences, String internalJobCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createNewJobOpening(Async)");
        }

        // verify the required parameter 'postingTitle' is set
        if (postingTitle == null) {
            throw new ApiException("Missing the required parameter 'postingTitle' when calling createNewJobOpening(Async)");
        }

        // verify the required parameter 'jobStatus' is set
        if (jobStatus == null) {
            throw new ApiException("Missing the required parameter 'jobStatus' when calling createNewJobOpening(Async)");
        }

        // verify the required parameter 'hiringLead' is set
        if (hiringLead == null) {
            throw new ApiException("Missing the required parameter 'hiringLead' when calling createNewJobOpening(Async)");
        }

        // verify the required parameter 'employmentType' is set
        if (employmentType == null) {
            throw new ApiException("Missing the required parameter 'employmentType' when calling createNewJobOpening(Async)");
        }

        // verify the required parameter 'jobDescription' is set
        if (jobDescription == null) {
            throw new ApiException("Missing the required parameter 'jobDescription' when calling createNewJobOpening(Async)");
        }

        // verify the required parameter 'applicantTrackingCreateNewJobOpeningRequest' is set
        if (applicantTrackingCreateNewJobOpeningRequest == null) {
            throw new ApiException("Missing the required parameter 'applicantTrackingCreateNewJobOpeningRequest' when calling createNewJobOpening(Async)");
        }

        return createNewJobOpeningCall(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode, _callback);

    }


    private ApiResponse<List<ApplicantTrackingCreateNewJobOpeningResponseInner>> createNewJobOpeningWithHttpInfo(String companyDomain, String postingTitle, String jobStatus, Integer hiringLead, String employmentType, String jobDescription, ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest, String department, String minimumExperience, String compensation, Integer jobLocation, String applicationQuestionResume, String applicationQuestionAddress, String applicationQuestionLinkedinUrl, String applicationQuestionDateAvailable, String applicationQuestionDesiredSalary, String applicationQuestionCoverLetter, String applicationQuestionReferredBy, String applicationQuestionWebsiteUrl, String applicationQuestionHighestEducation, String applicationQuestionCollege, String applicationQuestionReferences, String internalJobCode) throws ApiException {
        okhttp3.Call localVarCall = createNewJobOpeningValidateBeforeCall(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode, null);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingCreateNewJobOpeningResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewJobOpeningAsync(String companyDomain, String postingTitle, String jobStatus, Integer hiringLead, String employmentType, String jobDescription, ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest, String department, String minimumExperience, String compensation, Integer jobLocation, String applicationQuestionResume, String applicationQuestionAddress, String applicationQuestionLinkedinUrl, String applicationQuestionDateAvailable, String applicationQuestionDesiredSalary, String applicationQuestionCoverLetter, String applicationQuestionReferredBy, String applicationQuestionWebsiteUrl, String applicationQuestionHighestEducation, String applicationQuestionCollege, String applicationQuestionReferences, String internalJobCode, final ApiCallback<List<ApplicantTrackingCreateNewJobOpeningResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewJobOpeningValidateBeforeCall(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingCreateNewJobOpeningResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewJobOpeningRequestBuilder {
        private final String companyDomain;
        private final String postingTitle;
        private final String jobStatus;
        private final Integer hiringLead;
        private final String employmentType;
        private final String jobDescription;
        private String department;
        private String minimumExperience;
        private String compensation;
        private Integer jobLocation;
        private String applicationQuestionResume;
        private String applicationQuestionAddress;
        private String applicationQuestionLinkedinUrl;
        private String applicationQuestionDateAvailable;
        private String applicationQuestionDesiredSalary;
        private String applicationQuestionCoverLetter;
        private String applicationQuestionReferredBy;
        private String applicationQuestionWebsiteUrl;
        private String applicationQuestionHighestEducation;
        private String applicationQuestionCollege;
        private String applicationQuestionReferences;
        private String internalJobCode;

        private CreateNewJobOpeningRequestBuilder(String companyDomain, String postingTitle, String jobStatus, Integer hiringLead, String employmentType, String jobDescription) {
            this.companyDomain = companyDomain;
            this.postingTitle = postingTitle;
            this.jobStatus = jobStatus;
            this.hiringLead = hiringLead;
            this.employmentType = employmentType;
            this.jobDescription = jobDescription;
        }

        /**
         * Set department
         * @param department The department of the job opening. (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set minimumExperience
         * @param minimumExperience The minimum experience level that qualifies a candidate for the job opening. (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder minimumExperience(String minimumExperience) {
            this.minimumExperience = minimumExperience;
            return this;
        }
        
        /**
         * Set compensation
         * @param compensation The pay rate or compensation for the job opening. (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder compensation(String compensation) {
            this.compensation = compensation;
            return this;
        }
        
        /**
         * Set jobLocation
         * @param jobLocation The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder jobLocation(Integer jobLocation) {
            this.jobLocation = jobLocation;
            return this;
        }
        
        /**
         * Set applicationQuestionResume
         * @param applicationQuestionResume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionResume(String applicationQuestionResume) {
            this.applicationQuestionResume = applicationQuestionResume;
            return this;
        }
        
        /**
         * Set applicationQuestionAddress
         * @param applicationQuestionAddress Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionAddress(String applicationQuestionAddress) {
            this.applicationQuestionAddress = applicationQuestionAddress;
            return this;
        }
        
        /**
         * Set applicationQuestionLinkedinUrl
         * @param applicationQuestionLinkedinUrl Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionLinkedinUrl(String applicationQuestionLinkedinUrl) {
            this.applicationQuestionLinkedinUrl = applicationQuestionLinkedinUrl;
            return this;
        }
        
        /**
         * Set applicationQuestionDateAvailable
         * @param applicationQuestionDateAvailable Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionDateAvailable(String applicationQuestionDateAvailable) {
            this.applicationQuestionDateAvailable = applicationQuestionDateAvailable;
            return this;
        }
        
        /**
         * Set applicationQuestionDesiredSalary
         * @param applicationQuestionDesiredSalary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionDesiredSalary(String applicationQuestionDesiredSalary) {
            this.applicationQuestionDesiredSalary = applicationQuestionDesiredSalary;
            return this;
        }
        
        /**
         * Set applicationQuestionCoverLetter
         * @param applicationQuestionCoverLetter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionCoverLetter(String applicationQuestionCoverLetter) {
            this.applicationQuestionCoverLetter = applicationQuestionCoverLetter;
            return this;
        }
        
        /**
         * Set applicationQuestionReferredBy
         * @param applicationQuestionReferredBy Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionReferredBy(String applicationQuestionReferredBy) {
            this.applicationQuestionReferredBy = applicationQuestionReferredBy;
            return this;
        }
        
        /**
         * Set applicationQuestionWebsiteUrl
         * @param applicationQuestionWebsiteUrl Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionWebsiteUrl(String applicationQuestionWebsiteUrl) {
            this.applicationQuestionWebsiteUrl = applicationQuestionWebsiteUrl;
            return this;
        }
        
        /**
         * Set applicationQuestionHighestEducation
         * @param applicationQuestionHighestEducation Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionHighestEducation(String applicationQuestionHighestEducation) {
            this.applicationQuestionHighestEducation = applicationQuestionHighestEducation;
            return this;
        }
        
        /**
         * Set applicationQuestionCollege
         * @param applicationQuestionCollege Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionCollege(String applicationQuestionCollege) {
            this.applicationQuestionCollege = applicationQuestionCollege;
            return this;
        }
        
        /**
         * Set applicationQuestionReferences
         * @param applicationQuestionReferences Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder applicationQuestionReferences(String applicationQuestionReferences) {
            this.applicationQuestionReferences = applicationQuestionReferences;
            return this;
        }
        
        /**
         * Set internalJobCode
         * @param internalJobCode The internal job code for the job opening. (optional)
         * @return CreateNewJobOpeningRequestBuilder
         */
        public CreateNewJobOpeningRequestBuilder internalJobCode(String internalJobCode) {
            this.internalJobCode = internalJobCode;
            return this;
        }
        
        /**
         * Build call for createNewJobOpening
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest = buildBodyParams();
            return createNewJobOpeningCall(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode, _callback);
        }

        private ApplicantTrackingCreateNewJobOpeningRequest buildBodyParams() {
            ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest = new ApplicantTrackingCreateNewJobOpeningRequest();
            applicantTrackingCreateNewJobOpeningRequest.postingTitle(this.postingTitle);
            if (this.jobStatus != null)
            applicantTrackingCreateNewJobOpeningRequest.jobStatus(ApplicantTrackingCreateNewJobOpeningRequest.JobStatusEnum.fromValue(this.jobStatus));
            applicantTrackingCreateNewJobOpeningRequest.hiringLead(this.hiringLead);
            applicantTrackingCreateNewJobOpeningRequest.department(this.department);
            applicantTrackingCreateNewJobOpeningRequest.employmentType(this.employmentType);
            if (this.minimumExperience != null)
            applicantTrackingCreateNewJobOpeningRequest.minimumExperience(ApplicantTrackingCreateNewJobOpeningRequest.MinimumExperienceEnum.fromValue(this.minimumExperience));
            applicantTrackingCreateNewJobOpeningRequest.compensation(this.compensation);
            applicantTrackingCreateNewJobOpeningRequest.jobLocation(this.jobLocation);
            applicantTrackingCreateNewJobOpeningRequest.jobDescription(this.jobDescription);
            if (this.applicationQuestionResume != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionResume(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionResumeEnum.fromValue(this.applicationQuestionResume));
            if (this.applicationQuestionAddress != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionAddress(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionAddressEnum.fromValue(this.applicationQuestionAddress));
            if (this.applicationQuestionLinkedinUrl != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionLinkedinUrl(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionLinkedinUrlEnum.fromValue(this.applicationQuestionLinkedinUrl));
            if (this.applicationQuestionDateAvailable != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionDateAvailable(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionDateAvailableEnum.fromValue(this.applicationQuestionDateAvailable));
            if (this.applicationQuestionDesiredSalary != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionDesiredSalary(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionDesiredSalaryEnum.fromValue(this.applicationQuestionDesiredSalary));
            if (this.applicationQuestionCoverLetter != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionCoverLetter(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionCoverLetterEnum.fromValue(this.applicationQuestionCoverLetter));
            if (this.applicationQuestionReferredBy != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionReferredBy(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionReferredByEnum.fromValue(this.applicationQuestionReferredBy));
            if (this.applicationQuestionWebsiteUrl != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionWebsiteUrl(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionWebsiteUrlEnum.fromValue(this.applicationQuestionWebsiteUrl));
            if (this.applicationQuestionHighestEducation != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionHighestEducation(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionHighestEducationEnum.fromValue(this.applicationQuestionHighestEducation));
            if (this.applicationQuestionCollege != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionCollege(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionCollegeEnum.fromValue(this.applicationQuestionCollege));
            if (this.applicationQuestionReferences != null)
            applicantTrackingCreateNewJobOpeningRequest.applicationQuestionReferences(ApplicantTrackingCreateNewJobOpeningRequest.ApplicationQuestionReferencesEnum.fromValue(this.applicationQuestionReferences));
            applicantTrackingCreateNewJobOpeningRequest.internalJobCode(this.internalJobCode);
            return applicantTrackingCreateNewJobOpeningRequest;
        }

        /**
         * Execute createNewJobOpening request
         * @return List&lt;ApplicantTrackingCreateNewJobOpeningResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicantTrackingCreateNewJobOpeningResponseInner> execute() throws ApiException {
            ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest = buildBodyParams();
            ApiResponse<List<ApplicantTrackingCreateNewJobOpeningResponseInner>> localVarResp = createNewJobOpeningWithHttpInfo(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewJobOpening request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicantTrackingCreateNewJobOpeningResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicantTrackingCreateNewJobOpeningResponseInner>> executeWithHttpInfo() throws ApiException {
            ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest = buildBodyParams();
            return createNewJobOpeningWithHttpInfo(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode);
        }

        /**
         * Execute createNewJobOpening request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicantTrackingCreateNewJobOpeningResponseInner>> _callback) throws ApiException {
            ApplicantTrackingCreateNewJobOpeningRequest applicantTrackingCreateNewJobOpeningRequest = buildBodyParams();
            return createNewJobOpeningAsync(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription, applicantTrackingCreateNewJobOpeningRequest, department, minimumExperience, compensation, jobLocation, applicationQuestionResume, applicationQuestionAddress, applicationQuestionLinkedinUrl, applicationQuestionDateAvailable, applicationQuestionDesiredSalary, applicationQuestionCoverLetter, applicationQuestionReferredBy, applicationQuestionWebsiteUrl, applicationQuestionHighestEducation, applicationQuestionCollege, applicationQuestionReferences, internalJobCode, _callback);
        }
    }

    /**
     * Add New Job Opening
     * Add a new job opening. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param postingTitle The posting title of the job opening. (required)
     * @param jobStatus The status of the job opening. (required)
     * @param hiringLead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param employmentType The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param jobDescription The long-form text description of the job opening. (required)
     * @param applicantTrackingCreateNewJobOpeningRequest  (required)
     * @return CreateNewJobOpeningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity. One or more parameters failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewJobOpeningRequestBuilder createNewJobOpening(String companyDomain, String postingTitle, String jobStatus, Integer hiringLead, String employmentType, String jobDescription) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (postingTitle == null) throw new IllegalArgumentException("\"postingTitle\" is required but got null");
            

        if (jobStatus == null) throw new IllegalArgumentException("\"jobStatus\" is required but got null");
            

        if (hiringLead == null) throw new IllegalArgumentException("\"hiringLead\" is required but got null");
        if (employmentType == null) throw new IllegalArgumentException("\"employmentType\" is required but got null");
            

        if (jobDescription == null) throw new IllegalArgumentException("\"jobDescription\" is required but got null");
            

        return new CreateNewJobOpeningRequestBuilder(companyDomain, postingTitle, jobStatus, hiringLead, employmentType, jobDescription);
    }
    private okhttp3.Call getApplicationDetailsCall(String companyDomain, Integer applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/applications/{applicationId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationDetailsValidateBeforeCall(String companyDomain, Integer applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getApplicationDetails(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationDetails(Async)");
        }

        return getApplicationDetailsCall(companyDomain, applicationId, _callback);

    }


    private ApiResponse<ApplicantTrackingGetApplicationDetailsResponse> getApplicationDetailsWithHttpInfo(String companyDomain, Integer applicationId) throws ApiException {
        okhttp3.Call localVarCall = getApplicationDetailsValidateBeforeCall(companyDomain, applicationId, null);
        Type localVarReturnType = new TypeToken<ApplicantTrackingGetApplicationDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationDetailsAsync(String companyDomain, Integer applicationId, final ApiCallback<ApplicantTrackingGetApplicationDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationDetailsValidateBeforeCall(companyDomain, applicationId, _callback);
        Type localVarReturnType = new TypeToken<ApplicantTrackingGetApplicationDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationDetailsRequestBuilder {
        private final String companyDomain;
        private final Integer applicationId;

        private GetApplicationDetailsRequestBuilder(String companyDomain, Integer applicationId) {
            this.companyDomain = companyDomain;
            this.applicationId = applicationId;
        }

        /**
         * Build call for getApplicationDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationDetailsCall(companyDomain, applicationId, _callback);
        }


        /**
         * Execute getApplicationDetails request
         * @return ApplicantTrackingGetApplicationDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApplicantTrackingGetApplicationDetailsResponse execute() throws ApiException {
            ApiResponse<ApplicantTrackingGetApplicationDetailsResponse> localVarResp = getApplicationDetailsWithHttpInfo(companyDomain, applicationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationDetails request with HTTP info returned
         * @return ApiResponse&lt;ApplicantTrackingGetApplicationDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicantTrackingGetApplicationDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getApplicationDetailsWithHttpInfo(companyDomain, applicationId);
        }

        /**
         * Execute getApplicationDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicantTrackingGetApplicationDetailsResponse> _callback) throws ApiException {
            return getApplicationDetailsAsync(companyDomain, applicationId, _callback);
        }
    }

    /**
     * Get Application Details
     * Get the details of an application. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param applicationId The ID of the application to look up details. (required)
     * @return GetApplicationDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationDetailsRequestBuilder getApplicationDetails(String companyDomain, Integer applicationId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
        return new GetApplicationDetailsRequestBuilder(companyDomain, applicationId);
    }
    private okhttp3.Call getCompanyLocationsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/locations"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyLocationsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getCompanyLocations(Async)");
        }

        return getCompanyLocationsCall(companyDomain, _callback);

    }


    private ApiResponse<List<ApplicantTrackingGetCompanyLocationsResponseInner>> getCompanyLocationsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getCompanyLocationsValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingGetCompanyLocationsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyLocationsAsync(String companyDomain, final ApiCallback<List<ApplicantTrackingGetCompanyLocationsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyLocationsValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingGetCompanyLocationsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyLocationsRequestBuilder {
        private final String companyDomain;

        private GetCompanyLocationsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getCompanyLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyLocationsCall(companyDomain, _callback);
        }


        /**
         * Execute getCompanyLocations request
         * @return List&lt;ApplicantTrackingGetCompanyLocationsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicantTrackingGetCompanyLocationsResponseInner> execute() throws ApiException {
            ApiResponse<List<ApplicantTrackingGetCompanyLocationsResponseInner>> localVarResp = getCompanyLocationsWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyLocations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicantTrackingGetCompanyLocationsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicantTrackingGetCompanyLocationsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getCompanyLocationsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getCompanyLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicantTrackingGetCompanyLocationsResponseInner>> _callback) throws ApiException {
            return getCompanyLocationsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get Company Locations
     * Get company locations for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetCompanyLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyLocationsRequestBuilder getCompanyLocations(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetCompanyLocationsRequestBuilder(companyDomain);
    }
    private okhttp3.Call getHiringLeadsCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/hiring_leads"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHiringLeadsValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getHiringLeads(Async)");
        }

        return getHiringLeadsCall(companyDomain, _callback);

    }


    private ApiResponse<List<ApplicantTrackingGetHiringLeadsResponseInner>> getHiringLeadsWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = getHiringLeadsValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingGetHiringLeadsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHiringLeadsAsync(String companyDomain, final ApiCallback<List<ApplicantTrackingGetHiringLeadsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHiringLeadsValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingGetHiringLeadsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHiringLeadsRequestBuilder {
        private final String companyDomain;

        private GetHiringLeadsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for getHiringLeads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHiringLeadsCall(companyDomain, _callback);
        }


        /**
         * Execute getHiringLeads request
         * @return List&lt;ApplicantTrackingGetHiringLeadsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicantTrackingGetHiringLeadsResponseInner> execute() throws ApiException {
            ApiResponse<List<ApplicantTrackingGetHiringLeadsResponseInner>> localVarResp = getHiringLeadsWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHiringLeads request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicantTrackingGetHiringLeadsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicantTrackingGetHiringLeadsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getHiringLeadsWithHttpInfo(companyDomain);
        }

        /**
         * Execute getHiringLeads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicantTrackingGetHiringLeadsResponseInner>> _callback) throws ApiException {
            return getHiringLeadsAsync(companyDomain, _callback);
        }
    }

    /**
     * Get Hiring Leads
     * Get potential hiring leads for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetHiringLeadsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request url. </td><td>  -  </td></tr>
     </table>
     */
    public GetHiringLeadsRequestBuilder getHiringLeads(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetHiringLeadsRequestBuilder(companyDomain);
    }
    private okhttp3.Call getJobSummariesCall(String companyDomain, String statusGroups, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/jobs"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statusGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusGroups", statusGroups));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobSummariesValidateBeforeCall(String companyDomain, String statusGroups, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getJobSummaries(Async)");
        }

        return getJobSummariesCall(companyDomain, statusGroups, sortBy, sortOrder, _callback);

    }


    private ApiResponse<List<ApplicantTrackingGetJobSummariesResponseInner>> getJobSummariesWithHttpInfo(String companyDomain, String statusGroups, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getJobSummariesValidateBeforeCall(companyDomain, statusGroups, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingGetJobSummariesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobSummariesAsync(String companyDomain, String statusGroups, String sortBy, String sortOrder, final ApiCallback<List<ApplicantTrackingGetJobSummariesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobSummariesValidateBeforeCall(companyDomain, statusGroups, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingGetJobSummariesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobSummariesRequestBuilder {
        private final String companyDomain;
        private String statusGroups;
        private String sortBy;
        private String sortOrder;

        private GetJobSummariesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set statusGroups
         * @param statusGroups A list of status groups to filter positions by. (optional)
         * @return GetJobSummariesRequestBuilder
         */
        public GetJobSummariesRequestBuilder statusGroups(String statusGroups) {
            this.statusGroups = statusGroups;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy A specific field to sort the results by. (optional)
         * @return GetJobSummariesRequestBuilder
         */
        public GetJobSummariesRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which to sort results. (optional)
         * @return GetJobSummariesRequestBuilder
         */
        public GetJobSummariesRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for getJobSummaries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobSummariesCall(companyDomain, statusGroups, sortBy, sortOrder, _callback);
        }


        /**
         * Execute getJobSummaries request
         * @return List&lt;ApplicantTrackingGetJobSummariesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicantTrackingGetJobSummariesResponseInner> execute() throws ApiException {
            ApiResponse<List<ApplicantTrackingGetJobSummariesResponseInner>> localVarResp = getJobSummariesWithHttpInfo(companyDomain, statusGroups, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobSummaries request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicantTrackingGetJobSummariesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicantTrackingGetJobSummariesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getJobSummariesWithHttpInfo(companyDomain, statusGroups, sortBy, sortOrder);
        }

        /**
         * Execute getJobSummaries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicantTrackingGetJobSummariesResponseInner>> _callback) throws ApiException {
            return getJobSummariesAsync(companyDomain, statusGroups, sortBy, sortOrder, _callback);
        }
    }

    /**
     * Get Job Summaries
     * Get a list of job summaries. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return GetJobSummariesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobSummariesRequestBuilder getJobSummaries(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new GetJobSummariesRequestBuilder(companyDomain);
    }
    private okhttp3.Call listApplicationsCall(String companyDomain, Integer page, Integer jobId, Integer applicationStatusId, String applicationStatus, String jobStatusGroups, String searchString, String sortBy, String sortOrder, OffsetDateTime newSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/applications"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        if (applicationStatusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationStatusId", applicationStatusId));
        }

        if (applicationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationStatus", applicationStatus));
        }

        if (jobStatusGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobStatusGroups", jobStatusGroups));
        }

        if (searchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchString", searchString));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (newSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newSince", newSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApplicationsValidateBeforeCall(String companyDomain, Integer page, Integer jobId, Integer applicationStatusId, String applicationStatus, String jobStatusGroups, String searchString, String sortBy, String sortOrder, OffsetDateTime newSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listApplications(Async)");
        }

        return listApplicationsCall(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince, _callback);

    }


    private ApiResponse<ApplicantTrackingListApplicationsResponse> listApplicationsWithHttpInfo(String companyDomain, Integer page, Integer jobId, Integer applicationStatusId, String applicationStatus, String jobStatusGroups, String searchString, String sortBy, String sortOrder, OffsetDateTime newSince) throws ApiException {
        okhttp3.Call localVarCall = listApplicationsValidateBeforeCall(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince, null);
        Type localVarReturnType = new TypeToken<ApplicantTrackingListApplicationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listApplicationsAsync(String companyDomain, Integer page, Integer jobId, Integer applicationStatusId, String applicationStatus, String jobStatusGroups, String searchString, String sortBy, String sortOrder, OffsetDateTime newSince, final ApiCallback<ApplicantTrackingListApplicationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicationsValidateBeforeCall(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince, _callback);
        Type localVarReturnType = new TypeToken<ApplicantTrackingListApplicationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListApplicationsRequestBuilder {
        private final String companyDomain;
        private Integer page;
        private Integer jobId;
        private Integer applicationStatusId;
        private String applicationStatus;
        private String jobStatusGroups;
        private String searchString;
        private String sortBy;
        private String sortOrder;
        private OffsetDateTime newSince;

        private ListApplicationsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set page
         * @param page The page number (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId A Job Id to limit results to (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder jobId(Integer jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set applicationStatusId
         * @param applicationStatusId Application status id to filter by. (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder applicationStatusId(Integer applicationStatusId) {
            this.applicationStatusId = applicationStatusId;
            return this;
        }
        
        /**
         * Set applicationStatus
         * @param applicationStatus A list of application status groups to filter by. (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder applicationStatus(String applicationStatus) {
            this.applicationStatus = applicationStatus;
            return this;
        }
        
        /**
         * Set jobStatusGroups
         * @param jobStatusGroups A list of position status groups to filter by. (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder jobStatusGroups(String jobStatusGroups) {
            this.jobStatusGroups = jobStatusGroups;
            return this;
        }
        
        /**
         * Set searchString
         * @param searchString A general search criteria by which to find applications. (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder searchString(String searchString) {
            this.searchString = searchString;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy A specific field to sort the results by. (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which to sort results. (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set newSince
         * @param newSince Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
         * @return ListApplicationsRequestBuilder
         */
        public ListApplicationsRequestBuilder newSince(OffsetDateTime newSince) {
            this.newSince = newSince;
            return this;
        }
        
        /**
         * Build call for listApplications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listApplicationsCall(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince, _callback);
        }


        /**
         * Execute listApplications request
         * @return ApplicantTrackingListApplicationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public ApplicantTrackingListApplicationsResponse execute() throws ApiException {
            ApiResponse<ApplicantTrackingListApplicationsResponse> localVarResp = listApplicationsWithHttpInfo(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listApplications request with HTTP info returned
         * @return ApiResponse&lt;ApplicantTrackingListApplicationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicantTrackingListApplicationsResponse> executeWithHttpInfo() throws ApiException {
            return listApplicationsWithHttpInfo(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince);
        }

        /**
         * Execute listApplications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicantTrackingListApplicationsResponse> _callback) throws ApiException {
            return listApplicationsAsync(companyDomain, page, jobId, applicationStatusId, applicationStatus, jobStatusGroups, searchString, sortBy, sortOrder, newSince, _callback);
        }
    }

    /**
     * Get Applications
     * Get a list of applications. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListApplicationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
     </table>
     */
    public ListApplicationsRequestBuilder listApplications(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListApplicationsRequestBuilder(companyDomain);
    }
    private okhttp3.Call listStatusesCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/applicant_tracking/statuses"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStatusesValidateBeforeCall(String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listStatuses(Async)");
        }

        return listStatusesCall(companyDomain, _callback);

    }


    private ApiResponse<List<ApplicantTrackingListStatusesResponseInner>> listStatusesWithHttpInfo(String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = listStatusesValidateBeforeCall(companyDomain, null);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingListStatusesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStatusesAsync(String companyDomain, final ApiCallback<List<ApplicantTrackingListStatusesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStatusesValidateBeforeCall(companyDomain, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicantTrackingListStatusesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListStatusesRequestBuilder {
        private final String companyDomain;

        private ListStatusesRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for listStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStatusesCall(companyDomain, _callback);
        }


        /**
         * Execute listStatuses request
         * @return List&lt;ApplicantTrackingListStatusesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicantTrackingListStatusesResponseInner> execute() throws ApiException {
            ApiResponse<List<ApplicantTrackingListStatusesResponseInner>> localVarResp = listStatusesWithHttpInfo(companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listStatuses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicantTrackingListStatusesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicantTrackingListStatusesResponseInner>> executeWithHttpInfo() throws ApiException {
            return listStatusesWithHttpInfo(companyDomain);
        }

        /**
         * Execute listStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicantTrackingListStatusesResponseInner>> _callback) throws ApiException {
            return listStatusesAsync(companyDomain, _callback);
        }
    }

    /**
     * Get Statuses
     * Get a list of statuses for a company. The owner of the API key used must have access to ATS settings.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @return ListStatusesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid API credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient user permissions or API access is not turned on. </td><td>  -  </td></tr>
     </table>
     */
    public ListStatusesRequestBuilder listStatuses(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ListStatusesRequestBuilder(companyDomain);
    }
}
