/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RequestCustomReport;
import com.konfigthis.client.model.RequestCustomReportFilters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call companyReportCall(String companyDomain, String id, String format, String fd, Boolean onlyCurrent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/reports/{id}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (fd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fd", fd));
        }

        if (onlyCurrent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyCurrent", onlyCurrent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyReportValidateBeforeCall(String companyDomain, String id, String format, String fd, Boolean onlyCurrent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling companyReport(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling companyReport(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling companyReport(Async)");
        }

        return companyReportCall(companyDomain, id, format, fd, onlyCurrent, _callback);

    }


    private ApiResponse<Void> companyReportWithHttpInfo(String companyDomain, String id, String format, String fd, Boolean onlyCurrent) throws ApiException {
        okhttp3.Call localVarCall = companyReportValidateBeforeCall(companyDomain, id, format, fd, onlyCurrent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call companyReportAsync(String companyDomain, String id, String format, String fd, Boolean onlyCurrent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyReportValidateBeforeCall(companyDomain, id, format, fd, onlyCurrent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CompanyReportRequestBuilder {
        private final String companyDomain;
        private final String id;
        private final String format;
        private String fd;
        private Boolean onlyCurrent;

        private CompanyReportRequestBuilder(String companyDomain, String id, String format) {
            this.companyDomain = companyDomain;
            this.id = id;
            this.format = format;
        }

        /**
         * Set fd
         * @param fd yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot; (optional)
         * @return CompanyReportRequestBuilder
         */
        public CompanyReportRequestBuilder fd(String fd) {
            this.fd = fd;
            return this;
        }
        
        /**
         * Set onlyCurrent
         * @param onlyCurrent Setting to false will return future dated values from history table fields. (optional, default to true)
         * @return CompanyReportRequestBuilder
         */
        public CompanyReportRequestBuilder onlyCurrent(Boolean onlyCurrent) {
            this.onlyCurrent = onlyCurrent;
            return this;
        }
        
        /**
         * Build call for companyReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if you request a nonexistent report number. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return companyReportCall(companyDomain, id, format, fd, onlyCurrent, _callback);
        }


        /**
         * Execute companyReport request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if you request a nonexistent report number. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            companyReportWithHttpInfo(companyDomain, id, format, fd, onlyCurrent);
        }

        /**
         * Execute companyReport request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if you request a nonexistent report number. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return companyReportWithHttpInfo(companyDomain, id, format, fd, onlyCurrent);
        }

        /**
         * Execute companyReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if you request a nonexistent report number. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return companyReportAsync(companyDomain, id, format, fd, onlyCurrent, _callback);
        }
    }

    /**
     * Get company report
     * Use this resource to request one of your existing custom company reports from the My Reports or Manage Reports sections in the Reports tab. You can get the report number by hovering over the report name and noting the ID from the URL. At present, only reports from the My Reports or Manage Reports sections are supported. In the future we may implement reports from the Standard Reports section if there is enough demand for it. The report numbers used in this request are different in each company.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param id {id} is a report ID. (required)
     * @param format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @return CompanyReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All fields available in BambooHR. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if you request a nonexistent report number. </td><td>  -  </td></tr>
     </table>
     */
    public CompanyReportRequestBuilder companyReport(String companyDomain, String id, String format) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new CompanyReportRequestBuilder(companyDomain, id, format);
    }
    private okhttp3.Call requestCustomReportCall(String companyDomain, String format, RequestCustomReport requestCustomReport, Boolean onlyCurrent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestCustomReport;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/reports/custom"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (onlyCurrent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyCurrent", onlyCurrent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestCustomReportValidateBeforeCall(String companyDomain, String format, RequestCustomReport requestCustomReport, Boolean onlyCurrent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling requestCustomReport(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling requestCustomReport(Async)");
        }

        // verify the required parameter 'requestCustomReport' is set
        if (requestCustomReport == null) {
            throw new ApiException("Missing the required parameter 'requestCustomReport' when calling requestCustomReport(Async)");
        }

        return requestCustomReportCall(companyDomain, format, requestCustomReport, onlyCurrent, _callback);

    }


    private ApiResponse<Void> requestCustomReportWithHttpInfo(String companyDomain, String format, RequestCustomReport requestCustomReport, Boolean onlyCurrent) throws ApiException {
        okhttp3.Call localVarCall = requestCustomReportValidateBeforeCall(companyDomain, format, requestCustomReport, onlyCurrent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call requestCustomReportAsync(String companyDomain, String format, RequestCustomReport requestCustomReport, Boolean onlyCurrent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestCustomReportValidateBeforeCall(companyDomain, format, requestCustomReport, onlyCurrent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RequestCustomReportRequestBuilder {
        private final String companyDomain;
        private final String format;
        private String title;
        private RequestCustomReportFilters filters;
        private List<String> fields;
        private Boolean onlyCurrent;

        private RequestCustomReportRequestBuilder(String companyDomain, String format) {
            this.companyDomain = companyDomain;
            this.format = format;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return RequestCustomReportRequestBuilder
         */
        public RequestCustomReportRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set filters
         * @param filters  (optional)
         * @return RequestCustomReportRequestBuilder
         */
        public RequestCustomReportRequestBuilder filters(RequestCustomReportFilters filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return RequestCustomReportRequestBuilder
         */
        public RequestCustomReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set onlyCurrent
         * @param onlyCurrent Limits the report to only current employees. Setting to false will include future-dated employees in the report. (optional, default to true)
         * @return RequestCustomReportRequestBuilder
         */
        public RequestCustomReportRequestBuilder onlyCurrent(Boolean onlyCurrent) {
            this.onlyCurrent = onlyCurrent;
            return this;
        }
        
        /**
         * Build call for requestCustomReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom report successfully requested </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RequestCustomReport requestCustomReport = buildBodyParams();
            return requestCustomReportCall(companyDomain, format, requestCustomReport, onlyCurrent, _callback);
        }

        private RequestCustomReport buildBodyParams() {
            RequestCustomReport requestCustomReport = new RequestCustomReport();
            requestCustomReport.title(this.title);
            requestCustomReport.filters(this.filters);
            requestCustomReport.fields(this.fields);
            return requestCustomReport;
        }

        /**
         * Execute requestCustomReport request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom report successfully requested </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RequestCustomReport requestCustomReport = buildBodyParams();
            requestCustomReportWithHttpInfo(companyDomain, format, requestCustomReport, onlyCurrent);
        }

        /**
         * Execute requestCustomReport request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom report successfully requested </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RequestCustomReport requestCustomReport = buildBodyParams();
            return requestCustomReportWithHttpInfo(companyDomain, format, requestCustomReport, onlyCurrent);
        }

        /**
         * Execute requestCustomReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom report successfully requested </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RequestCustomReport requestCustomReport = buildBodyParams();
            return requestCustomReportAsync(companyDomain, format, requestCustomReport, onlyCurrent, _callback);
        }
    }

    /**
     * Request a custom report
     * Use this resource to request BambooHR generate a report. You must specify a type of either \&quot;PDF\&quot;, \&quot;XLS\&quot;, \&quot;CSV\&quot;, \&quot;JSON\&quot;, or \&quot;XML\&quot;. You must specify a list of fields to show on the report. The list of fields is available here. The custom report will return employees regardless of their status, \&quot;Active\&quot; or \&quot;Inactive\&quot;. This differs from the UI, which by default applies a quick filter to display only \&quot;Active\&quot; employees.
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param requestCustomReport  (required)
     * @return RequestCustomReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom report successfully requested </td><td>  -  </td></tr>
     </table>
     */
    public RequestCustomReportRequestBuilder requestCustomReport(String companyDomain, String format) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new RequestCustomReportRequestBuilder(companyDomain, format);
    }
}
