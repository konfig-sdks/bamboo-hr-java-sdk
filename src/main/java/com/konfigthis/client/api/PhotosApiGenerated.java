/*
 * BambooHR API
 * This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PhotosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PhotosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PhotosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEmployeePhotoCall(String companyDomain, String employeeId, String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/photo/{size}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeePhotoValidateBeforeCall(String companyDomain, String employeeId, String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEmployeePhoto(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeePhoto(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getEmployeePhoto(Async)");
        }

        return getEmployeePhotoCall(companyDomain, employeeId, size, _callback);

    }


    private ApiResponse<Void> getEmployeePhotoWithHttpInfo(String companyDomain, String employeeId, String size) throws ApiException {
        okhttp3.Call localVarCall = getEmployeePhotoValidateBeforeCall(companyDomain, employeeId, size, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmployeePhotoAsync(String companyDomain, String employeeId, String size, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeePhotoValidateBeforeCall(companyDomain, employeeId, size, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmployeePhotoRequestBuilder {
        private final String companyDomain;
        private final String employeeId;
        private final String size;

        private GetEmployeePhotoRequestBuilder(String companyDomain, String employeeId, String size) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
            this.size = size;
        }

        /**
         * Build call for getEmployeePhoto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeePhotoCall(companyDomain, employeeId, size, _callback);
        }


        /**
         * Execute getEmployeePhoto request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmployeePhotoWithHttpInfo(companyDomain, employeeId, size);
        }

        /**
         * Execute getEmployeePhoto request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmployeePhotoWithHttpInfo(companyDomain, employeeId, size);
        }

        /**
         * Execute getEmployeePhoto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmployeePhotoAsync(companyDomain, employeeId, size, _callback);
        }
    }

    /**
     * Get an employee photo
     * Get an employee photo
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId The ID for the employee you are getting the photo for. (required)
     * @param size Photo size (required)
     * @return GetEmployeePhotoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeePhotoRequestBuilder getEmployeePhoto(String companyDomain, String employeeId, String size) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (size == null) throw new IllegalArgumentException("\"size\" is required but got null");
            

        return new GetEmployeePhotoRequestBuilder(companyDomain, employeeId, size);
    }
    private okhttp3.Call storeNewEmployeePhotoCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/v1/employees/{employeeId}/photo"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeNewEmployeePhotoValidateBeforeCall(String companyDomain, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling storeNewEmployeePhoto(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling storeNewEmployeePhoto(Async)");
        }

        return storeNewEmployeePhotoCall(companyDomain, employeeId, _callback);

    }


    private ApiResponse<Void> storeNewEmployeePhotoWithHttpInfo(String companyDomain, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = storeNewEmployeePhotoValidateBeforeCall(companyDomain, employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call storeNewEmployeePhotoAsync(String companyDomain, String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeNewEmployeePhotoValidateBeforeCall(companyDomain, employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StoreNewEmployeePhotoRequestBuilder {
        private final String companyDomain;
        private final String employeeId;

        private StoreNewEmployeePhotoRequestBuilder(String companyDomain, String employeeId) {
            this.companyDomain = companyDomain;
            this.employeeId = employeeId;
        }

        /**
         * Build call for storeNewEmployeePhoto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file is too big. </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> if the file is not in a supported file format or if the width doesn&#39;t match the height. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return storeNewEmployeePhotoCall(companyDomain, employeeId, _callback);
        }


        /**
         * Execute storeNewEmployeePhoto request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file is too big. </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> if the file is not in a supported file format or if the width doesn&#39;t match the height. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            storeNewEmployeePhotoWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute storeNewEmployeePhoto request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file is too big. </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> if the file is not in a supported file format or if the width doesn&#39;t match the height. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return storeNewEmployeePhotoWithHttpInfo(companyDomain, employeeId);
        }

        /**
         * Execute storeNewEmployeePhoto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The file was successfully uploaded </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> if the employee doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> if the file is too big. </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> if the file is not in a supported file format or if the width doesn&#39;t match the height. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return storeNewEmployeePhotoAsync(companyDomain, employeeId, _callback);
        }
    }

    /**
     * Store a new employee photo
     * Store a new employee photo
     * @param companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param employeeId The ID for the employee you are setting the photo for. (required)
     * @return StoreNewEmployeePhotoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The file was successfully uploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the employee doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> if the file is too big. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if the file is not in a supported file format or if the width doesn&#39;t match the height. </td><td>  -  </td></tr>
     </table>
     */
    public StoreNewEmployeePhotoRequestBuilder storeNewEmployeePhoto(String companyDomain, String employeeId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new StoreNewEmployeePhotoRequestBuilder(companyDomain, employeeId);
    }
}
